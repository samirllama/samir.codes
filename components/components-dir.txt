Directory Tree:
.
├── DashboardButton.tsx
├── Hero.tsx
├── HeroSection.tsx
├── ScrollSlide.tsx
├── ThemeToggle.tsx
├── Timestamp.tsx
├── TypingEffect.tsx
├── animate.tsx
├── fanning-list.tsx
├── flip-text.tsx
├── highlighter.tsx
├── hooks
│   └── mouse-position.ts
├── professional-summary.tsx
├── project-stack.tsx
├── slider
│   ├── SlideColumn.tsx
│   ├── SlideSection.tsx
│   └── slideData.ts
├── tech-stack.tsx
├── typeface-section.tsx
└── ui
    ├── Button.tsx
    ├── PrimaryButton.tsx
    ├── footer.tsx
    ├── header-title.tsx
    ├── header.tsx
    ├── logo.tsx
    ├── mobile-menu.tsx
    └── welcome-layout.tsx


================================================================================
FILE: DashboardButton.tsx
================================================================================

// import { getCurrentUser } from "@/lib/dal"
import Button from "./ui/Button";
import Link from "next/link";

// const DashboardButtonSignedIn = async () => {
//   const user = await getCurrentUser()
//   return (
//     <>
//       {user ? (
//         <Link href="/dashboard">
//           <Button>Go to Dashboard</Button>
//         </Link>
//       ) : (
//         <div className="flex items-center space-x-4">
//           <Link href="/signin">
//             <Button variant="outline">Sign in</Button>
//           </Link>
//           <Link href="/signup">
//             <Button>Sign up</Button>
//           </Link>
//         </div>
//       )}
//     </>
//   )
// }

const DashboardButton = () => {
  return (
    <div className="flex items-center space-x-4">
      <Link href="/signin">
        <Button variant="outline">Sign in</Button>
      </Link>
      <Link href="/signup">
        <Button>Sign up</Button>
      </Link>
    </div>
  );
};

export default DashboardButton;


================================================================================
FILE: Hero.tsx
================================================================================

// components/Hero.tsx

import Image from "next/image";
import LeafParticles from "./leaf-particles/LeafParticles";
import Illustration from "@/public/glow-bottom.svg";
import TypingEffect from "./TypingEffect";
import { cn } from "@/lib/utils";

const Intro = [
  "Hi, I’m a software engineer passionate about solving complex problems and creating technology that improves lives. Welcome to my website, where I share my projects and insights on building impactful software.",
  "my digital playground—a space where I stash notes, articles, and code snippets to revisit later. I’m a software engineer who thinks out loud here, mostly about dev challenges, with some rants, self-care musings, and mental health sprinkled in. Dive in and explore!",
  "Hey, I’m a coder hooked on crafting speedy, open-for-all web magic—welcome to my wild dev playground!",
  "Hey, I’m a dev who thrives on crafting code to fix user headaches and build speedy, open-for-all web magic!",
];

// Dynamic parts
const dynamicHobbies = [
  "gaming.",
  "reading.",
  "coding.",
  "hiking.",
  "cooking.",
];

export default function Hero() {
  return (
    <section className="relative min-h-screen flex items-center justify-center">
      {/* Background Elements */}
      <LeafParticles className="absolute inset-0 -z-10" quantity={40} />
      <div
        className="absolute bottom-0 left-1/2 transform -translate-x-1/2 pointer-events-none -z-10 opacity-70 dark:opacity-100"
        aria-hidden="true"
      >
        <Image
          src={Illustration}
          className="max-w-none"
          width={2146}
          alt="Hero Background Glow"
          priority
        />
      </div>

      <div className="max-w-6xl mx-auto px-4 sm:px-6 text-center">
        <div className="max-w-3xl mx-auto">
          {/* Constrain text width */}
          <div data-aos="fade-down" data-aos-delay="200">
            <TypingEffect
              staticPrefix="I like "
              items={dynamicHobbies}
              // Apply text size/weight/color using Tailwind utilities
              // Example using text-4xl for larger hero text
              paragraphClassName={cn(
                "text-4xl md:text-6xl font-bold mb-8",
                "text-slate-700 dark:text-slate-200"
              )}
              typingSpeed={120}
              deletingSpeed={60}
              pauseDuration={1800000}
            />
          </div>
          {/* Optional Buttons Section */}
        </div>
      </div>
    </section>
  );
}


================================================================================
FILE: HeroSection.tsx
================================================================================

// components/HeroSection.tsx

// 'use client'; Uncomment later to add interactive elements
import Image from "next/image";
import { cn } from "@/lib/utils";

const imageSrc = "/assets/Relaxing-Forest-Setting.png";
const imageAlt = "Samir Coder";

const subText =
  "With a passion for crafting web solutions that are blazing fast and accessible.";

const HeroSection = () => {
  return (
    <section
      className="my-4"
      aria-label="Hero section introducing Samir's portfolio"
    >
      <div className="pb-[61vw] md:pb-[55vw] lg:pb-[45vw] xl:pb-[36.25vw] 2xl:pb-[670px] mb-24 lg:mb-16 relative">
        {/* Text Content Area */}
        <div className="uppercase max-w-[1700px] w-full lg:w-11/12">
          <h1
            className={cn([
              "text-default",
              "flex flex-wrap overflow-hidden justify-start w-full",
              "hero-text",
            ])}
          >
            <span className="block overflow-hidden">
              <span className="block overflow-hidden will-change-transform translate-y-0 transform-gpu">
                <span className="block mb-0 pb-0 pr-[1px] ml-[10vw]">
                  <span className="block ms-text-adjust">I &nbsp;</span>
                </span>
              </span>
            </span>

            <span className="inline-block relative h-[1em] overflow-hidden align-bottom">
              {/* INVISIBLE SPACER - Give parent width */}
              <span className="invisible whitespace-nowrap ms-text-adjust">
                Break &nbsp;
              </span>
              <span className="block absolute inset-0 flip-animation-container">
                {/* This should now have top: 0 */}
                <span className="block whitespace-nowrap ms-text-adjust">
                  Build
                </span>
                <span className="block whitespace-nowrap ms-text-adjust absolute top-full left-0">
                  Break
                </span>
              </span>
            </span>

            {/* "things! " */}
            <span className="block overflow-hidden">
              <span className="block overflow-hidden will-change-transform translate-y-0 transform-gpu">
                <span className="block mb-0 pb-0">
                  <span className="block ms-text-adjust">things. &nbsp;</span>
                </span>
              </span>
            </span>

            {/*
              Manual line break element
              Insert a span with w-full (width: 100%).
              As a flex item, this span will take up the entire width of the flex container (the h1), forcing the subsequent flex items ("I " and the mapped words) onto the next line.
            */}
            <span className="w-full"></span>

            {subText.split(" ").map((message, index) => (
              <span className="block overflow-hidden" key={index}>
                <span className="block overflow-hidden will-change-transform translate-y-0 transform-gpu">
                  <span className="block mb-0 pb-0">
                    <span className="block ms-text-adjust">
                      {message}
                      {index < subText.split(" ").length - 1 ? "\u00A0" : ""}
                    </span>
                  </span>
                </span>
              </span>
            ))}
          </h1>
        </div>

        <div className="absolute bottom-0 right-0 h-[60vh] w-[80vw] overflow-hidden bg-[#000] bg-opacity-50 max-w-[1000px]">
          <div className="opacity-[0.2] absolute inset-0 overflow-hidden">
            {/* Inner container needed for Image fill (must be relative/absolute/etc. and have dimensions) */}

            <div className="absolute inset-0 w-full h-full">
              <Image
                src={imageSrc}
                alt={imageAlt}
                fill
                className="object-cover filter saturate-50 hue-rotate-15deg"
                priority={true}
              />
              {/* Overlay for text readability and blending with dark green */}
              <div className="absolute inset-0 bg-color-surface-page bg-opacity-60" />
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default HeroSection;


================================================================================
FILE: ScrollSlide.tsx
================================================================================

// components/ScrollSlide.tsx
'use client';
import { useEffect, useRef } from 'react';

export default function ScrollSlide() {
  const containerRef = useRef<HTMLDivElement>(null);
  const leftColRef = useRef<HTMLDivElement>(null);
  const rightColRef = useRef<HTMLDivElement>(null);

  // Basic height synchronization
  useEffect(() => {
    const setHeights = () => {
      if (containerRef.current) {
        const height = containerRef.current.offsetHeight;
        containerRef.current.style.setProperty('--slide-height', `${height}px`);
      }
    };

    setHeights();
    window.addEventListener('resize', setHeights);
    return () => window.removeEventListener('resize', setHeights);
  }, []);

  return (
    <div
      ref={containerRef}
      className="h-screen overflow-y-auto relative"
      style={{ scrollBehavior: 'smooth' }}
    >
      {/* Main Grid Container */}
      <div className="grid grid-cols-[40fr_5fr_5fr_40fr] min-h-[var(--slide-height)]">
        {/* Left Sticky Column */}
        <div
          ref={leftColRef}
          className="sticky top-0 h-[var(--slide-height)] flex flex-col justify-between p-8"
        >
          <div className="space-y-4">
            <h2 className="text-4xl font-bold">Section Title</h2>
            <p className="text-lg">Section content that remains sticky...</p>
          </div>
          <div className="flex gap-4">
            <button className="px-4 py-2 bg-black text-white rounded-full">
              Previous
            </button>
            <button className="px-4 py-2 bg-black text-white rounded-full">
              Next
            </button>
          </div>
        </div>

        {/* Right Sticky Column */}
        <div
          ref={rightColRef}
          className="sticky top-0 h-[var(--slide-height)] col-start-4 flex items-center justify-center"
        >
          <div className="w-full max-w-md h-64 bg-gray-100 rounded-xl" />
        </div>

        {/* Scroll Content */}
        <div className="col-span-full row-start-1 min-h-[200vh]">
          <div className="grid grid-cols-[40fr_5fr_5fr_40fr]">
            {/* Content that scrolls between columns */}
            {Array.from({ length: 10 }).map((_, i) => (
              <div key={i} className="h-screen p-8 border-t">
                <p className="text-lg">Scrollable content section {i + 1}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}


================================================================================
FILE: ThemeToggle.tsx
================================================================================

"use client";

import { useTheme } from "next-themes";
import { useEffect, useState } from "react";
import { SunIcon, MoonIcon } from "lucide-react";
import Button from "./ui/Button";

const themes = ["light", "dark", "mocha-mousse"];
export default function ThemeToggle() {
  // useTheme hook provides the current theme and the setTheme function
  // 'theme' can be 'light', 'dark', 'mocha-mousse', 'system', or undefined on initial render
  // 'resolvedTheme' will be 'light' or 'dark' if 'system' is the theme, otherwise matches 'theme'
  // 'themes' is the list of themes provided to ThemeProvider (['light', 'dark', 'mocha-mousse'] in your case)
  // 'setTheme' is the function to change the theme
  // 'systemTheme' is 'light' or 'dark' based on the user's OS preference
  const { theme, setTheme, resolvedTheme } = useTheme();

  // State to track if the component has mounted. This is crucial for
  // avoiding hydration mismatches as next-themes reads localStorage
  // which is only available on the client side.
  const [mounted, setMounted] = useState(false);

  // useEffect runs only on the client side after initial render
  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    console.log("THEME TOGGLE:", { theme });
  }, [theme]);

  // If the component is not mounted, render a placeholder or null
  // This prevents rendering a UI that might not match the server-rendered HTML
  if (!mounted) {
    // You can return a loading spinner or a placeholder div here
    // For now, returning null to render nothing until mounted
    return null;
  }

  // Determine the currently displayed theme for the button text/icon
  // Use 'resolvedTheme' if 'enableSystem' is true and 'theme' is 'system'
  const currentThemeDisplay =
    theme === "system" ? `${resolvedTheme} (System)` : theme;

  // Function to cycle through the defined themes
  const toggleTheme = () => {
    // Start from light if theme is undefined initially
    const currentIndex = themes.indexOf(theme || "light");
    const nextIndex = (currentIndex + 1) % themes.length;
    const nextTheme = themes[nextIndex];
    setTheme(nextTheme);
  };

  return (
    <Button
      variant="ghost"
      size="sm" // Use a smaller size consistent with header icons
      onClick={toggleTheme}
      aria-label={
        theme === "dark" ? "Activate light mode" : "Activate dark mode"
      }
      className="px-2" // Adjust padding for icon-only button
    >
      {currentThemeDisplay}
      {theme === "dark" ? (
        <SunIcon className="h-5 w-5 text-slate-400 hover:text-slate-200" />
      ) : (
        <MoonIcon className="h-5 w-5 text-slate-500 hover:text-slate-800" />
      )}
    </Button>
  );
}


================================================================================
FILE: Timestamp.tsx
================================================================================

'use client'

import { useState, useLayoutEffect } from 'react'

export function Timestamp() {
  const [time, setTime] = useState<number | null>(null)
  useLayoutEffect(() => {
    // You can determine when and how often to update
    // the time here. In this example we update it only once
    setTime(new Date().getFullYear())
  }, [])
  if (time) {
    return time
  }
  return null
}


================================================================================
FILE: TypingEffect.tsx
================================================================================

// /components/TypingEffect.tsx
"use client";

import React, { useState, useEffect, useRef } from "react";
import { calculateNextTypingStep } from "@/lib/typing-logic";
import { cn } from "@/lib/utils";

interface TypingEffectProps {
  staticPrefix?: string /** Static text to display before typing animation. */;
  items: string[];
  typingSpeed?: number;
  deletingSpeed?: number;
  pauseDuration?: number;
  paragraphClassName?: string;
}

const defaultItems = ["gaming.", "reading.", "coding."];

const TypingEffect: React.FC<TypingEffectProps> = ({
  staticPrefix = "",
  items = defaultItems,
  typingSpeed = 100,
  deletingSpeed = 50,
  pauseDuration = 1500,
  paragraphClassName = "font-semibold",
}) => {
  const [currentItemIndex, setCurrentItemIndex] = useState(0);
  const [displayedText, setDisplayedText] = useState("");
  const [isDeleting, setIsDeleting] = useState(false);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    if (!items || items.length === 0) return;

    const step = calculateNextTypingStep(
      { items, currentItemIndex, displayedText, isDeleting },
      { typingSpeed, deletingSpeed, pauseDuration }
    );
    timeoutRef.current = setTimeout(() => {
      setDisplayedText(step.nextText);
      setIsDeleting(step.nextIsDeleting);
      if (isDeleting && step.nextText === "") {
        setCurrentItemIndex((prevIndex) => (prevIndex + 1) % items.length);
      }
    }, step.delay);

    return () => {
      if (timeoutRef.current) clearTimeout(timeoutRef.current);
    };
  }, [
    items,
    currentItemIndex,
    displayedText,
    isDeleting,
    typingSpeed,
    deletingSpeed,
    pauseDuration,
  ]);

  return (
    <p className={cn(paragraphClassName)}>
      {/* Static prefix */}
      {staticPrefix && (
        <span className="inline-block align-bottom pr-3 min-h-[1.2em] ">{staticPrefix}</span>
      )}

      {/* Dynamic part within styled span */}
      <span
        className={cn(
          // Base styles needed for effect
          "inline-block relative align-bottom whitespace-nowrap min-h-[1.2em]",
          // Custom class for caret (styles in global CSS)
          "blinkingCaret",
          // Default text color (overridden by dark gradient)
          "text-inherit", // Inherit color from parent <p>
          // Dark mode gradient text (using mapped colors from tailwind.config)
          "dark:bg-gradient-to-r dark:from-primary-400 dark:to-secondary-400 dark:bg-clip-text dark:text-transparent"
        )}
      >
        {displayedText || "\u00A0"}
      </span>
    </p>
  );
};

export default TypingEffect;


================================================================================
FILE: animate.tsx
================================================================================

"use client"
import AOS from "aos"
import { useEffect } from "react"

const Animate = () => {
  useEffect(() => {
    AOS.init({
      once: true,
      disable: "phone",
      duration: 1000,
      easing: "ease-out-cubic",
    })
  })

  return null
}

export default Animate


================================================================================
FILE: fanning-list.tsx
================================================================================

"use client";

import React, { useState } from "react";
import { cn } from "../lib/utils";
/*

? Revealing the detailList items when an experience is expanded, Step-by-Step Explanation:
> 1. Absolute Positioning for Details: Position the details absolutely below each list item to prevent layout shifts affecting the fanning effect.

> 2. Animate maxHeight and Opacity: Use CSS transitions on maxHeight and opacity to create a smooth expansion effect.

> 3. Conditional Rendering Based on Active Index: Display details only for active item using activeIndex state.

> 4. Style Adjustments: Ensure details are styled appropriately and appear above other items using z-index.

*/

const FanningListV2 = ({ experiences }) => {
  const [hoveredIndex, setHoveredIndex] = useState(null);
  const [focusedIndex, setFocusedIndex] = useState(null);
  const activeIndex = hoveredIndex !== null ? hoveredIndex : focusedIndex;

  //  Event Handlers ---
  const handleMouseEnter = (index) => {
    console.log("mouse entered::", index);
    // Only update if hover is supported (media query handled in CSS)
    // This prevents hover effects on touch devices where hover isn't a persistent state.
    // However, for simplicity in this React example, we'll let CSS handle the media query.
    setHoveredIndex(index);
  };

  const handleMouseLeave = () => {
    setHoveredIndex(null);
  };

  const handleFocus = (index) => {
    setFocusedIndex(index);
  };

  const handleBlur = () => {
    setFocusedIndex(null);
  };

  const maxRotation = 15;
  const maxTranslationY = 30;
  const minOpacity = 0.3;

  return (
    <ul className="fanning-list uppercase border-t border-white/30">
      {experiences.map((job, index) => {
        const distance = activeIndex !== null ? index - activeIndex : 0;
        const dynamicStyles =
          activeIndex !== null
            ? {
                transform: `rotate(${distance * maxRotation}deg) translateY(${
                  distance * maxTranslationY
                }px)`,
                opacity: Math.max(
                  minOpacity,
                  1 - Math.abs(distance) / experiences.length
                ),
                ...(index === activeIndex && {
                  transform: "none",
                  opacity: 1,
                }),
              }
            : {};

        return (
          <li
            key={index}
            className="fanning-list-item block relative"
            style={dynamicStyles}
            onMouseEnter={() => handleMouseEnter(index)}
            onMouseLeave={handleMouseLeave}
            onFocus={() => handleFocus(index)}
            onBlur={handleBlur}
            tabIndex={0}
          >
            {/* Existing Content */}
            <span className="border-b border-color-accent w-full py-2 lg:py-1 block lg:flex lg:items-end">
              <span className="relative ">
                <span
                  className="block"
                  style={{ transform: "translateY(0%) translateZ(0px)" }}
                >
                  <span className="block ms-text-adjust">{job.company}</span>
                </span>
              </span>
            </span>
            <div>{job.title}</div>
            <div>{job?.company}</div>
            <span className="block">
              <span className="block ms-text-adjust">
                {job.startYear} - {job.endYear || "Present"}
              </span>
            </span>

            {/* Detail List Animation */}
            {job.detailList && job.detailList.length > 0 && (
              <div
                className="absolute top-full left-0 w-full bg-white/90 backdrop-blur-sm z-10 transition-all duration-500 ease-in-out overflow-hidden"
                style={{
                  maxHeight: activeIndex === index ? "1000px" : "0",
                  opacity: activeIndex === index ? 1 : 0,
                }}
              >
                <div className="p-4 space-y-2">
                  {job.detailList.map((detail, i) => (
                    <div key={i} className="text-sm text-gray-700">
                      {detail}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </li>
        );
      })}
    </ul>
  );
};

const FanningList = ({ experiences }) => {
  // State to track the index of the currently hovered item
  const [hoveredIndex, setHoveredIndex] = useState(null);
  // State to track the index of the currently focused item (for accessibility via keyboard)
  const [focusedIndex, setFocusedIndex] = useState(null);

  // Determine the active index. Hover takes precedence if both hover and focus are active.
  const activeIndex = hoveredIndex !== null ? hoveredIndex : focusedIndex;

  //  Event Handlers ---
  const handleMouseEnter = (index) => {
    // Only update if hover is supported (media query handled in CSS)
    // This prevents hover effects on touch devices where hover isn't a persistent state.
    // However, for simplicity in this React example, we'll let CSS handle the media query.
    setHoveredIndex(index);
  };

  const handleMouseLeave = () => {
    setHoveredIndex(null);
  };

  const handleFocus = (index) => {
    setFocusedIndex(index);
  };

  const handleBlur = () => {
    setFocusedIndex(null);
  };

  // Style Calculation ---
  // These values control the intensity of the fanning effect.
  // Adjust them to get the desired arc shape and opacity range.
  const maxRotation = 15; // Maximum rotation angle for items furthest from the active one
  const maxTranslationY = 30; // Maximum vertical translation
  const minOpacity = 0.3; // Minimum opacity for items furthest from the active one

  return (
    // Apply the base fanning-list class and existing Tailwind styles
    <ul className="fanning-list uppercase border-t border-white/30">
      {experiences.map((job, index) => {
        // Calculate the distance from the active item.
        // If no item is active, distance is 0 (no effect).
        const distance = activeIndex !== null ? index - activeIndex : 0;

        // Calculate dynamic styles based on distance
        const dynamicStyles =
          activeIndex !== null
            ? {
                // Rotation: More rotation for items further away
                transform: `rotate(${distance * maxRotation}deg) translateY(${
                  distance * maxTranslationY
                }px)`,
                // Opacity: Lower opacity for items further away
                opacity: Math.max(
                  minOpacity,
                  1 - Math.abs(distance) / experiences.length // Adjust denominator for opacity falloff
                ),
                // Ensure the active item has full opacity and no transform
                ...(index === activeIndex && {
                  transform: "none",
                  opacity: 1,
                }),
              }
            : {};

        const siblingIndex = ` ${activeIndex !== null ? index : 0}`;

        return (
          <li
            key={index} // Using index as key is acceptable here if the list order is static
            className={cn(["fanning-list-item", "block"])}
            style={{ "--sibling-index": siblingIndex }} // Apply calculated dynamic styles
            onMouseEnter={() => handleMouseEnter(index)}
            onMouseLeave={handleMouseLeave}
            onFocus={() => handleFocus(index)}
            onBlur={handleBlur}
            // Add a tabIndex to make list items focusable (if they aren't already links/buttons)
            tabIndex={0}
          >
            <span className="border-b border-color-accent w-full py-2 lg:py-1 block lg:flex lg:items-end">
              <span className="relative ">
                <span
                  className="block"
                  style={{ transform: "translateY(0%) translateZ(0px)" }}
                >
                  <span className="block ms-text-adjust">{job.company}</span>
                </span>
              </span>
            </span>
            <div>{job.title}</div>
            <div>{job?.company}</div>
            {/* Date Range */}
            <span className="block">
              <span className="block ms-text-adjust">
                {job.startYear} - {job.endYear || "Present"}
              </span>
            </span>
          </li>
        );
      })}
    </ul>
  );
};

export default FanningList;


================================================================================
FILE: flip-text.tsx
================================================================================

import { FC } from "react";

const FlipText: FC = () => (
  <section className="pb-[20vw] lg:pb-[12.5vw]">
    <ul role="list" className="uppercase border-t border-white/30">
      <li className="block">
        <span className="border-b border-white/30 w-full py-2 lg:py-1 block lg:flex lg:items-end">
          <span className="leading-[1.275] block text-[clamp(18px,0.92rem+1.15vw,34px)] tracking-tight mb-1 lg:mb-0 relative overflow-hidden">
            <span className="quick-flip block">
              <span className="block ms-text-adjust ">British Petroleum</span>
            </span>
          </span>
        </span>
      </li>
    </ul>
  </section>
);

export default FlipText;


================================================================================
FILE: highlighter.tsx
================================================================================

// components/highlighter.tsx (Refactored with Tailwind v3)
/* eslint-disable @typescript-eslint/no-unused-expressions */
"use client";

import React, { useRef, useState, useEffect } from "react";
import useMousePosition from "./hooks/mouse-position"; // Assuming hook is moved or path updated
import { cn } from "@/lib/utils";

// --- Highlighter Container ---
// This component manages mouse position and applies CSS variables to children
type HighlighterProps = {
  children: React.ReactNode;
  className?: string;
  refresh?: boolean; // Prop to trigger re-calculation if needed
};

export default function Highlighter({
  children,
  className = "",
  refresh = false,
}: HighlighterProps) {
  const containerRef = useRef<HTMLDivElement>(null);
  const mousePosition = useMousePosition();
  const mouse = useRef<{ x: number; y: number }>({ x: 0, y: 0 });
  const containerSize = useRef<{ w: number; h: number }>({ w: 0, h: 0 });
  // No need for boxes state if we apply variables directly

  // Function to initialize container dimensions
  const initContainer = () => {
    if (containerRef.current) {
      containerSize.current.w = containerRef.current.offsetWidth;
      containerSize.current.h = containerRef.current.offsetHeight;
    }
  };

  // Function to update mouse position variables on children
  const onMouseMove = () => {
    if (containerRef.current) {
      const rect = containerRef.current.getBoundingClientRect();
      const { w, h } = containerSize.current;
      const x = mousePosition.x - rect.left;
      const y = mousePosition.y - rect.top;
      const inside = x < w && x > 0 && y < h && y > 0;

      if (inside) {
        mouse.current.x = x;
        mouse.current.y = y;
        // Apply CSS variables to all direct children with the target class
        Array.from(containerRef.current.children).forEach((el) => {
          if (el instanceof HTMLElement && (el.classList.contains('highlighterItem') || el.classList.contains('highlighterItem02'))) {
            const box = el;
            const boxX = -(box.getBoundingClientRect().left - rect.left) + mouse.current.x;
            const boxY = -(box.getBoundingClientRect().top - rect.top) + mouse.current.y;
            box.style.setProperty("--mouse-x", `${boxX}px`);
            box.style.setProperty("--mouse-y", `${boxY}px`);
          }
        });
      }
    }
  };

  // Initialize container size on mount and resize
  useEffect(() => {
    initContainer();
    window.addEventListener("resize", initContainer);
    return () => {
      window.removeEventListener("resize", initContainer);
    };
  }, []);

  // Update mouse variables on mouse move
  useEffect(() => {
    onMouseMove();
  }, [mousePosition]); // eslint-disable-line react-hooks/exhaustive-deps

  // Re-initialize if refresh prop changes
  useEffect(() => {
    initContainer();
  }, [refresh]);

  return (
    // Apply passed className to the container
    <div className={className} ref={containerRef}>
      {children}
    </div>
  );
}

// --- Highlighter Item ---
type HighlighterItemProps = {
  children: React.ReactNode;
  className?: string;
};

// Base Highlighter Item
export function HighlighterItem({
  children,
  className = "",
}: HighlighterItemProps) {
  return (
    <div
      // Apply base Tailwind styles + the custom class for pseudo-elements
      className={cn(
        "highlighterItem", // Custom class for global CSS pseudo-elements
        "relative h-full overflow-hidden rounded-2xl p-px", // Base layout/styles
        "bg-slate-800 dark:bg-slate-900", // Base background
        "transition-colors duration-300 ease-in-out", // Transition for hover
        "group-hover:bg-slate-700 dark:group-hover:bg-slate-800", // Background change on group hover
        className // Allow merging additional classes
      )}
      // Initialize CSS variables (optional, but good practice)
      style={{ '--mouse-x': '0px', '--mouse-y': '0px' } as React.CSSProperties}
    >
      {/* Inner div might be needed if padding interferes with pseudo-elements */}
      <div className="relative h-full bg-inherit rounded-[inherit] z-10"> {/* z-index to keep content above ::after */}
         {children}
      </div>
    </div>
  );
}

// Variant Highlighter Item (uses different pseudo-element styles via class)
export function HighlighterItem02({
  children,
  className = "",
}: HighlighterItemProps) {
  return (
    <div
      // Apply base Tailwind styles + the variant custom class
      className={cn(
        "highlighterItem02", // Custom class for global CSS pseudo-elements (variant)
        "relative h-full overflow-hidden rounded-2xl p-px", // Base layout/styles
        "bg-slate-800 dark:bg-slate-900", // Base background
        "transition-colors duration-300 ease-in-out", // Transition for hover
        "group-hover:bg-slate-700 dark:group-hover:bg-slate-800", // Background change on group hover
        className // Allow merging additional classes
      )}
      style={{ '--mouse-x': '0px', '--mouse-y': '0px' } as React.CSSProperties}
    >
       <div className="relative h-full bg-inherit rounded-[inherit] z-10">
         {children}
      </div>
    </div>
  );
}


================================================================================
FILE: hooks/mouse-position.ts
================================================================================

import { useState, useEffect } from 'react';

interface MousePosition {
  x: number;
  y: number;
}

export default function useMousePosition(): MousePosition {
  const [mousePosition, setMousePosition] = useState<MousePosition>({ x: 0, y: 0 });

  useEffect(() => {
    const handleMouseMove = (event: MouseEvent) => {
      setMousePosition({ x: event.clientX, y: event.clientY });
    }

    window.addEventListener('mousemove', handleMouseMove);

    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
    }
  }, []);

  return mousePosition;
}


================================================================================
FILE: professional-summary.tsx
================================================================================

// components/ProfessionalSummary.tsx
import React from "react";

interface JobExperience {
  company: string;
  startYear: number | string;
  endYear?: number | string;
  title: string;
}

interface ProfessionalSummaryProps {
  experiences: JobExperience[];
}

const ProfessionalSummary: React.FC<ProfessionalSummaryProps> = ({
  experiences,
}) => {
  return (
    <section className="pb-[20vw] lg:pb-[12.5vw]">
      <h2 className="font-mono uppercase tracking-tight leading-[1] text-[10px] mb-5 pb-0 relative overflow-hidden">
        <span
          className="block"
          style={{ transform: "translateY(0%) translateZ(0px)" }}
        >
          Professional Summary
        </span>
      </h2>
      <ul className="bouncy-hover uppercase border-t border-accent-secondary">
        {experiences.map((job) => (
          <li key={job.company} className="block">
            <span className="border-b border-accent-secondary w-full py-2 lg:py-1 block lg:flex lg:items-end">
              {/* Company Name */}
              <span className="leading-[1.275] block text-[clamp(18px,0.92rem+1.15vw,34px)] font-display tracking-tight mb-1 lg:mb-0 relative overflow-hidden">
                <span
                  className="block"
                  style={{ transform: "translateY(0%) translateZ(0px)" }}
                >
                  <span className="block ms-text-adjust">{job.company}</span>
                </span>
              </span>

              {/* Dates & Title */}
              <span className="ml-auto leading-[1.275] font-serif lg:font-display block text-xl lg:text-[clamp(15px,0.92rem+1.15vw,34px)] tracking-tight relative overflow-hidden">
                <span
                  className="block"
                  style={{ transform: "translateY(0%) translateZ(0px)" }}
                >
                  <span className="flex items-end">
                    {/* Date Range */}
                    <span className="block">
                      <span className="block ms-text-adjust">
                        {job.startYear} - {job.endYear || "Present"}
                      </span>
                    </span>
                    {/* Job Title */}
                    <span className="capitalize block font-serif italic text-[clamp(14px,0.7rem+0.65vw,25px)] tracking-normal leading-none pl-2 pr-1 translate-y-[-45%] md:translate-y-[-30%] lg:translate-y-[-32%]">
                      ({job.title})
                    </span>
                  </span>
                </span>
              </span>
            </span>
          </li>
        ))}
      </ul>
    </section>
  );
};

export default ProfessionalSummary;


================================================================================
FILE: project-stack.tsx
================================================================================

// components/project-stack.tsx
import { cn } from "@/lib/utils";

interface Project {
  id: string | number;
  name: string;
  link: string;
}

interface ProjectStackProps {
  projects: Project[];
}

const ProjectStack: React.FC<ProjectStackProps> = ({ projects }) => {
  return (
    <section>
      <div className="pb-[20vw] lg:pb-[12.5vw]">
        <h2 className="font-mono uppercase tracking-tight leading-none text-[10px] mb-3 lg:mb-3 pb-0">
          Some Of My Projects
        </h2>

        {/* The list of projects */}
        <ul className="border-t border-accent-secondary bouncy-hover">
          {projects.map((project) => {
            return (
              <li key={project.id} className="block relative">
                <a
                  href={project.link}
                  target="_blank" // <-- Open in new tab
                  rel="noopener noreferrer" // <-- Security best practice for target="_blank"
                  className="uppercase border-b border-accent-secondary w-full py-2 lg:py-[15px] flex items-end relative group transition-all ease-[cubic-bezier(0.83,0,0.17,1)] duration-[400ms] lg:pl-0 a11y-focus"
                  aria-label={`View Project: ${project.name}`}
                >
                  {/* Project Name Span */}
                  <span className="block overflow-hidden">
                    <span
                      className={cn(
                        "leading-[0.95] block text-[clamp(30px,0.92rem+4.4vw,100px)] font-display tracking-tight relative z-[1] transition-opacity ease-[cubic-bezier(0.83,0,0.17,1)] duration-[400ms] lg:opacity-100",
                        "text-default"
                      )}
                    >
                      <span className="block">
                        <span className="block ms-text-adjust">
                          {project.name}
                        </span>
                      </span>
                    </span>
                  </span>

                  {/* "View Project" text */}
                  <span className="ml-auto text-right font-mono text-[10px] tracking-tight leading-none hidden lg:block relative overflow-hidden z-[1] transition-opacity ease-[cubic-bezier(0.83,0,0.17,1)] duration-[400ms] lg:opacity-100">
                    <span
                      className="block"
                      style={{ transform: "translateY(0%) translateZ(0px)" }}
                    >
                      View Project
                    </span>
                  </span>
                </a>
              </li>
            );
          })}
        </ul>
      </div>
    </section>
  );
};

export default ProjectStack;


================================================================================
FILE: slider/SlideColumn.tsx
================================================================================

// @/component/slider/SlideColumn.tsx
import React from "react";

interface SlideColumnProps {
  children: React.ReactNode;
  // other potential props: alignment
}

// This column will stick to the top while scrolling within its parent container
const SlideColumn: React.FC<SlideColumnProps> = ({ children }) => {
  return (
    <div className="sticky top-16 md:top-24 h-fit p-4 md:p-6">
      {/*
        'top-16 md:top-24': Defines the offset from the top where it sticks. Adjust as needed (e.g., header height).
        'h-fit': Height adjusts to content, crucial for sticky behavior within a scrolling context.
       */}
      <div className="bg-pastel-card shadow-md rounded-lg p-6">{children}</div>
    </div>
  );
};

export default SlideColumn;

/*
* Usage :
* We are not implementing slide-to-slide transitions here, but rendering all sections vertically to demonstrate the sticky scrolling effect WITHIN each section and AS YOU SCROLL from one section to the next.
const App: React.FC = () => {
  return (
    <main className="w-full overflow-x-hidden">
       {slides.map((slide) => (
        <SlideSection key={slide.id} slide={slide} />
      ))}

       > Optional: Add a simple footer
       <footer className="text-center p-4 bg-pastel-bg text-pastel-text-subtle text-sm">
         End of content.
       </footer>
    </main>
  );
};

export default App;

*/


================================================================================
FILE: slider/SlideSection.tsx
================================================================================

// @/component/slider/SlideSection.tsx

import Image from "next/image";
import React from "react";
import SlideColumn from "./SlideColumn";
import { SlideContent } from "./slideData"; // Import interface

interface SlideSectionProps {
  slide: SlideContent;
}

// Each section takes full viewport height and has its own background
const SlideSection: React.FC<SlideSectionProps> = ({ slide }) => {
  return (
    <section
      id={slide.id}
      // min-h-screen ensures it takes at least the screen height, allowing scrolling
      className={`min-h-screen w-full flex items-center justify-center p-4 md:p-8 ${slide.bgColor}`}
    >
      {/* The grid container within the section */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 w-full max-w-6xl">
        {/* Left Column (Sticky) */}
        <SlideColumn>
          <h2 className="text-2xl md:text-3xl font-bold mb-4 text-pastel-text-main">
            {slide.title}
          </h2>
          <p className="text-base md:text-lg text-pastel-text-subtle leading-relaxed">
            {slide.text}
          </p>
          {/* Add more content here if needed to test scrolling */}
          <div className="mt-6 h-48 bg-gray-200 rounded flex items-center justify-center text-sm text-gray-500">
            (Placeholder for more left content)
          </div>
        </SlideColumn>

        {/* Right Column (Sticky) */}
        <SlideColumn>
          {slide.imageUrl ? (
            <Image
              width={1440}
              height={1900}
              src={slide.imageUrl}
              alt={`${slide.title} visual representation`}
              className="w-full h-auto object-contain rounded-lg shadow-sm max-h-[60vh]" // Limit image height
            />
          ) : (
            <div className="flex items-center justify-center h-64 bg-gray-100 rounded-lg">
              <p className="text-pastel-text-subtle">
                No image for this section
              </p>
            </div>
          )}
          {/* Add more content here if needed */}
          <div className="mt-6 h-32 bg-gray-200 rounded flex items-center justify-center text-sm text-gray-500">
            (Placeholder for more right content)
          </div>
        </SlideColumn>
      </div>
    </section>
  );
};

export default SlideSection;


================================================================================
FILE: slider/slideData.ts
================================================================================

// @/component/slider/slideData.ts
export interface SlideContent {
    id: string;
    title: string;
    text: string;
    imageUrl?: string; // Optional image for the right column
    bgColor: string; // Background color for the slide section
  }

  export const slides: SlideContent[] = [
    {
      id: 'intro',
      title: 'Welcome to Our Story',
      text: 'This is the beginning. Scroll down to see how things progress. Notice how the columns behave as you scroll through this section.',
      imageUrl: '/assets/blast-off.png',
      bgColor: 'bg-pastel-primary' // Light Blue
    },
    {
      id: 'middle',
      title: 'The Developing Chapter',
      text: 'Here, things start to change. The content on the left might be longer than the image placeholder on the right, demonstrating the sticky effect more clearly. Keep scrolling!',
      imageUrl: '/assets/astro-2.png',
      bgColor: 'bg-pastel-secondary' // Pink
    },
    {
      id: 'end',
      title: 'Looking Ahead',
      text: 'This marks a new phase. We explore future possibilities. Sticky positioning allows key information or visuals to remain present as related details scroll by.',
      imageUrl: '/assets/astro-3.png',
      bgColor: 'bg-pastel-accent' // Mint Green
    },
    {
      id: 'extra',
      title: 'More Details',
      imageUrl: '/assets/astro-5.png',
      text: 'Adding some extra content here to ensure scrolling is significant enough to see the sticky effect properly on multiple sections. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
      // No image for this one to show variation
      bgColor: 'bg-indigo-100' // Different Pastel
    },
  ];


================================================================================
FILE: tech-stack.tsx
================================================================================

import { cn } from "@/lib/utils";
import type { Skill, SkillCategory } from "@/types";

interface SkillLinkProps {
  skill: Skill;
}

const SkillLink: React.FC<{ skill: Skill }> = ({ skill }: SkillLinkProps) => {
  const liClasses =
    "leading-[1.1] block text-2xl tracking-tight relative mb-[3px]";

  if (skill.url) {
    return (
      <li className={liClasses}>
        <a
          href={skill.url}
          target="_blank"
          rel="noreferrer noopener"
          className="relative group a11y-focus overflow-hidden inline-block" // Group class for hover
        >
          {/* Skill Name */}
          {skill.name}

          {/* --- ALWAYS Apply Animated Gradient Underline for Links --- */}
          <span
            className={cn(
              "absolute bottom-0 left-0 w-full h-[2px]", // Height of the underline
              "opacity-0 transition-opacity duration-300 ease-out", // Fade in/out
              "group-hover:opacity-100", // Visible on hover
              // Gradient Colors
              "bg-gradient-to-r from-red-500 via-yellow-500 via-green-500 via-blue-500 to-purple-500",
              "bg-[length:200%_auto]", // Background size for animation
              "group-hover:animate-slideGradient" // Apply animation only on hover
            )}
          ></span>
          {/* --- End Underline --- */}
        </a>
      </li>
    );
  } else {
    // Render as plain text in a span if no URL
    return (
      <li className={liClasses}>
        <span>{skill.name}</span>
      </li>
    );
  }
};

interface TechStackProps {
  skillCategories: SkillCategory[]; // Use the defined type
}

export default function TechStack({ skillCategories }: TechStackProps) {
  return (
    <section className="grid grid-cols-12 pb-[20vw] lg:pb-[12.5vw]" id="tools">
      <div className="col-span-12 lg:col-span-4 mb-2 lg:mb-0">
        <h2 className="font-mono uppercase tracking-tight leading-none text-[10px] mb-3 pb-0">
          Technical Skills
        </h2>
      </div>

      <div className="col-span-12 lg:col-span-7">
        <div className="max-w-[820px]">
          <h2 className="leading-[1] block text-[clamp(30px,0.92rem+2vw,45px)] font-display tracking-tight mb-12 uppercase">
            Expertise
          </h2>

          {/* Two-column layout for the lists */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8">
            {skillCategories?.map((category, index) => (
              <div
                // Distribute categories between columns somewhat evenly
                // This basic logic puts first half in col 1, second half in col 2
                // Adjust if you want more specific column breaks
                className={cn(
                  "mb-8 lg:mb-12",
                  index < Math.ceil(skillCategories.length / 2)
                    ? "col-span-1"
                    : "col-span-1"
                )}
                key={category.title}
              >
                <span className="uppercase block font-mono tracking-tight leading-none text-[10px] mb-3 pb-0">
                  {category.title}
                </span>
                <ul className="bouncy-hover">
                  {/* Applied bouncy-hover to each list */}
                  {category.skills.map((skill: Skill) => (
                    <SkillLink key={skill.name} skill={skill} />
                  ))}
                </ul>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
}


================================================================================
FILE: typeface-section.tsx
================================================================================

// components/typeface-section.tsx
"use client";

import React, { useState, useEffect, useRef } from "react";
import { cn } from "@/lib/utils";

// Define the structure for your code snippet data
interface CodeSnippet {
  id: string;
  originalCode: string;
  temporaryText: string; // Add temporary text
  typeface: "neon" | "argon" | "xenon" | "radon" | "krypton";
  alignment: "left" | "right";
  textStrokeClass?: string; // Optional: class for text stroke if using CSS utilities
  // NEW properties based on the styles/config:
  animationClass?:
    | "animate-ghostpulse"
    | "animate-ghostpulse2"
    | "animate-ghostpulse3";
  ghostStateClass?: "ghost" | "ghost2" | "ghost3" | "ghost4"; // Matches CSS classes
}

// Define the data for your code snippets
const codeSnippets: CodeSnippet[] = [
  {
    id: "1",
    originalCode:
      "console.log(`Terminal dimensions: ${my_terminal.width} x ${my_terminal.height}`,)",
    temporaryText:
      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()_+`1234567890-=[]{}|;':\",./?abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()_+`12345", // The long string
    typeface: "neon",
    alignment: "left",
    animationClass: "animate-ghostpulse",
    ghostStateClass: "ghost",
  },
  {
    id: "2",
    originalCode:
      "$l_optimized_time = $timing_obj->get_optimized_time($i_terminal_time);",
    temporaryText:
      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()_+`1234567890-=[]{}|;':\",./?abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()_+`12345", // Use the same or different temporary text
    typeface: "argon",
    alignment: "right",
    animationClass: "animate-ghostpulse2",
    ghostStateClass: "ghost2",
  },
  {
    id: "3",
    temporaryText:
      "adjusted = [t.m_timingStart.to_millis() for t in log_lines if t >= today_in_millis],",
    originalCode:
      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()_+`1234567890-=[]{}|;':\",./?abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()_+`12345",
    typeface: "xenon",
    alignment: "left",
    animationClass: "animate-ghostpulse3",
    ghostStateClass: "ghost3",
  },
  {
    id: "4",
    temporaryText:
      "std::transform(vec.begin(), vec.end(), vec.begin(), [](int num){ return num * num; });",
    originalCode:
      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()_+`1234567890-=[]{}|;':\",./?abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()_+`12345",
    typeface: "radon",
    alignment: "right",
    animationClass: "animate-ghostpulse",
    ghostStateClass: "ghost4",
  },
  {
    id: "5",
    originalCode:
      "let sumSensorReadings: u32 = (1..=10).filter(|x| x % 2 == 0).sum();",
    temporaryText:
      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()_+`1234567890-=[]{}|;':\",./?abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()_+`12345",
    typeface: "krypton",
    alignment: "left",
    animationClass: "animate-ghostpulse2",
    ghostStateClass: "ghost",
  },
];

// Reset interval duration (in milliseconds)
const RESET_INTERVAL = 1000; // 1 second

const TypefaceShowcase: React.FC = () => {
  // State to track which snippet (if any) is currently showing temporary text
  // Using a Map for efficient updates by snippet id
  const [showingTemporaryText, setShowingTemporaryText] = useState<
    Map<string, boolean>
  >(new Map());

  // Ref to store timers for each snippet
  const timers = useRef<Map<string, NodeJS.Timeout>>(new Map());

  // Cleanup timers on component unmount
  useEffect(() => {
    return () => {
      timers.current.forEach((timer) => clearTimeout(timer));
    };
  }, []);

  const handleClick = (snippetId: string) => {
    if (timers.current.has(snippetId)) {
      clearTimeout(timers.current.get(snippetId));
    }

    // Set state to show temporary text for this snippet
    setShowingTemporaryText((prev) => new Map(prev).set(snippetId, true));

    // Set new timer to reset text back to original
    const timer = setTimeout(() => {
      setShowingTemporaryText((prev) => {
        const newState = new Map(prev);
        newState.delete(snippetId); // Remove entry
        return newState;
      });
      timers.current.delete(snippetId); // Clean up the timer ref
    }, RESET_INTERVAL);

    timers.current.set(snippetId, timer);
  };

  return (
    <div
      role="img"
      aria-label="A collection of code snippets showcasing the five Monaspace typefaces"
      // Keep gap for spacing between rows, removed py-5 as inner divs have padding
      className="w-screen flex flex-col overflow-hidden gap-px"
    >
      {codeSnippets.map((snippet) => {
        // Determine  text to display
        const currentText = showingTemporaryText.get(snippet.id)
          ? snippet.temporaryText
          : snippet.originalCode;

        return (
          <div
            key={snippet.id}
            className="accelerate"
            style={{ opacity: 1, willChange: "opacity" }}
          >
            <div
              className={cn(
                "cursor-pointer select-none",
                // Responsive text size
                "text-[max(1.5rem,min(3rem,3vw))] leading-[1]",
                "bg-opacity-0",
                "py-3 lg:py-4 xl:py-5", // Padding for vertical spacing
                "whitespace-nowrap relative min-w-full",
                "transform-gpu",
                // Apply dynamic classes from snippet data:
                // `text-${snippet.typeface}-primary`,
                "text-neon-primary",
                // `font-mona-${snippet.typeface}`,
                "font-mona-xenon",
                snippet.ghostStateClass,
                snippet.animationClass,
                `selection:bg-${snippet.typeface}-dark`,

                snippet.alignment === "left"
                  ? "self-start text-left left-0"
                  : "self-end text-right right-0",

                "glowtext"
              )}
              onClick={() => handleClick(snippet.id)}
            >
              <div className="transform-gpu" style={{ transform: "none" }}>
                <div
                  data-text={currentText} // Set data-text based on current state
                  className="glowtext"
                >
                  {/* Display the current text content */}
                  {currentText}
                </div>
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );
};

export default TypefaceShowcase;


================================================================================
FILE: ui/Button.tsx
================================================================================

import React from 'react'
// import { cn } from '@/lib/utils'

import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

// Utility function for combining Tailwind classes
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger'
  size?: 'sm' | 'md' | 'lg'
  isLoading?: boolean
}

export default function Button({
  className,
  children,
  variant = 'primary',
  size = 'md',
  isLoading = false,
  disabled,
  ...props
}: ButtonProps) {
  const baseStyles =
    'font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none'

  const variants = {
    primary:
      'bg-purple-600 text-white hover:bg-purple-700 active:bg-purple-800',
    secondary:
      'bg-gray-200 text-gray-900 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-100 dark:hover:bg-gray-600',
    outline:
      'border border-gray-300 bg-transparent hover:bg-gray-100 dark:border-dark-border-medium dark:hover:bg-gray-800 dark:hover:text-gray-100 dark:text-gray-100',
    ghost:
      'bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-100 dark:text-gray-100',
    danger: 'bg-red-600 text-white hover:bg-red-700',
  }

  const sizes = {
    sm: 'h-8 px-3 text-xs rounded-md',
    md: 'h-10 px-4 py-2 text-sm rounded-md',
    lg: 'h-12 px-6 py-3 text-base rounded-lg',
  }

  return (
    <button
      className={cn(
        baseStyles,
        variants[variant],
        sizes[size],
        isLoading && 'opacity-70 cursor-not-allowed',
        className
      )}
      disabled={disabled || isLoading}
      {...props}
    >
      {isLoading ? (
        <div className="flex items-center justify-center">
          <svg
            className="animate-spin -ml-1 mr-2 h-4 w-4 text-current"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              className="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              strokeWidth="4"
            ></circle>
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
          <span>Loading...</span>
        </div>
      ) : (
        children
      )}
    </button>
  )
}


================================================================================
FILE: ui/PrimaryButton.tsx
================================================================================

// components/ui/PrimaryButton.tsx
import React from "react";
import clsx from "clsx";
import { twMerge } from "tailwind-merge";

interface PrimaryButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  children: React.ReactNode;
}

const PrimaryButton: React.FC<PrimaryButtonProps> = ({
  children,
  className,
  ...props
}) => {
  const baseStyles =
    "px-6 py-3 rounded-md font-semibold transition duration-300 ease-in-out";
  const colorStyles =
    "bg-mocha-mousse text-neutral-lightest hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-mocha-mousse focus:ring-opacity-50";
  // Consider adding subtle shadow: shadow-md hover:shadow-lg

  const mergedClasses = twMerge(clsx(baseStyles, colorStyles, className));

  return (
    <button className={mergedClasses} {...props}>
      {children}
    </button>
  );
};

export default PrimaryButton;


================================================================================
FILE: ui/footer.tsx
================================================================================

import { Timestamp } from "@/components/Timestamp";

export default function Footer() {
  return (
    <footer>
      <div className="px-4 lg:px-5">
        <div className="grid grid-cols-2 text-lg leading-none lg:text-xl lg:leading-none border-t border-current pt-4 pb-3 lg:pt-4 lg:pb-3 items-center">
          <div className="col-span-1">
            <nav className="ml-auto flex space-x-3 lg:space-x-4">
              <a
                href="https://www.linkedin.com/in/samirllama/"
                target="_blank"
                rel="noopener noreferrer"
                className="block group a11y-focus"
              >
                <span className="block relative overflow-hidden">
                  LinkedIn{" "}
                  <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                    <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                  </span>
                </span>
              </a>
              <a
                href="https://github.com/samirllama"
                target="_blank"
                rel="noopener noreferrer"
                className="block group a11y-focus"
              >
                <span className="block relative overflow-hidden">
                  Github{" "}
                  <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                    <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                  </span>
                </span>
              </a>
              <a href="samirllama@gmail.com" className="block group a11y-focus">
                <span className="block relative overflow-hidden">
                  Email{" "}
                  <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                    <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                  </span>
                </span>
              </a>
            </nav>
          </div>

          <div className="col-span-1 text-right flex justify-end">
            <button className="block group a11y-focus border-none outline-none focus:border-none focus:outline-none">
              <span className="block relative overflow-hidden">
                <span className="hidden lg:inline">Back To </span>Top
                <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                  <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                </span>
              </span>
            </button>
          </div>
        </div>
      </div>
      <div className="text-center">
        <span className="hidden lg:inline">
          &copy; <Timestamp /> Samir.Coder. All rights reserved.
        </span>
      </div>
    </footer>
  );
}


================================================================================
FILE: ui/header-title.tsx
================================================================================

const AnimatedTitle = () => {
  // Helper function to render a word
  const renderWord = (word: string) => (
    <div className="inline-block whitespace-nowrap">
      {word.split("").map((char, index) => (
        <div
          key={index} // Using index as key is acceptable here as the list is static
          className="inline-block opacity-100" // Tailwind for opacity: 1
          style={{ transform: "matrix(1, 0, 0, 1, 0, 0)" }} // Keeping complex transform as inline style
        >
          {char}
        </div>
      ))}
      {"\u00A0"} {/* Unicode for non-breaking space */}
    </div>
  );

  return (
    <h1 className="header-title opacity-100">
      {renderWord("Last")}
      {renderWord("art")}
      <br /> {/* JSX line break */}
      {renderWord("Projects")}
    </h1>
  );
};

export default AnimatedTitle;


================================================================================
FILE: ui/header.tsx
================================================================================

// components/ui/header.tsx

"use client"; // Needs client-side interactivity

import { useState } from "react";
import Link from "next/link";
import { Suspense } from "react";
import Logo from "./logo";
import MobileMenu from "./mobile-menu";
import DashboardButton from "../DashboardButton";
import ThemeToggle from "../ThemeToggle";
import { cn } from "@/lib/utils";

export default function HeaderMinimal() {
  return (
    <header
      className={cn(
        "fixed top-0 left-0 right-0 z-[100] transition-colors ease-[cubic-bezier([0.83,0,0.17,1])] duration-[500ms] delay-[50ms]",
        "selection:bg-[var(--color-accent)] selection:text-black",
        "bg-surface-page"
      )}
      data-testid="header-minimal"
    >
      <div className="px-4 lg:px-5">
        <div className="grid grid-cols-3 lg:grid-cols-4 text-xl leading-none lg:text-2xl lg:leading-none border-b border-b-mousse-terracota pt-4 pb-3 lg:pt-4 lg:pb-3 items-center">
          <div className="align-center text-2xl  font-cinzel-deco">
            Samir Lama
          </div>
          <div className="col-span-2 text-center hidden lg:flex justify-center items-center">
            <div className="relative flex overflow-hidden lg:max-w-[250px] xl:max-w-[300px] pb-[0.25rem]">
              <div className="marquee">
                <span className="mr-4">Software Engineer&nbsp;&nbsp;—</span>
                <span className="mr-4">Chicago Based&nbsp;&nbsp;—</span>
                <span className="mr-4">Web Developer&nbsp;&nbsp;—</span>

                <span className="mr-4">Software Engineer&nbsp;&nbsp;—</span>
                <span className="mr-4">Chicago Based&nbsp;&nbsp;—</span>
                <span className="mr-4">Web Developer&nbsp;&nbsp;—</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </header>
  );
}

export function HeaderWithScrollNav() {
  const [isOpen, setIsOpen] = useState(true);

  const toggleMenu = () => {
    setIsOpen(!isOpen);
  };

  return (
    <header
      className="bg-header border-b border-[var(--header-text)] text-[var(--header-text)] flex items-center py-3 relative"
      data-testid="header-bar-dropdown"
    >
      <div className="align-center text-2xl">Samir Lama</div>
      <div
        className="hamburger flex flex-col justify-center items-center cursor-pointer absolute top-[100%] left-1/2 transform -translate-x-1/2"
        onClick={toggleMenu}
      >
        <div className="w-8 h-0.5 bg-[var(--header-text)] mb-1"></div>
        <div className="w-8 h-0.5 bg-[var(--header-text)] mb-1"></div>
        <div className="w-8 h-0.5 bg-[var(--header-text)]"></div>
      </div>
      <nav
        className={`menu absolute top-full left-0 w-full bg-header transform ${
          isOpen ? "translate-y-0" : "-translate-y-full"
        } z-10`}
      >
        <ul className="list-none p-4 m-0">
          <li className="mb-2">
            <a
              href="#"
              className="text-[var(--header-text)] no-underline hover:underline"
            >
              Home
            </a>
          </li>
          <li className="mb-2">
            <a
              href="#"
              className="text-[var(--header-text)] no-underline hover:underline"
            >
              About
            </a>
          </li>
          <li className="mb-2">
            <a
              href="#"
              className="text-[var(--header-text)] no-underline hover:underline"
            >
              Services
            </a>
          </li>
          <li className="mb-2">
            <a
              href="#"
              className="text-[var(--header-text)] no-underline hover:underline"
            >
              Contact
            </a>
          </li>
        </ul>
      </nav>
    </header>
  );
}

// Define links centrally
const NAV_LINKS = [
  { href: "/about", label: "About" },
  { href: "/playbook", label: "Playbook" },
];

export function Header_() {
  return (
    <header
      className={cn(
        "sticky top-0 z-50 w-full", // Sticky positioning
        "border-b border-[rgb(var(--border-subtle-rgb))]", // Subtle border using theme variable
        "bg-[rgb(var(--header-bg-rgb))]/95 backdrop-blur-sm" // Background with transparency + blur
      )}
    >
      <div className="max-w-6xl mx-auto px-4 sm:px-6">
        {/* Content container */}
        <div className="flex items-center justify-between h-16">
          {/* Height and flex layout */}
          {/* Site branding with my name as Logo */}
          <div className="flex-shrink-0 mr-4">
            <Logo />
          </div>
          {/* Desktop navigation */}
          <nav className="hidden md:flex md:grow">
            <ul className="flex grow justify-start flex-wrap items-center gap-x-6 lg:gap-x-8">
              {/* Use gap for spacing */}
              {NAV_LINKS.map((link) => (
                <li key={link.label}>
                  <Link
                    href={link.href}
                    className="text-sm font-medium text-gray-600 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white transition duration-150 ease-in-out"
                  >
                    {link.label}
                  </Link>
                </li>
              ))}
            </ul>
          </nav>
          {/* Right side controls */}
          <div className="flex items-center gap-x-2 sm:gap-x-4">
            <ThemeToggle />
            {/* Auth Buttons / Links */}
            <div className="hidden sm:flex items-center gap-x-2">
              <Suspense fallback={<div>Loading...</div>}>
                {/* Keep suspense */}
                <DashboardButton />
              </Suspense>
            </div>
            {/* Mobile menu button */}
            <div className="md:hidden">
              <MobileMenu />
            </div>
          </div>
        </div>
      </div>
    </header>
  );
}


================================================================================
FILE: ui/logo.tsx
================================================================================

import Link from "next/link"
import Image from "next/image"
import LogoImg from "@/public/logo.svg"

export default function Logo() {
  return (
    <Link className="inline-flex" href="/" aria-label="ai.com">
      <Image
        className="max-w-none"
        src={LogoImg}
        width={38}
        height={38}
        priority
        alt="logo"
      />
    </Link>
  )
}


================================================================================
FILE: ui/mobile-menu.tsx
================================================================================

"use client";

import { useState, useRef, useEffect } from "react";
import Link from "next/link";
import { cn } from "@/lib/utils";

const LINKS = [
  { href: "/", label: "Home" },
  { href: "/about", label: "About" },
  { href: "/notes", label: "Notes" },
  { href: "/playbook", label: "Playbook" },
  { href: "/today-i-learned", label: "TIL" },
];

export default function MobileMenu() {
  const [mobileNavOpen, setMobileNavOpen] = useState<boolean>(false);
  const trigger = useRef<HTMLButtonElement>(null);
  const mobileNav = useRef<HTMLDivElement>(null);

  // close the mobile menu on click outside
  useEffect(() => {
    const clickHandler = ({ target }: { target: EventTarget | null }): void => {
      if (!mobileNav.current || !trigger.current) return;
      if (
        !mobileNavOpen ||
        mobileNav.current.contains(target as Node) ||
        trigger.current.contains(target as Node)
      )
        return;
      setMobileNavOpen(false);
    };
    document.addEventListener("click", clickHandler);
    return () => document.removeEventListener("click", clickHandler);
  });

  // close the mobile menu if the esc key is pressed
  useEffect(() => {
    const keyHandler = ({ keyCode }: { keyCode: number }): void => {
      if (!mobileNavOpen || keyCode !== 27) return;
      setMobileNavOpen(false);
    };
    document.addEventListener("keydown", keyHandler);
    return () => document.removeEventListener("keydown", keyHandler);
  });

  return (
    <div className="md:hidden flex items-center ml-4">
      {/* Hamburger button */}
      <button
        ref={trigger}
        className={cn(
          "hamburger", // Keep base class if needed for JS/CSS targeting
          mobileNavOpen && "active"
        )}
        type="button"
        aria-controls="mobile-nav"
        aria-expanded={mobileNavOpen}
        onClick={() => setMobileNavOpen(!mobileNavOpen)}
      >
        <span className="sr-only">Menu</span>
        <svg
          className="w-5 h-5 fill-current text-slate-300 hover:text-white transition duration-150 ease-in-out"
          viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg"
        >
          <rect y="2" width="20" height="2" rx="1" />
          <rect y="9" width="20" height="2" rx="1" />
          <rect y="16" width="20" height="2" rx="1" />
        </svg>
      </button>

      {/*Mobile navigation */}
      <nav
        id="mobile-nav"
        ref={mobileNav}
        className="absolute top-full z-20 left-0 w-full px-4 sm:px-6 overflow-hidden transition-all duration-300 ease-in-out"
        style={
          mobileNavOpen
            ? { maxHeight: mobileNav.current?.scrollHeight, opacity: 1 }
            : { maxHeight: 0, opacity: 0.8 }
        }
      >
        {/* Keep complex background/border for now, or simplify later */}
        <ul className="border border-transparent [background:linear-gradient(theme(colors.slate.900),_theme(colors.slate.900))_padding-box,_conic-gradient(theme(colors.slate.400),_theme(colors.slate.700)_25%,_theme(colors.slate.700)_75%,_theme(colors.slate.400)_100%)_border-box] rounded-lg px-4 py-1.5">
          {LINKS.map((link) => (
            <li key={link.label}>
              <Link
                className="flex font-medium text-sm text-slate-300 hover:text-white py-1.5"
                href={link.href}
                onClick={() => setMobileNavOpen(false)}
              >
                {link.label}
              </Link>
            </li>
          ))}
        </ul>
      </nav>
    </div>
  );
}


================================================================================
FILE: ui/welcome-layout.tsx
================================================================================

import Link from "next/link";
import type { Route } from "next";

const NAV_ITEMS = ["Tag", "View", "Behavior"] as const;

export default function WelcomeLayout() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-custom-peach via-[#fcf4f1] to-custom-peach">
      <header className="flex items-center justify-between px-4 py-4 md:px-8 md:py-6">
        <h1 className="text-2xl font-medium text-gray-700">Welcome Home</h1>

        <nav className="flex space-x-4 md:space-x-6">
          {NAV_ITEMS.map((item) => (
            <Link
              key={item}
              href={`/${item.toLowerCase()}` as Route}
              role="navigation"
              aria-label={`Navigate to ${item}`}
              className="text-gray-600 hover:text-gray-900 transition-colors duration-200 text-lg focus:outline-none focus:ring-2 focus:ring-primary-500"
            >
              {item}
            </Link>
          ))}
        </nav>
      </header>

      <main>{/* Page Content */}</main>
    </div>
  );
}
/*

1. Add subtle gradient:
<div className="min-h-screen bg-gradient-to-br from-custom-peach via-[#fcf4f1] to-custom-peach">

2. To use the lighting effect:

<div className="relative bg-custom-peach overflow-hidden">
  <div className="absolute inset-0 bg-lighting" />
  [Content here]
</div>

? 1. Gradient Background Version: <div className="min-h-screen bg-gradient-to-br from-custom-peach via-[#fcf4f1] to-custom-peach">

This version directly applies the background gradient to the main container. No special positioning is needed because we're only dealing with a simple background gradient.

? 2. Lighting Effect Version: <div className="relative bg-custom-peach overflow-hidden">

This version needs three key properties:
> relative: Creates positioning context for the absolute pseudo-element
> overflow-hidden: Clips the lighting effect at container boundaries
> Solid background (bg-custom-peach): Serves as base color for the lighting effect to overlay

Why they can't be directly combined:

The gradient background and lighting effect both use background properties that would conflict if applied to the same element

The lighting effect requires a positioned parent to contain the absolute pseudo-element

overflow-hidden is critical to prevent the lighting effect from leaking outside the container

*Solution: if we want both gradient AND lighting:

<div className="relative min-h-screen bg-gradient-to-br from-custom-peach via-[#fcf4f1] to-custom-peach overflow-hidden">
  <div className="absolute inset-0 bg-lighting" />
    [Content here]
  </div>

  Here we:
  1. Keep the gradient on the main container
  2. Add relative and overflow-hidden
  3. Place the lighting effect as a child absolute div

  Key Takeaways:

  1. Use the first structure for pure gradient backgrounds
  2. Use the second structure when implementing overlay effects (like lighting)
  3. Combine both approaches when needing gradient + overlay effects
  4. The positioning context (relative) and containment (overflow-hidden) are essential for proper effect containment

*/

