// mdx-components.tsx
import type { MDXComponents } from "mdx/types";
import type { ComponentPropsWithoutRef } from "react";
import styles from './app/blog/blog.module.css';

export function useMDXComponents(components: MDXComponents): MDXComponents {
  return {
    // Pass through all default components first
    ...components,

    // Custom Component Overrides ---

    // Add custom heading components
    h2: ({ children, ...props }: ComponentPropsWithoutRef<"h2">) => (
      <h2 className={styles.gradientHeading} {...props}>
        {children}
      </h2>
    ),

    h3: ({ children, ...props }: ComponentPropsWithoutRef<"h3">) => (
      <h3 className={styles.gradientSubheading} {...props}>
        {children}
      </h3>
    ),

    // Override the default 'a' (link) element - STILL VALID & USEFUL
    a: ({ children, href, ...props }: ComponentPropsWithoutRef<"a">) => {
      const isExternal =
        href && (href.startsWith("http") || href.startsWith("//"));
      if (isExternal) {
        return (
          <a
            href={href}
            target="_blank"
            rel="noopener noreferrer"
            className="prose-a prose-a-external" // Use classes defined in global.css
            {...props}
          >
            {children}
          </a>
        );
      }
      return (
        <a href={href} className="prose-a prose-a-internal" {...props}>
          {" "}
          {/* Use classes defined in global.css */}
          {children}
        </a>
      );
    },

    hr: (props: ComponentPropsWithoutRef<"hr">) => (
      <hr className={styles.neonHr} {...props} />
    ),

    // NOTE: Overriding 'pre' or 'code' is generally NOT needed now
    // because rehype-pretty-code handles their rendering.
    // Styling for code blocks should be done via CSS targeting the
    // elements generated by rehype-pretty-code (e.g., figure[data-rehype-pretty-code-figure] > pre)

    // You can still override other elements like ul, blockquote etc. if needed
    // ul: ({ children, ...props }) => <ul className="my-custom-list" {...props}>{children}</ul>,
  };
}
