Directory Tree:
.
├── .gitignore
├── README.md
├── app
│   ├── (auth)
│   │   ├── layout.tsx
│   │   ├── signin
│   │   │   └── page.tsx
│   │   └── signup
│   │       └── page.tsx
│   ├── (default)
│   │   ├── layout.tsx
│   │   └── page.tsx
│   ├── actions
│   │   └── auth.ts
│   ├── layout.tsx
│   └── styles
│       ├── animations.css
│       ├── globals.css
│       ├── mdx.css
│       ├── theme.css
│       └── utility-patterns.css
├── components
│   ├── DashboardButton.tsx
│   ├── Glitchy.tsx
│   ├── Hero.tsx
│   ├── HeroSection.tsx
│   ├── ScrollSlide.tsx
│   ├── ThemeToggle.tsx
│   ├── Timestamp.tsx
│   ├── TypingEffect.tsx
│   ├── animate.tsx
│   ├── flip-text.tsx
│   ├── highlighter.tsx
│   ├── hooks
│   │   └── mouse-position.ts
│   ├── project-stack.tsx
│   ├── slider
│   │   ├── SlideColumn.tsx
│   │   ├── SlideSection.tsx
│   │   └── slideData.ts
│   └── ui
│       ├── Button.tsx
│       ├── PrimaryButton.tsx
│       ├── footer.tsx
│       ├── header.tsx
│       ├── logo.tsx
│       ├── mobile-menu.tsx
│       ├── swipe-header.tsx
│       └── ui.module.css
├── db
│   ├── index.ts
│   └── schema.ts
├── eslint.config.mjs
├── mdx-components.tsx
├── next.config.ts
├── package.json
├── postcss.config.mjs
├── tailwind.config.ts
└── tsconfig.json


================================================================================
FILE: .gitignore
================================================================================

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# notes
notes*


================================================================================
FILE: README.md
================================================================================

# Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

## Analysis of Each Layer and Its Role

1. `<section className="relative min-h-screen">` (Layer 0 - Positioning Context):
   Purpose: This is the main container for the entire Hero section.
   relative: Crucially, this establishes the positioning context for all the absolutely positioned elements within it (Particles, Illustration). Without this, they would be positioned relative to the viewport or another ancestor.
   min-h-screen: Ensures the section takes up at least the full height of the viewport, providing vertical space for the background elements to fill, even if the text content itself is short.

2. `<Particles className="absolute inset-0 -z-10" quantity={40} />` (Layer 1 - Dynamic Background):
   Purpose: Provides a dynamic, subtly moving background effect that adds texture, depth, and a "techy" or "spacey" feel. It reacts slightly to mouse movement.
   absolute inset-0: Stretches the particle canvas container to fill the bounds of the parent `<section>`. Because the section has min-h-screen, the particles cover at least the full viewport area behind the content.
   -z-10: Places this layer behind the main content (z-10) and also potentially behind other background elements if they have a higher negative z-index (though currently, the glow is also -z-10).
   `quantity={40}`: Controls the density of the particles.

3. `<div containing <Image src={Illustration} ... />` (Layer 2 - Static Glow/Shape):
   Purpose: This layer adds a static visual element, specifically a soft glow or shape emanating from the bottom center. Given the filename glow-bottom.svg, its primary role is likely to create a soft, ambient light effect anchoring the bottom of the hero section, possibly highlighting the area where content might transition out or where CTAs sit. It adds visual interest and depth without the constant motion of the particles.
   `absolute bottom-0 left-1/2 transform -translate-x-1/2`: Precisely positions the container of the image at the bottom center of the parent `<section>`.
   pointer-events-none: Ensures this visual layer doesn't interfere with mouse interactions (like clicking buttons that might overlap it).
   -z-10: Places it on the same visual layer as the particles (or potentially slightly above/below depending on browser rendering order for same z-index). It sits behind the main content.
   Image component: Renders the actual SVG (@/public/glow-bottom.svg). max-w-none prevents Tailwind's default max-width constraints from shrinking the SVG. The large width={2146} suggests the SVG is designed to be wide and potentially extend beyond the main content area horizontally, creating a broad glow effect.

4. `<div className="relative z-10 max-w-6xl mx-auto px-4 sm:px-6">`: (Layer 3 - Content Area)
   Purpose: This container holds the actual visible content (logo, headings, typing effect, buttons).
   max-w-6xl mx-auto px-4 sm:px-6: Centers the content horizontally and limits its maximum width for readability, creating margins on wider screens.
   relative z-10: Ensures this content block sits on top of the background layers (Particles and Illustration which have z-index: -10).

### The Combined UI Experience

- The layers work together to create a deep, visually engaging, and modern hero section:
- The dark base (from the body style) sets the mood.
- The Particles provide a subtle, dynamic, and interactive background texture filling the screen height.
- The Glow Illustration adds a static, focused light source or shape at the bottom, grounding the design and adding visual depth without competing directly with the particles.
- The Content sits clearly on top, centered and well-padded, ensuring readability against the layered background effects.
- The AOS animations (applied to content elements) further enhance the dynamic feel as the user scrolls or the page loads.
- This multi-layered approach creates a sophisticated visual hierarchy common in modern web design, especially for tech-focused sites, balancing dynamic elements with static visuals and clear content presentation.

--

# Project Analysis: Samir.Codes (Next.js 15)

This document provides an analysis of the `samir.codes` project codebase, focusing on its architecture, technologies, configuration, and key features.

## 1. High-Level Summary

- **Core Technologies:** Next.js 15 (Canary), React 19, TypeScript, Tailwind CSS 4, pnpm.
- **Architecture:** Utilizes the Next.js App Router for routing and layout management. Employs a mix of Server Components and Client Components. Server Actions are used for backend logic like authentication.
- **Styling:** Primarily uses Tailwind CSS 4, leveraging its utility classes. Integrates CSS variables defined in `app/styles/theme.css` for theming (light/dark modes via `next-themes`). CSS Modules (`*.module.css`) are used for some component-specific styles. Global styles and animations are defined in `app/styles/`.
- **Content:** Features standard pages (Home, About), a blog/posts section, an "Engineering Playbook" section leveraging MDX with custom components and syntax highlighting (`rehype-pretty-code`), and authentication flows (Sign In/Sign Up).
- **Database:** Integrates with a PostgreSQL database using Drizzle ORM (`db/schema.ts`, `db/index.ts`) for user and potentially other data (e.g., `issues` schema defined but not used in provided pages).
- **Key Features:**
  - App Router with Route Groups (`(auth)`, `(default)`) and nested layouts.
  - Server Actions for form handling and authentication (`app/actions/auth.ts`).
  - MDX support for content pages (`/playbook`) with custom component rendering (`mdx-components.tsx`) and code highlighting.
  - Client-side interactivity using React hooks (`useState`, `useEffect`, `useRef`) in various components (`Particles`, `FibonacciSpiral`, `TypingEffect`, `Highlighter`, etc.).
  - Theme switching (light/dark) via `next-themes`.
  - Visual effects using `aos` for scroll animations, `three`/`@react-three/fiber` for 3D elements (`RotatingNebula`), and custom canvas animations (`Particles`).
  - Component library (`Swiper`) used for carousels (`ProjectsCarousel`).

## 2. Project Structure & Routing (App Router)

- **Routing:** The project uses the Next.js App Router located in the `app/` directory.
- **Route Groups:**
  - `(auth)`: Groups authentication-related pages (`/signin`, `/signup`) under a specific layout (`app/(auth)/layout.tsx`) which includes a `RotatingNebula` background.
  - `(default)`: Groups the main application pages (`/`, `/about`, `/timeline`) under a standard layout (`app/(default)/layout.tsx`) that includes the main `Header` and `Footer`.
- **Main Routes & Pages:**
  - `/`: `app/(default)/page.tsx` (Home page, renders `Hero`, `Features`, `ProjectsCarousel`).
  - `/about`: `app/(default)/about/page.tsx` (Currently displays a "Changelog" title and uses `PostItem` - might be placeholder content).
  - `/timeline`: `app/(default)/timeline/page.tsx` (Renders `SlideSection` components for a vertical scrolling experience).
  - `/signin`: `app/(auth)/signin/page.tsx` (Sign-in form).
  - `/signup`: `app/(auth)/signup/page.tsx` (Placeholder sign-up page).
  - `/posts`: `app/posts/page.tsx` (Lists posts, likely reading from filesystem via `lib/posts`).
  - `/posts/fibonacci-spiral`: `app/posts/fibonacci-spiral/page.tsx` (Example post page rendering the `FibonacciSpiral` component).
  - `/playbook`: `app/playbook/page.tsx` (Index page for MDX articles, lists posts from `lib/posts`).
  - `/playbook/*`: MDX pages like `app/playbook/first_mdx/page.mdx` and `app/playbook/web-security/page.mdx`. These use `ArticleLayout` and custom MDX components.
- **Layouts:** Nested layouts are used effectively:
  - `app/layout.tsx`: Root layout setting up HTML structure, fonts (`Geist`), `ThemeProvider`, and base body styles.
  - `app/(default)/layout.tsx`: Adds `Header`, `Footer`, and AOS animation initialization (`Animate`).
  - `app/(auth)/layout.tsx`: Provides a distinct background (`RotatingNebula`) and padding for auth pages.
  - `app/playbook/layout.tsx`: Simple layout wrapper for playbook pages (main structure comes from `(default)` layout). MDX pages within use `ArticleLayout`.

## 3. Component Structure

- **UI Primitives (`components/ui`):** Reusable elements like `Button.tsx`, `Header.tsx`, `Footer.tsx`, `Logo.tsx`, `MobileMenu.tsx`. Styled with Tailwind and some CSS Modules (`ui.module.css`).
- **Layout Components (`components/layouts`):** `ArticleLayout.tsx` provides a two-column structure (main content + sidebar with ToC/metadata) specifically for MDX pages.
- **Feature Components:**
  - `Hero.tsx`: Main hero section with `Particles` and `TypingEffect`.
  - `feature/feature.tsx`: Displays a highlighted image section.
  - `projects/projects.tsx`: A carousel (`Swiper`) showcasing projects with `Particles` and `Highlighter` effects.
  - `fibonacci-spiral/FibonacciSpiral.tsx`: Interactive canvas animation (Client Component).
  - `RotatingNebula.tsx`: 3D sphere with texture using `@react-three/fiber` (Client Component).
  - `particles/Particles.tsx`: Animated canvas background reacting to mouse movement (Client Component).
  - `typing/TypingEffect.tsx`: Animates typing text (Client Component).
  - `slider/*`: Components (`SlideSection`, `SlideColumn`) for the `/timeline` page's vertical scroll effect.
  - `highlight/highlighter.tsx`: Creates a mouse-aware highlighting effect for child components.
- **Utility/Hooks:**
  - `hooks/mouse-position.ts`: Custom hook to track mouse coordinates.
  - `animate.tsx`: Initializes AOS library.
  - `ThemeToggle.tsx`: Button to switch between light/dark themes.
  - `Timestamp.tsx`: Displays the current year (Client Component).
- **Interaction:** Components interact primarily through props. Server Actions handle form submissions (`auth.ts`). Client components manage their own state or use shared context (`next-themes`).

## 4. Key Configurations

- **`next.config.ts`:**

  - **MDX:** Configured using `@next/mdx` with `remark-gfm` and `rehype-pretty-code` (theme: `github-dark`, custom line/word highlighting hooks).
  - **Page Extensions:** Includes `.md` and `.mdx` allowing these files to be treated as pages.
  - **Experimental:** `typedRoutes: true` enabled for type-safe linking. `dynamicIO: true` is also present.
  - **Build Settings:** `typescript.ignoreBuildErrors: true` and `eslint.ignoreDuringBuilds: true` are enabled (Note: Should ideally be `false` for production builds).
  - **React Strict Mode:** Enabled (`reactStrictMode: true`).

- **`tsconfig.json`:**

  - **Strict Mode:** `strict: true` enforces strong type checking.
  - **Module Resolution:** Uses `moduleResolution: "bundler"`, the recommended setting for modern Node.js/TypeScript projects with bundlers like Next.js.
  - **Path Aliases:** Configured with `baseUrl: "."` and `paths: { "@/*": ["./*"] }`, allowing imports like `@/components/...`.
  - **Target/Lib:** Modern settings (`ES2017`, `esnext`, `dom`).
  - **JSX:** `jsx: "preserve"` as required by Next.js.

- **`tailwind.config.ts`:**

  - **Tailwind Version:** Uses Tailwind CSS v4 (`@tailwindcss/postcss`).
  - **Dark Mode:** Configured with `darkMode: 'class'`, managed by `next-themes`.
  - **Content:** Correctly configured to scan `app` and `components` directories.
  - **Theme Extensions:**
    - **Colors:** Extends the theme to use CSS variables defined in `app/styles/theme.css` (e.g., `primary: 'rgb(var(--primary) / <alpha-value>)'`). This allows the theme (light/dark) defined in CSS to drive Tailwind colors. Includes semantic names like `primary`, `secondary`, `accent`, `background`, `foreground`, and mappings for `gray` and `dark` mode specifics.
    - **Box Shadow:** Adds a custom `clay-dark` shadow.
    - **Typography:** Uses `clamp()` for responsive font sizes.
  - **Plugins:** Integrates `@tailwindcss/typography` (configured for `.mdx-prose` class), `@tailwindcss/forms`, `@tailwindcss/aspect-ratio`, `@tailwindcss/container-queries`, and `tailwindcss-animate`.

- **`postcss.config.mjs`:**

  - Includes `@tailwindcss/postcss` (required for Tailwind 4) and `autoprefixer`.

- **Styling Files (`app/styles/`):**
  - `globals.css`: Imports Tailwind layers and custom CSS files in the correct order. Defines base HTML/body styles using CSS variables.
  - `theme.css`: Central definition for CSS variables (colors, spacing, typography) for both light (`:root`) and dark (`.dark`) themes. Uses `@layer base` and `@layer components`.
  - `utility-patterns.css`: Defines custom utility classes (e.g., `.btn`, `.form-input`) using CSS variables.
  - `animations.css`: Defines keyframes (`@keyframes`) and animation utility classes (`.animate-*`).
  - `mdx.css`: Provides specific styling for elements within the `.prose` / `.mdx-prose` class, often targeting elements generated by Markdown/MDX (like links, code blocks styled by `rehype-pretty-code`).

## 5. Key Features & Patterns

- **Server Components:** Most pages and layouts are Server Components, allowing server-side data fetching (e.g., `getAllPostsMeta` in `playbook/page.tsx`) and reducing client-side JavaScript.
- **Client Components:** Used for interactive elements requiring hooks (`useState`, `useEffect`, event listeners) like `Particles`, `RotatingNebula`, `FibonacciSpiral`, `TypingEffect`, `ThemeToggle`, `ProjectsCarousel`, `Highlighter`, `MobileMenu`. Marked with `"use client"`.
- **Server Actions:** Used for authentication (`app/actions/auth.ts`). Actions run on the server, receive form data, perform validation (with `zod`), interact with the database/session logic (`lib/session`, `lib/dal`), and handle redirects.
- **Data Fetching:**
  - **Server-Side:** Primarily through Server Actions for mutations and inferred filesystem access (`lib/posts`) for static content metadata within Server Components.
  - **Database:** Drizzle ORM is configured (`db/index.ts`, `db/schema.ts`) for database interactions (though direct usage isn't shown in the provided page/component files beyond the auth actions).
- **State Management:**
  - **Local Component State:** Managed using React hooks (`useState`, `useRef`) within Client Components.
  - **Theme State:** Handled globally by `next-themes`.
- **Styling Strategy:** A hybrid approach combining:
  - Tailwind utility classes for general layout and styling.
  - CSS variables (`app/styles/theme.css`) for centralized theme definition (colors, spacing) used by both Tailwind (`tailwind.config.ts`) and custom CSS.
  - CSS Modules (`*.module.css`) for component-scoped styles where needed (e.g., `projects.module.css`, `typing.module.css`).
  - Global CSS (`app/styles/globals.css`, `animations.css`, `mdx.css`) for base styles, animations, and MDX prose styling.
  - `cn` utility (`clsx` + `tailwind-merge`) for conditional class application.
- **MDX Integration:** Leverages `@next/mdx` for rendering `.mdx` files as pages. Uses frontmatter for metadata, `rehype-pretty-code` for syntax highlighting, and `mdx-components.tsx` to map Markdown elements to custom styled React components.
- **TypeScript Usage:** Project uses TypeScript throughout. Custom types are defined in `db/schema.ts` (e.g., `Issue`, `User`) using Drizzle's `InferSelectModel`. Zod schemas (`SignInSchema`, `SignUpSchema` in `auth.ts`) define data shapes and validation rules. Interfaces are used for component props (e.g., `ArticleLayoutProps`, `ParticlesProps`).

## 6. Potential Issues & Areas for Improvement

- **Build Configuration:** `ignoreBuildErrors: true` for TypeScript and ESLint in `next.config.ts` should be set to `false` and any errors resolved before deploying to production.
- **Styling Consistency:** The project uses multiple styling methods (Tailwind, CSS Modules, Global CSS, CSS Variables). While functional, ensuring consistency and clear boundaries for when to use each method can improve maintainability.
- **Testing:** `vitest` is listed as a dev dependency, but no actual tests are included in the provided files. Adding unit, integration, and potentially end-to-end tests would improve code quality and reliability.
- **Error Handling:** Server Action error handling is basic. Consider more specific error handling and user feedback mechanisms. Error boundaries in React could also be beneficial.
- **Accessibility (A11y):** While some ARIA attributes are used, a thorough accessibility audit would be recommended to ensure compliance and usability for all users.
- **Performance:** Components like `Particles` and `RotatingNebula` can be resource-intensive. Profiling and optimization might be necessary, especially on lower-end devices. Ensure Next.js Image optimization is used correctly for all images.
- **Database Schema:** The `issues` table is defined in `db/schema.ts` but doesn't appear to be used in the provided application code. It might be leftover from a previous feature or intended for future use.
- **Code Duplication:** Some styling patterns (e.g., HighlighterItem vs HighlighterItem02) might be refactorable into more reusable components or utilities.


================================================================================
FILE: app/(auth)/layout.tsx
================================================================================

// (auth)/layout.tsx

import RotatingNebula from "@/components/RotatingNebula";

export default function AuthLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <main className="grow">
      {/* Nebula Background Container (Fixed Fullscreen) */}
      {/* <div
        className="fixed inset-0 -z-20 overflow-hidden pointer-events-none opacity-50 md:opacity-60"
        aria-hidden="true"
      > */}
      {/* Content Area */}
      <section>
        <div className="relative z-10 max-w-6xl mx-auto px-4 sm:px-6">
          <div
            className="absolute inset-0 -z-10 overflow-hidden pointer-events-none -ml-28 -mr-28"
            aria-hidden="true"
          >
            <RotatingNebula
              textureUrl="/textures/nebula-blue-purple.jpg"
              rotationSpeed={0.0008}
              // No className needed here anymore for basic sizing
              // className="w-full h-full" // <--- REMOVED
            />
          </div>
          <div className="pt-32 pb-12 md:pt-40 md:pb-20">{children}</div>
        </div>
      </section>
    </main>
  );
}


================================================================================
FILE: app/(auth)/signin/page.tsx
================================================================================


import Link from 'next/link';
import Image from "next/image"
import AuthLogo from '@/public/logo.svg';
import { cn } from '@/lib/utils';

export const metadata = {
  title: 'Sign In - Samir.Codes', // Updated title
  description: 'Sign in to your account',
};

export default function SignIn() {
  return (
    <>
      {/* Page header (Keep as is for now) */}
      <div className="max-w-3xl mx-auto text-center pb-12">
      <Image
        className="max-w-none"
        src={AuthLogo}
        width={38}
        height={38}
        priority
        alt="logo"
      />
        <h1 className="h2 bg-clip-text text-transparent bg-gradient-to-r from-slate-200/60 via-slate-200 to-slate-200/60">
          Sign in to your account
        </h1>
      </div>

      {/* --- Form Container: Apply Claymorphism --- */}
      <div
        className={
          // Base layout & sizing
          "max-w-1/2 mx-auto " +
          // Claymorphism styles
          "bg-slate-800/80 " + // Slightly transparent base to interact with nebula? Or solid bg-slate-800
          "rounded-3xl " +     // Generous rounding
          "p-6 sm:p-8 " +      // Padding inside the container
          "shadow-clay-dark-soft " + // Apply the custom shadow
          "backdrop-blur-sm"     // Optional: Add blur if using transparent bg
        }
      >
        {/* Form content goes here - Keep existing form for now */}
        <form>
          <div className="space-y-4">
            <div>
              <label className="block text-sm text-slate-300 font-medium mb-1" htmlFor="email">Email</label>
              {/* Input styling will be addressed next */}
              <input id="email" className="form-input w-full" type="email" required />
            </div>
            <div>
              <div className="flex justify-between">
                <label className="block text-sm text-slate-300 font-medium mb-1" htmlFor="password">Password</label>
                <Link className="text-sm font-medium text-primary hover:text-purple-400 transition duration-150 ease-in-out ml-2" href="/reset-password">Forgot?</Link>
              </div>
              {/* Input styling will be addressed next */}
              <input id="password" className="form-input w-full" type="password" autoComplete="on" required />
            </div>
          </div>
          <div className="mt-6">
            {/* Button styling will be addressed next */}
            <button className="btn text-sm text-white bg-primary hover:bg-purple-700 w-full shadow-sm group">
              Sign In <span className="tracking-normal text-purple-300 group-hover:translate-x-0.5 transition-transform duration-150 ease-in-out ml-1">-></span>
            </button>
          </div>
        </form>

        {/* Footer links inside the container */}
        <div className="text-center mt-6"> {/* Increased margin slightly */}
          <div className="text-sm text-slate-400">
            Don't have an account? <Link className="font-medium text-primary hover:text-purple-400 transition duration-150 ease-in-out" href="/signup">Sign up</Link>
          </div>
        </div>

        {/* Divider (Keep as is for now) */}
        <div className="flex items-center my-6">
          <div className="border-t border-slate-700 grow mr-3" aria-hidden="true" /> {/* Adjusted color slightly */}
          <div className="text-sm text-slate-500 italic">or</div>
          <div className="border-t border-slate-700 grow ml-3" aria-hidden="true" /> {/* Adjusted color slightly */}
        </div>

   {/* Social login */}
   <div className="flex space-x-3">
          {/* Twitter Button */}
          <button
            className={cn( "btn-sm",  "w-full h-9",               "relative group","border",
              // Use CSS Variables for colors in the gradient border
              "border-transparent", // Make base border transparent
              "bg-slate-900", // Set the background color directly
              "bg-clip-padding", // Clip background to padding box (padding-box keyword)
              // Apply the conic gradient border using background-image on the border itself
              // This requires careful layering or pseudo-elements usually.
              // A simpler approach is a pseudo-element overlay:
              "before:absolute before:inset-[-1px] before:-z-10", // Position pseudo-element slightly outside, behind
              "before:rounded-full", // Match button rounding
              "before:bg-[conic-gradient(var(--color-slate-400),var(--color-slate-700)_25%,var(--color-slate-700)_75%,var(--color-slate-400)_100%)]", // Conic gradient on pseudo-element
              // Original hover/text styles
              "text-slate-300 hover:text-white transition duration-150 ease-in-out"
              // Removed the complex arbitrary [background:...]
              // Removed the second before pseudo-element for the overlay as bg-slate-900 handles it
            )}
          >
            <span className="relative z-10"> {/* Ensure icon is above background */}
              <span className="sr-only">Continue with Twitter</span>
              {/* Twitter SVG */}
              <svg className="fill-current" xmlns="http://www.w3.org/2000/svg" width="14" height="12">
                 <path d="m4.34 0 2.995 3.836L10.801 0h2.103L8.311 5.084 13.714 12H9.482L6.169 7.806 2.375 12H.271l4.915-5.436L0 0h4.34Zm-.635 1.155H2.457l7.607 9.627h1.165L3.705 1.155Z" />
              </svg>
            </span>
          </button>

          {/* GitHub Button - Apply the same refactored classes */}
          <button
             className={cn(
              "btn-sm",
              "w-full h-9",
              "relative group",
              "border border-transparent",
              "bg-slate-900 bg-clip-padding",
              "before:absolute before:inset-[-1px] before:-z-10",
              "before:rounded-full",
              "before:bg-[conic-gradient(var(--color-slate-400),var(--color-slate-700)_25%,var(--color-slate-700)_75%,var(--color-slate-400)_100%)]",
              "text-slate-300 hover:text-white transition duration-150 ease-in-out"
            )}
          >
            <span className="relative z-10">
              <span className="sr-only">Continue with GitHub</span>
              {/* GitHub SVG */}
              <svg className="fill-current" xmlns="http://www.w3.org/2000/svg" width="16" height="15">
                 <path d="M7.488 0C3.37 0 0 3.37 0 7.488c0 3.276 2.153 6.084 5.148 7.113.374.094.468-.187.468-.374v-1.31c-2.06.467-2.527-.936-2.527-.936-.375-.843-.843-1.124-.843-1.124-.655-.468.094-.468.094-.468.749.094 1.123.75 1.123.75.655 1.216 1.778.842 2.153.654.093-.468.28-.842.468-1.03-1.685-.186-3.37-.842-3.37-3.743 0-.843.281-1.498.75-1.966-.094-.187-.375-.936.093-1.965 0 0 .655-.187 2.059.749a6.035 6.035 0 0 1 1.872-.281c.655 0 1.31.093 1.872.28 1.404-.935 2.059-.748 2.059-.748.374 1.03.187 1.778.094 1.965.468.562.748 1.217.748 1.966 0 2.901-1.778 3.463-3.463 3.65.281.375.562.843.562 1.498v2.059c0 .187.093.468.561.374 2.996-1.03 5.148-3.837 5.148-7.113C14.976 3.37 11.606 0 7.488 0Z" />
               </svg>
            </span>
          </button>
        </div>
      </div>
      {/* --- End Form Container --- */}
    </>
  );
}


================================================================================
FILE: app/(auth)/signup/page.tsx
================================================================================

const Signup = () => {
    return 'signup'
  }

  export default Signup


================================================================================
FILE: app/(default)/layout.tsx
================================================================================

// app/(default)/layout.tsx
import "aos/dist/aos.css";
import Header from "@/components/ui/header";
import Footer from "@/components/ui/footer";
import Animate from "@/components/animate";

export default function DefaultLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      <Animate />
      <Header />

      <main className="grow" style={{ opacity: 1 }}>
        <div className="pt-[65px] lg:pt-[70px]">{children}</div>
      </main>
      <Footer />
    </>
  );
}


================================================================================
FILE: app/(default)/page.tsx
================================================================================

// app/page.tsx

import ProjectStack from "@/components/project-stack";
import HeroSection from "../../components/HeroSection";
import FlipText from "../../components/flip-text";

const myProjects = [
  { id: 1, name: "British Petroleum", link: "/projects/wells-fargo" },
  { id: 2, name: "Wells Fargo", link: "/projects/wells-fargo" },
  { id: 3, name: "Dealer Inspire", link: "/projects/dealer-inspire" },
  { id: 4, name: "Expedia", link: "/projects/expedia" },
  { id: 5, name: "Domino's", link: "/projects/dominos" },
  // ... more projects to add
];

export default function Home() {
  return (
    <article>
      <HeroSection />
      <FlipText />
      <ProjectStack projects={myProjects} />

      {/* === Professional Summary Section === */}
      <section className="pb-[20vw] lg:pb-[12.5vw]">
        <h2 className="font-mono uppercase tracking-tight leading-[1] text-[10px] mb-5 pb-0 relative overflow-hidden">
          <span
            className="block"
            style={{ transform: "translateY(0%) translateZ(0px)" }}
          >
            Professional Summary
          </span>
        </h2>
        <ul className="bouncy-hover uppercase border-t border-white/30">
          <li className="block">
            <span className="border-b border-white/30 w-full py-2 lg:py-1 block lg:flex lg:items-end">
              <span className="leading-[1.275] block text-[clamp(18px,0.92rem+1.15vw,34px)] font-display tracking-tight mb-1 lg:mb-0 relative overflow-hidden">
                <span
                  className="block"
                  style={{ transform: "translateY(0%) translateZ(0px)" }}
                >
                  <span className="block ms-text-adjust">
                    British Petroleum
                  </span>
                </span>
              </span>

              <span className="ml-auto leading-[1.275] font-serif lg:font-display block text-xl lg:text-[clamp(15px,0.92rem+1.15vw,34px)] tracking-tight relative overflow-hidden">
                <span
                  className="block"
                  style={{ transform: "translateY(0%) translateZ(0px)" }}
                >
                  <span className="flex items-end">
                    <span className="block">
                      <span className="block ms-text-adjust">
                        2021 - Present
                      </span>
                    </span>
                    <span className="capitalize block font-serif italic text-[clamp(14px,0.7rem+0.65vw,25px)] tracking-normal leading-none pl-2 pr-1 translate-y-[-45%] md:translate-y-[-30%] lg:translate-y-[-32%]">
                      (Senior Software Engineer)
                    </span>
                  </span>
                </span>
              </span>
            </span>
          </li>
          <li className="block">
            <span className=" border-b border-white/30 w-full py-2 lg:py-1 block lg:flex lg:items-end">
              <span className="leading-[1.275] block text-[clamp(18px,0.92rem+1.15vw,34px)] font-display tracking-tight mb-1 lg:mb-0 relative overflow-hidden">
                <span
                  className="block"
                  style={{ transform: "translateY(0%) translateZ(0px)" }}
                >
                  <span className="block ms-text-adjust">Wells Fargo</span>
                </span>
              </span>

              <span className="ml-auto leading-[1.275] font-serif lg:font-display block text-xl lg:text-[clamp(15px,0.92rem+1.15vw,34px)] tracking-tight relative overflow-hidden">
                <span
                  className="block"
                  style={{ transform: "translateY(0%) translateZ(0px)" }}
                >
                  <span className="flex items-end">
                    <span className="block">
                      <span className="block ms-text-adjust">2020 - 2021</span>
                    </span>
                    <span className="capitalize block font-serif italic text-[clamp(14px,0.7rem+0.65vw,25px)] tracking-normal leading-none pl-2 pr-1 translate-y-[-45%] md:translate-y-[-30%] lg:translate-y-[-32%]">
                      (Senior Software Engineer)
                    </span>
                  </span>
                </span>
              </span>
            </span>
          </li>
          <li className="block">
            <span className=" border-b border-white/30 w-full py-2 lg:py-1 block lg:flex lg:items-end">
              <span className="leading-[1.275] block text-[clamp(18px,0.92rem+1.15vw,34px)] font-display tracking-tight mb-1 lg:mb-0 relative overflow-hidden">
                <span
                  className="block"
                  style={{ transform: "translateY(0%) translateZ(0px)" }}
                >
                  <span className="block ms-text-adjust">Dealer Inspire</span>
                </span>
              </span>

              <span className="ml-auto leading-[1.275] font-serif lg:font-display block text-xl lg:text-[clamp(15px,0.92rem+1.15vw,34px)] tracking-tight relative overflow-hidden">
                <span
                  className="block"
                  style={{ transform: "translateY(0%) translateZ(0px)" }}
                >
                  <span className="flex items-end">
                    <span className="block">
                      <span className="block ms-text-adjust">2019 - 2020</span>
                    </span>
                    <span className="capitalize block font-serif italic text-[clamp(14px,0.7rem+0.65vw,25px)] tracking-normal leading-none pl-2 pr-1 translate-y-[-45%] md:translate-y-[-30%] lg:translate-y-[-32%]">
                      (Software Engineer)
                    </span>
                  </span>
                </span>
              </span>
            </span>
          </li>
        </ul>
      </section>

      {/* === Tech Stack / Skills === */}
      <section
        className="grid grid-cols-12 pb-[20vw] lg:pb-[12.5vw]"
        id="tools"
      >
        <div className="col-span-12 lg:col-span-4 mb-2 lg:mb-0">
          <h2 className="font-mono uppercase tracking-tight leading-none text-[10px] mb-3 pb-0">
            Tools / Technologies
          </h2>
        </div>

        <div className="col-span-12 lg:col-span-7">
          <div className="max-w-[820px]">
            <h2 className="leading-[1] block text-[clamp(30px,0.92rem+2vw,45px)] font-display tracking-tight mb-12 uppercase">
              Tools
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2">
              <div className="mb-8 lg:mb-12 col-span-1">
                <span className="uppercase block font-mono  tracking-tight leading-none text-[10px] mb-3 pb-0">
                  Front-end Stack
                </span>

                {/* === List - Front end stack === */}
                <ul className="bouncy-hover">
                  <li className=" leading-[1.1] block text-2xl tracking-tight relative mb-[3px]">
                    <a
                      href="https://react.dev/"
                      target="_blank"
                      rel="noreferrer noopener"
                      className="relative group a11y-focus overflow-hidden inline-block"
                    >
                      React
                      <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                        <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                      </span>
                    </a>
                  </li>
                  <li className=" leading-[1.1] block text-2xl tracking-tight relative mb-[3px]">
                    <a
                      href="https://nextjs.org/"
                      target="_blank"
                      rel="noreferrer noopener"
                      className="relative group a11y-focus overflow-hidden inline-block"
                    >
                      NextJs
                      <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                        <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                      </span>
                    </a>
                  </li>
                  <li className=" leading-[1.1] block text-2xl tracking-tight relative mb-[3px]">
                    <a
                      href="https://tailwindcss.com/"
                      target="_blank"
                      rel="noreferrer noopener"
                      className="relative group a11y-focus overflow-hidden inline-block"
                    >
                      Tailwind
                      <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                        <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                      </span>
                    </a>
                  </li>
                  <li className=" leading-[1.1] block text-2xl tracking-tight relative mb-[3px]">
                    <a
                      href="https://www.framer.com/motion/"
                      target="_blank"
                      rel="noreferrer noopener"
                      className="relative group a11y-focus overflow-hidden inline-block"
                    >
                      <span className="block absolute bottom-0 left-0 w-full h-[1px] translate-y-[-1px] bg-white/50"></span>
                      Framer Motion
                      <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                        <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                      </span>
                    </a>
                  </li>
                  <li className=" leading-[1.1] block text-2xl tracking-tight relative mb-[3px]">
                    <a
                      href="https://lenis.studiofreight.com/"
                      target="_blank"
                      rel="noreferrer noopener"
                      className="relative group a11y-focus overflow-hidden inline-block"
                    >
                      <span className="block absolute bottom-0 left-0 w-full h-[1px] translate-y-[-1px] bg-white/50"></span>
                      Lenis Scroll
                      <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                        <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                      </span>
                    </a>
                  </li>
                  <li className=" leading-[1.1] block text-2xl tracking-tight relative mb-[3px]">
                    <a
                      href="https://lenis.studiofreight.com/"
                      target="_blank"
                      rel="noreferrer noopener"
                      // Add group class to the parent for targeting on hover
                      // Keep original classes and add text color
                      className="relative group a11y-focus overflow-hidden inline-block text-blue-600 hover:text-blue-800"
                    >
                      Lenis Scroll
                      {/*
    - absolute: Position it relative to the parent <a>.
    - bottom-0, left-0: Pin it to the bottom left corner of the parent.
    - w-full: Make it span the full width of the parent.
    - h-[3px]: Give it a small height for the underline thickness (adjust as needed).
    - scale-x-0: Initially scale it to zero width (hidden).
    - transform-origin-center: Make the scaling happen from the center.
    - transition-transform: Add a transition for smooth animation.
    - duration-300: Set the transition duration.
    - ease-out: Set the transition timing function.
    - group-hover:scale-x-100: On parent hover, scale it back to full width (visible).
    - style: Define the wave background using an SVG data URL.
             currentColor makes the wave color inherit the text color.
             backgroundRepeat: 'repeat-x' ensures the wave pattern tiles horizontally.
             backgroundSize: 'auto 100%' ensures the wave scales vertically to the span's height.
  */}
                      <span
                        className="absolute bottom-0 left-0 w-full h-[3px] transform scale-x-0 transform-origin-center transition-transform duration-300 ease-out group-hover:scale-x-100"
                        style={{
                          backgroundImage: `url("data:image/svg+xml,%3C svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 10' preserveAspectRatio='none'%3E%3Cpath d='M0,5 C25,10 75,0 100,5' stroke='currentColor' stroke-width='2' fill='none'/%3E%3C/svg%3E")`,
                          backgroundRepeat: "repeat-x",
                          backgroundSize: "auto 100%",
                        }}
                      ></span>
                    </a>
                  </li>
                </ul>
              </div>
              <div className="col-span-1">
                <span className="uppercase block font-mono  tracking-tight leading-none text-[10px] mb-3 pb-0">
                  Back-end Stack
                </span>

                {/* === List - Back-end Stack === */}
                <ul>
                  <li className=" leading-[1.1] block text-2xl tracking-tight relative mb-[3px]">
                    <a
                      href="https://www.sanity.io/"
                      target="_blank"
                      rel="noreferrer noopener"
                      className="relative group a11y-focus overflow-hidden inline-block"
                    >
                      <span className="block absolute bottom-0 left-0 w-full h-[1px] translate-y-[-1px] bg-white/50"></span>
                      Sanity CMS
                      <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                        <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                      </span>
                    </a>
                  </li>
                  <li className=" leading-[1.1] block text-2xl tracking-tight relative mb-[3px]">
                    <a
                      href="https://vercel.com/"
                      target="_blank"
                      rel="noreferrer noopener"
                      className="relative group a11y-focus overflow-hidden inline-block"
                    >
                      <span className="block absolute bottom-0 left-0 w-full h-[1px] translate-y-[-1px] bg-white/50"></span>
                      Vercel
                      <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                        <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                      </span>
                    </a>
                  </li>
                  <li className=" leading-[1.1] block text-2xl tracking-tight relative mb-[3px]">
                    <a
                      href="https://github.com/samuelgoddard/"
                      target="_blank"
                      rel="noreferrer noopener"
                      className="relative group a11y-focus overflow-hidden inline-block"
                    >
                      <span className="block absolute bottom-0 left-0 w-full h-[1px] translate-y-[-1px] bg-white/50"></span>
                      Github
                      <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                        <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                      </span>
                    </a>
                  </li>
                  <li className=" leading-[1.1] block text-2xl tracking-tight relative mb-[3px]">
                    <a
                      href="https://shopify.dev/docs/api/storefront"
                      target="_blank"
                      rel="noreferrer noopener"
                      className="relative group a11y-focus overflow-hidden inline-block"
                    >
                      <span className="block absolute bottom-0 left-0 w-full h-[1px] translate-y-[-1px] bg-white/50"></span>
                      Storefront API
                      <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                        <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                      </span>
                    </a>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </section>
    </article>
  );
}




================================================================================
FILE: app/actions/auth.ts
================================================================================

'use server'

import { z } from 'zod'
import {
  verifyPassword,
  createSession,
  createUser,
  deleteSession,
} from '@/lib/session'
import { getUserByEmail } from '@/lib/dal'
import { mockDelay } from '@/lib/utils'
import { redirect } from 'next/navigation'

// Define Zod schema for signin validation
const SignInSchema = z.object({
  email: z.string().min(1, 'Email is required').email('Invalid email format'),
  password: z.string().min(1, 'Password is required'),
})

// Define Zod schema for signup validation
const SignUpSchema = z
  .object({
    email: z.string().min(1, 'Email is required').email('Invalid email format'),
    password: z.string().min(6, 'Password must be at least 6 characters'),
    confirmPassword: z.string().min(1, 'Please confirm your password'),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ['confirmPassword'],
  })

export type SignInData = z.infer<typeof SignInSchema>
export type SignUpData = z.infer<typeof SignUpSchema>

export type ActionResponse = {
  success: boolean
  message: string
  errors?: Record<string, string[]>
  error?: string
}

export async function signIn(formData: FormData): Promise<ActionResponse> {
  try {
    // Add a small delay to simulate network latency
    await mockDelay(700)

    // Extract data from form
    const data = {
      email: formData.get('email') as string,
      password: formData.get('password') as string,
    }

    // Validate with Zod
    const validationResult = SignInSchema.safeParse(data)
    if (!validationResult.success) {
      return {
        success: false,
        message: 'Validation failed',
        errors: validationResult.error.flatten().fieldErrors,
      }
    }

    // Find user by email
    const user = await getUserByEmail(data.email)
    if (!user) {
      return {
        success: false,
        message: 'Invalid email or password',
        errors: {
          email: ['Invalid email or password'],
        },
      }
    }

    // Verify password
    const isPasswordValid = await verifyPassword(data.password, user.password)
    if (!isPasswordValid) {
      return {
        success: false,
        message: 'Invalid email or password',
        errors: {
          password: ['Invalid email or password'],
        },
      }
    }

    // Create session
    await createSession(user.id)

    return {
      success: true,
      message: 'Signed in successfully',
    }
  } catch (error) {
    console.error('Sign in error:', error)
    return {
      success: false,
      message: 'An error occurred while signing in',
      error: 'Failed to sign in',
    }
  }
}

export async function signUp(formData: FormData): Promise<ActionResponse> {
  try {
    // Add a small delay to simulate network latency
    await mockDelay(700)

    // Extract data from form
    const data = {
      email: formData.get('email') as string,
      password: formData.get('password') as string,
      confirmPassword: formData.get('confirmPassword') as string,
    }

    // Validate with Zod
    const validationResult = SignUpSchema.safeParse(data)
    if (!validationResult.success) {
      return {
        success: false,
        message: 'Validation failed',
        errors: validationResult.error.flatten().fieldErrors,
      }
    }

    // Check if user already exists
    const existingUser = await getUserByEmail(data.email)
    if (existingUser) {
      return {
        success: false,
        message: 'User with this email already exists',
        errors: {
          email: ['User with this email already exists'],
        },
      }
    }

    // Create new user
    const user = await createUser(data.email, data.password)
    if (!user) {
      return {
        success: false,
        message: 'Failed to create user',
        error: 'Failed to create user',
      }
    }

    // Create session for the newly registered user
    await createSession(user.id)

    return {
      success: true,
      message: 'Account created successfully',
    }
  } catch (error) {
    console.error('Sign up error:', error)
    return {
      success: false,
      message: 'An error occurred while creating your account',
      error: 'Failed to create account',
    }
  }
}

export async function signOut(): Promise<void> {
  try {
    await mockDelay(300)
    await deleteSession()
  } catch (error) {
    console.error('Sign out error:', error)
    throw new Error('Failed to sign out')
  } finally {
    redirect('/signin')
  }
}


================================================================================
FILE: app/layout.tsx
================================================================================

// app/layout.tsx
import { Cinzel, Cinzel_Decorative, Dancing_Script, Geist_Mono } from "next/font/google";
import { ThemeProvider } from "next-themes";
import type { Metadata } from "next";
import "./styles/globals.css";
import { cn } from "@/lib/utils";

export const metadata: Metadata = {
  title: "Samir Codes",
  description: "Personal website and portfolio",
};

const cinzel = Cinzel({
  weight: ["400", "700", "900"], // Choose the weights
  subsets: ["latin"],
  display: "swap",
  variable: "--font-cinzel",
});

const cinzelDecorative = Cinzel_Decorative({
  weight: ["400", "700", "900"], // Choose the weights
  subsets: ["latin"],
  display: "swap",
  variable: "--font-cinzel-deco",
});

const dancingScript = Dancing_Script({
  weight: ['400', '700'],
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-dancing-script',
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="scroll-smooth" suppressHydrationWarning>
      <body
        className={cn(
          cinzel.variable,
          cinzelDecorative.variable,
          dancingScript.variable,
          geistMono.variable,
          "antialiased",
          "tracking-tight"
        )}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="dark" // Ensures .dark is applied initially if no preference
          enableSystem={true} // Allows respecting OS preference
          themes={["dark"]}
        >
          <div className="flex flex-col min-h-screen overflow-hidden supports-[overflow:clip]:overflow-clip mx-4">
            {children}
          </div>
        </ThemeProvider>
      </body>
    </html>
  );
}


================================================================================
FILE: app/styles/animations.css
================================================================================

/* app/styles/animations.css */

/* ==========================================================================
   Keyframe Definitions
   ========================================================================== */

@keyframes neonPulse {
  0%,
  100% {
    opacity: 1;
  }
  50% {
    opacity: 0.7;
  }
}

@keyframes pulseLoop {
  0% {
    opacity: var(--opacity-none, 0);
    transform: scale(0.25) translateZ(0);
  }
  30% {
    opacity: 0.4;
  }
  70% {
    opacity: var(--opacity-none, 0);
  }
  80% {
    transform: scale(1) translateZ(0);
  }
}

@keyframes endless {
  0% {
    transform: translateY(0);
  }
  100% {
    transform: translateY(-245px);
  } /* Adjust value as needed */
}

@keyframes shine {
  0% {
    top: 0;
    transform: translateY(-100%) scaleY(10);
    opacity: var(--opacity-none, 0);
  }
  2% {
    opacity: var(--opacity-low, 0.5);
  }
  40% {
    top: 100%;
    transform: translateY(0) scaleY(200);
    opacity: var(--opacity-none, 0);
  }
  100% {
    top: 100%;
    transform: translateY(0) scaleY(1);
    opacity: var(--opacity-none, 0);
  }
}

@keyframes float {
  0% {
    transform: translateY(3%);
  }
  50% {
    transform: translateY(-3%);
  }
  100% {
    transform: translateY(3%);
  }
}

@keyframes neon-blink {
  0%,
  100% {
    opacity: 1;
  }
  50% {
    opacity: 0.4;
  }
}

/* ========= Animation Utility Classes ========= */

.animate-neonPulse {
  animation: neonPulse 2s ease-in-out infinite;
}

.animation-endless {
  animation: endless var(--animation-duration-slow, 12s)
    var(--animation-timing-linear, linear)
    var(--animation-iteration-infinite, infinite);
}

.animation-shine {
  animation: shine var(--animation-duration-medium, 8s)
    var(--animation-timing-linear, linear) 500ms
    var(--animation-iteration-infinite, infinite);
}

.animation-float {
  animation: float 2s ease-in-out var(--animation-iteration-infinite, infinite);
}

.pulse {
  opacity: var(--opacity-none, 0);
  transform-origin: center;
  animation: pulseLoop var(--animation-duration-slow, 12s)
    var(--animation-timing-linear, linear)
    var(--animation-iteration-infinite, infinite);
}
.pulse-1 {
  animation-delay: calc(var(--animation-duration-fast, 4s) * -1);
}
.pulse-2 {
  animation-delay: calc(var(--animation-duration-medium, 8s) * -1);
}

.blinkingCaret {
  position: relative;
}

.blinkingCaret::before,
.blinkingCaret::after {
  content: "";
  position: absolute;
  top: 0;
  bottom: 0;
  left: 100%;
  margin-left: 0.1em;
  animation: neon-blink 1.1s ease-in-out infinite;
}

.blinkingCaret::before {
  width: 2px;
  background-color: rgb(var(--accent-rgb)); /* Use theme variable */
  z-index: 2;
}

.blinkingCaret::after {
  width: 2px;
  background-color: transparent;
  box-shadow: 0 0 5px rgb(var(--accent-rgb)), 0 0 10px rgb(var(--accent-rgb)),
    0 0 15px rgb(var(--accent-rgb)), 0 0 20px rgba(var(--primary-rgb), 0.7);
  z-index: 1;
}

/* ========= Fancy Hover ========= */

.fancy-hover {
  @media (hover) {
    & > li {
      transition: opacity 0.3s linear;
    }
  }

  &:has(> li:hover) > li:not(:hover),
  &:has(> li:focus-within) > li:not(:focus-within) {
    opacity: 0.25;
  }
}

.bouncy-hover {
  @media (hover) and (prefers-reduced-motion) {
    & > li {
      transform-origin: left center;
      transition: transform 1s var(--bounce), opacity 0.3s linear;
    }
  }

  &:has(> li:hover) > li:not(:hover),
  &:has(> li:focus-within) > li:not(:focus-within) {
    opacity: 0.25;
    transform: scale(0.8);
  }
}

/* ========= Quick Flip Effect ========= */
.quick-flip {
  overflow-y: clip;
  --quick-flip-duration: 0.325s;
}

.quick-flip > * {
  display: block; /* Won't work without this block */
  transition: translate var(--quick-flip-duration),
    transform 0s calc(var(--quick-flip-duration) / 2);
  transition-timing-function: cubic-bezier(0.66, 0, 0.34, 1);
}

.quick-flip:hover > *,
.quick-flip:focus > * {
  translate: 0 -2lh;
  transform: translateY(2lh);
}

/* ========= Flip Effect Hero ========= */
.flip-hero-text {
  overflow-y: hidden;
  height: 2em; /* Adjust based on your font's line-height; matches one line of text */
  position: relative;
}

.flip-hero-text > * {
  display: block; /* Won't work without this block */
  transition: translate var(--quick-flip-duration),
    transform 0s calc(var(--quick-flip-duration) / 2);
  transition-timing-function: cubic-bezier(0.66, 0, 0.34, 1);
}

.flip-word {
  position: absolute;
  width: 100%;
  animation: flip 4s infinite ease-in-out;
}

.flip-word:first-child {
  animation-name: flip-build;
}

.flip-word:last-child {
  animation-name: flip-break;
}

@keyframes flip-build {
  0%,
  45% {
    transform: translateY(0);
  }
  50%,
  95% {
    transform: translateY(-100%);
  }
  100% {
    transform: translateY(0);
  }
}

@keyframes flip-break {
  0%,
  45% {
    transform: translateY(100%);
  }
  50%,
  95% {
    transform: translateY(0);
  }
  100% {
    transform: translateY(100%);
  }
}

/* ========= Glitch Effect ========= */

.glitchy {
  font-size: 8rem;
  font-weight: 700;
  text-transform: uppercase;
  text-shadow: 0.05em 0 0 var(--neon-glow-primary-rgb),
    -0.025em -0.05em 0 var(--neon-glow-accent-rgb),
    0.025em 0.05em 0 var(--neon-glow-secondary-rgb);
  animation: glitchy 500ms infinite;
}

.glitchy span {
  position: absolute;
  top: 0;
  left: 0;
}

.glitchy span:first-child {
  animation: glitchy 650ms infinite;
  clip-path: polygon(0 0, 100% 0, 100% 46%, 0 46%);
  transform: translate(-0.025em, -0.0125em);
  opacity: 0.8;
}

.glitchy span:last-child {
  animation: glitchy 375ms infinite;
  clip-path: polygon(0 70%, 100% 30%, 100% 100%, 0 100%);
  transform: translate(0.0125em, 0.025em);
  opacity: 0.8;
}

/* @media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-delay: -1ms l important;
    animation-duration: 1ms !important;
    animation-iteration-count: 1 !important;
    background-attachment: initial !important;
    scroll-behavior: auto !important;
    transition-duration: 0s !important;
    transition-delay: 0s !important;
  }
} */

/* ==========================================================================
   Custom AOS Animations
   ========================================================================== */
@media screen {
  html:not(.no-js) body [data-aos="fade-up"] {
    -webkit-transform: translate3d(0, 14px, 0);
    transform: translate3d(0, 14px, 0);
  }
  html:not(.no-js) body [data-aos="fade-down"] {
    -webkit-transform: translate3d(0, -14px, 0);
    transform: translate3d(0, -14px, 0);
  }
  html:not(.no-js) body [data-aos="fade-right"] {
    -webkit-transform: translate3d(-14px, 0, 0);
    transform: translate3d(-14px, 0, 0);
  }
  html:not(.no-js) body [data-aos="fade-left"] {
    -webkit-transform: translate3d(14px, 0, 0);
    transform: translate3d(14px, 0, 0);
  }
  html:not(.no-js) body [data-aos="fade-up-right"] {
    -webkit-transform: translate3d(-14px, 14px, 0);
    transform: translate3d(-14px, 14px, 0);
  }

  html:not(.no-js) body [data-aos="fade-up-left"] {
    -webkit-transform: translate3d(14px, 14px, 0);
    transform: translate3d(14px, 14px, 0);
  }

  html:not(.no-js) body [data-aos="fade-down-right"] {
    -webkit-transform: translate3d(-14px, -14px, 0);
    transform: translate3d(-14px, -14px, 0);
  }

  html:not(.no-js) body [data-aos="fade-down-left"] {
    -webkit-transform: translate3d(14px, -14px, 0);
    transform: translate3d(14px, -14px, 0);
  }

  html:not(.no-js) body [data-aos="zoom-in-up"] {
    -webkit-transform: translate3d(0, 14px, 0) scale(0.6);
    transform: translate3d(0, 14px, 0) scale(0.6);
  }

  html:not(.no-js) body [data-aos="zoom-in-down"] {
    -webkit-transform: translate3d(0, -14px, 0) scale(0.6);
    transform: translate3d(0, -14px, 0) scale(0.6);
  }

  html:not(.no-js) body [data-aos="zoom-in-right"] {
    -webkit-transform: translate3d(-14px, 0, 0) scale(0.6);
    transform: translate3d(-14px, 0, 0) scale(0.6);
  }

  html:not(.no-js) body [data-aos="zoom-in-left"] {
    -webkit-transform: translate3d(14px, 0, 0) scale(0.6);
    transform: translate3d(14px, 0, 0) scale(0.6);
  }

  html:not(.no-js) body [data-aos="zoom-out-up"] {
    -webkit-transform: translate3d(0, 14px, 0) scale(1.2);
    transform: translate3d(0, 14px, 0) scale(1.2);
  }

  html:not(.no-js) body [data-aos="zoom-out-down"] {
    -webkit-transform: translate3d(0, -14px, 0) scale(1.2);
    transform: translate3d(0, -14px, 0) scale(1.2);
  }

  html:not(.no-js) body [data-aos="zoom-out-right"] {
    -webkit-transform: translate3d(-14px, 0, 0) scale(1.2);
    transform: translate3d(-14px, 0, 0) scale(1.2);
  }

  html:not(.no-js) body [data-aos="zoom-out-left"] {
    -webkit-transform: translate3d(14px, 0, 0) scale(1.2);
    transform: translate3d(14px, 0, 0) scale(1.2);
  }
}


================================================================================
FILE: app/styles/globals.css
================================================================================

/* app/styles/globals.css (Updated for Tailwind v3) */

/* === Tailwind v3 Directives (Import base, components, and utilities) === */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* === Custom Style Imports (AFTER Tailwind directives for v3 JIT) === */
@import "./theme.css"; /* Defines CSS variables, custom component styles */
@import "./utility-patterns.css";
@import "./animations.css";
@import "./mdx.css";

/* === Base HTML/Body Styles === */
html,
body {
  max-width: 100vw;
  overflow-x: hidden; /* Prevent horizontal scroll */
  min-height: 100vh;
}

body {
  /* Theme-aware Background and Text Color --- */
  /* Generic role-based variables, which get their values, from the theme class (.dark, .mocha-mousse) applied to the html tag. */

  background-color: var(--color-surface-page);
  color: var(--color-text-default);

  background-image: none;
  /* Or 'scroll' if scrollable needed, but 'initial' is safer */
  background-attachment: initial;

  font-family: var(--font-cinzel);
  font-size: var(--fontSize-base);
  line-height: var(--lineHeight-normal);

  font-feature-settings: "ss01" 1;
  font-feature-settings: "ss02" 1;
  /* Standard browser normalization */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  overscroll-behavior: none !important;
}

.font-mono {
  letter-spacing: 0.05em !important;
}

.will-change-transform {
  transform: translateY(3.3446px) translateZ(0px);
  will-change: transform;
}

.hero-text {
  font-family: var(--font-cinzel), serif;
  line-height: 1; /* maps to leading-[1] */
  /* text-transform: uppercase; */
  font-size: clamp(1.875rem, 0.92rem + 4.9vw, 5.625rem);
  letter-spacing: -0.025em; /* maps to tracking-tight  */
  /* stylistic set to activate */
  /* font-feature-settings: "ss01" 1; */
  font-feature-settings: "ss02" 1;
}

/* Basic reset */
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

button {
  background-color: var(--button-primary-fill);
  color: var(--button-primary-text);
  border: 1px solid var(--button-primary-border);
  padding: 10px 20px; /* Example padding */
  border-radius: 5px; /* Example border radius */
  cursor: pointer;
  transition: background-color 0.3s ease, border-color 0.3s ease,
    color 0.3s ease; /* Smooth transition for hover */
}

button:hover {
  background-color: var(--button-primary-fill-hover);
  border-color: var(--button-primary-border-hover);
  color: var(--button-primary-text-hover);
}

/* === Carousel Edge Fades === */
.carousel-container-fades {
  position: relative; /* Needed for pseudo-elements */
}

.carousel-container-fades::before,
.carousel-container-fades::after {
  content: "";
  position: absolute;
  inset: 0; /* Cover the container vertically */
  top: 0;
  bottom: 0; /* Explicitly cover height */
  z-index: 20; /* Ensure it's above slides but below nav buttons */
  pointer-events: none; /* Allow clicks through */
  width: 100px; /* Adjust width of fade */
}

.carousel-container-fades::before {
  left: 0;
  /* Fade from background */
  background-image: linear-gradient(
    to right,
    rgb(var(--background-rgb)),
    transparent
  );
}

.carousel-container-fades::after {
  right: 0;
  /* Fade from background */
  background-image: linear-gradient(
    to left,
    rgb(var(--background-rgb)),
    transparent
  );
}

/* === Highlighter Styles === */

/* HighlighterItem Pseudo-elements */
.highlighterItem::before {
  content: "";
  position: absolute;
  width: 24rem; /* w-96 */
  height: 24rem; /* h-96 */
  left: -12rem; /* left-48 */
  top: -12rem; /* top-48 */
  background-color: rgb(var(--primary-rgb));
  border-radius: 9999px;
  opacity: 0;
  pointer-events: none;
  transition: opacity 500ms;
  transform: translate(
    var(--mouse-x, 0px),
    var(--mouse-y, 0px)
  ); /* Add fallback */
  z-index: 30; /* Check z-index conflicts */
  filter: blur(100px);
}
.highlighterItem::after {
  content: "";
  position: absolute;
  inset: 0;
  border-radius: inherit;
  opacity: 0;
  transition: opacity 500ms;
  /* Example subtle foreground color */
  background: radial-gradient(
    250px circle at var(--mouse-x, 0px) var(--mouse-y, 0px),
    rgba(var(--foreground-rgb), 0.1),
    transparent
  );
  z-index: 10; /* Check z-index conflicts */
}

/* HighlighterItem02 Pseudo-elements */
.highlighterItem02::before {
  content: "";
  position: absolute;
  width: 16rem; /* w-64 */
  height: 16rem; /* h-64 */
  left: -8rem; /* left-32 */
  top: -8rem; /* top-32 */
  background-color: rgb(var(--secondary-rgb));
  border-radius: 9999px;
  opacity: 0;
  pointer-events: none;
  transition: opacity 500ms;
  transform: translate(var(--mouse-x, 0px), var(--mouse-y, 0px)); /* fallback */
  z-index: 30;
  filter: blur(64px);
}

.highlighterItem02::after {
  content: "";
  position: absolute;
  inset: 0;
  border-radius: inherit;
  opacity: 0;
  transition: opacity 500ms;
  background: radial-gradient(
    250px circle at var(--mouse-x, 0px) var(--mouse-y, 0px),
    rgba(var(--foreground-rgb), 0.1),
    transparent
  );
  z-index: 10;
}

/* Group hover effects */
.group:hover .highlighterItem::before {
  opacity: 0.1;
}
.group:hover .highlighterItem::after {
  opacity: 0.3;
}
.group:hover .highlighterItem02::before {
  opacity: 0.15;
}
.group:hover .highlighterItem02::after {
  opacity: 0.3;
}

/* === Custom @layer definitions  === */

@layer utilities {
  .scrollbar-thin {
    scrollbar-width: thin;
  }
  .scrollbar-thin::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }
  .no-scrollbar {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }

  .rtl {
    direction: rtl;
  }
}


================================================================================
FILE: app/styles/mdx.css
================================================================================

/* app/styles/mdx.css (Simplified for v3 & Typography Plugin) */

/* Overrides or Additions to Typography Plugin --- */

/*  Link Styling Enhancements --- */
/* Base color/decoration comes from --tw-prose-links */
.mdx-prose a {
  text-underline-offset: 2px;
  transition: color 150ms ease-in-out, text-decoration-color 150ms ease-in-out;
  /* Optionally override decoration color alpha */
  text-decoration-color: rgba(var(--primary-rgb), 0.5);
}
.mdx-prose a:hover {
  /* Hover color comes from plugin/theme vars, just adjust decoration */
  text-decoration-color: rgba(var(--secondary-rgb), 0.7);
}

/* External Link Indicator */
.mdx-prose a[target="_blank"]::after {
  content: "↗";
  display: inline-block;
  margin-left: 0.25rem;
  font-size: 0.75em;
  opacity: 0.7;
  transition: opacity 0.2s ease-out;
}
.mdx-prose a[target="_blank"]:hover::after {
  opacity: 1;
}

/* List Styling --- */
/* Marker color comes from --tw-prose-bullets */
/* .mdx-prose ul li::marker { color: rgb(var(--primary-rgb)); } */

/*  Inline Code Styling --- */
/* Let plugin handle color via its defaults, just add bg/padding */
.mdx-prose :not(pre) > code {
  background-color: var(--gray-alpha-100);
  padding: 0.2em 0.4em;
  border-radius: 4px;
  font-size: var(--fontSize-sm);
  font-family: var(--font-geist-mono), monospace;
}

/* Rehype Pretty Code Styling --- */
.mdx-prose figure[data-rehype-pretty-code-figure] {
  margin-block: 1.5em;
}

.mdx-prose figure[data-rehype-pretty-code-figure] > pre {
  border: 1px solid rgb(var(--border-subtle-rgb)); /* Use border variable */
  border-radius: 6px;
  padding: var(--spacing-md);
  overflow-x: auto;
  font-size: 0.9em; /* Slightly smaller than base */
  line-height: 1.6;
  /* Background comes from --tw-prose-pre-bg */
}

.mdx-prose figure[data-rehype-pretty-code-figure] > pre > code {
  display: grid;
  font-family: var(--font-geist-mono), monospace; /* Ensure monospace font */
  background-color: transparent !important; /* Override theme bg */
  font-size: inherit;
  /* Text color comes from --tw-prose-pre-code (theme) or highlighting spans */
}

/* Code Highlights */
.mdx-prose .line--highlighted {
  background-color: rgba(var(--primary-rgb), 0.1); /* Use primary with alpha */
  box-shadow: inset 3px 0 0 0 rgb(var(--primary-rgb));
}
.mdx-prose .word--highlighted {
  background-color: rgba(
    var(--secondary-rgb),
    0.2
  ); /* Use secondary with alpha */
  padding: 0.1em 0.2em;
  border-radius: 3px;
}

/* Code Block Titles */
.mdx-prose [data-rehype-pretty-code-title] {
  font-size: 0.85em;
  font-family: var(--font-geist-mono), monospace;
  color: rgba(var(--foreground-rgb), 0.7);
  background-color: var(--gray-alpha-200); /* Slightly darker alpha gray */
  padding: var(--spacing-sm) var(--spacing-md);
  border: 1px solid rgb(var(--border-subtle-rgb));
  border-bottom: none;
  border-top-left-radius: 6px;
  border-top-right-radius: 6px;
  margin-bottom: 0;
}


================================================================================
FILE: app/styles/theme.css
================================================================================

/* app/styles/theme.css */

@import url("https://fonts.googleapis.com/css2?family=Cal+Sans&display=swap");

/* ========== Core CSS Variable Definitions ========== */

:root {
  /* Core Mocha Mousse Palette */
  --color_0: 255, 255, 255; /* White */
  --color_14: 248, 246, 242; /* Light off-white */
  --color_15: 247, 245, 241; /* Very Light Beige (Alternative Background) */
  --color_16: 203, 196, 185; /* Light grey/beige */
  --color_17: 164, 120, 100; /* Mocha-Mousse (Main Color) */
  --color_18: 83, 53, 39; /* Dark Brown (Primary Text) */
  --color_26: 45, 22, 11; /* Chocolate (Secondary Text/Button) */
  --color_34: 92, 68, 57; /* Cocoa (Accents) */

  --color-galactic-base-rgb: 18, 18, 36; /* Deep purplish-blue for galactic theme */

  --color_choco: #533527; /* Medium brown */
  --color_dark-chocolate: 45, 22, 11;
  --color_arona: #869aa3;
  --color_coffee: #6a5650;
  --color_mocha-mousse: #a67763; /* Core mocha-mousse color */
  --color_warm-taupe: #b09382;
  --color_tapestry: #436374;
  --accent-terra-cotta: #bc8f8f;
  --accent-earth-green: #8fbc8f;
  --accent-warm-tan: #d2b48c;
  --accent-deep-ochre: #a0522d;
  --accent-soft-grey: #c0c0c0;

  --header-text: rgb(var(--color_17));

  /* ==== Semantic Colors ==== */
  --color-surface-page: #0e1b07; /* Dark green background */
  --color-surface-secondary: #35170c; /* Secondary Dark BG / Borders */
  --color-accent: #924622;
  --color-text-default: #f7e8e1; /* Light text for dark mode */
  --color-text-muted: #9e7967;

  --color-accent: var(--accent-earth-green); /* Cocoa accents */
  --color-header: #2d160b; /* Dark brown headers */
  /* Chocolate brown text */
  /* --color-surface-page: rgba(var(--color_dark-chocolate), 1); */
  /* --color-text-default: var(--color_mocha-mousse); */
  /* --color-text-primary: var(--color_mocha-mousse);  */
  --color-text-secondary: rgb(var(--color_26)); /* Chocolate secondary text */
  --color-interactive-primary: rgb(var(--color_26)); /* Chocolate buttons */
  --color-interactive-secondary: var(--accent-deep-ochre);
  --color-interactive-text: rgb(var(--color_0)); /* White text for buttons */
  --color-surface-card: rgb(var(--color_16)); /* Light grey/beige cards */
  --color-border-default: rgb(var(--color_16)); /* Light grey/beige borders */
  --color-coco: rgba(var(--color_dark-chocolate), 1);

  /* Shadows for Light Theme */
  --shadow-highlight-rgb: 255, 255, 255; /* White */
  --shadow-base-rgb: 203, 213, 225; /* Subtle grey */
  --shadow-outer-rgb: 148, 163, 184; /* Medium grey */
  /* Core Spacing & Typography Tokens  */
  --spacing-base: 1rem;
  --spacing-xs: calc(var(--spacing-base) * 0.5);
  --spacing-sm: calc(var(--spacing-base) * 0.75);
  --spacing-md: var(--spacing-base);
  --spacing-lg: calc(var(--spacing-base) * 1.5);
  --spacing-xl: calc(var(--spacing-base) * 2);
  --spacing-2xl: calc(var(--spacing-base) * 3);

  --font-cal-sans: "Cal Sans", sans-serif;

  --fontSize-base: clamp(1rem, 1.05cqw + 0.8rem, 1.25rem);
  --fontSize-sm: clamp(0.89rem, 0.95cqw + 0.7rem, 1.13rem);
  --fontSize-xs: clamp(0.8rem, 0.91cqw + 0.6rem, 0.98rem);
  --fontSize-h1: clamp(2.5rem, 5vw, 3.5rem);
  --fontSize-h2: clamp(2rem, 4vw, 3rem);
  --fontSize-h3: clamp(1.75rem, 3vw, 2.5rem);
  --fontSize-h4: clamp(1.5rem, 2.5vw, 2rem);
  --fontSize-base: clamp(1rem, 1.05cqw + 0.8rem, 1.25rem);

  /* Layout Tokens  */
  --nav-height: 3.75rem;
  --max-width: 70rem;
  --slide-height: 100vh;

  --bounce: linear(
    0,
    0.009 1%,
    0.04 2.1%,
    0.093 3.3%,
    0.164 4.5%,
    0.324 6.7%,
    0.807 12.6%,
    0.935 14.4%,
    1.037 16.1%,
    1.12 17.8%,
    1.179 19.4%,
    1.22 21%,
    1.245 22.7%,
    1.253 25%,
    1.233 27.6%,
    1.189 30.3%,
    1.058 36.6%,
    1.004 39.7%,
    0.96 43.2%,
    0.939 46.7%,
    0.941 52%,
    0.998 64%,
    1.015 70.6%,
    1
  );
}

/* lighter background for testing */
.light-background {
  --color-background: rgb(var(--color_15));
  --color-text-primary: rgb(var(--color_18));
  --color-text-secondary: rgb(var(--color_34)); /* Cocoa for secondary text */
  --color-header: rgb(var(--color_18));
  --color-interactive-primary: rgb(var(--color_17)); /* Mocha-Mousse buttons */
}

/* ========== Dark Theme Overrides ==========  */

.dark {
  --color-surface-page: #0e1b07; /* Dark green background */
  --color-surface-secondary: #35170c; /* Secondary Dark BG / Borders */
  --color-accent: #924622;
  --color-text-default: #f7e8e1; /* Light text for dark mode */
  --color-text-muted: #9e7967;
}

.dark_V2 {
  --color-light-grey-rgb: 50, 50, 50; /* darker grey for dark mode */
  --color-galactic-base-rgb: 18, 18, 36; /* Deep purplish-blue for galactic theme */
  --color-surface-page: rgba(var(--color_16), 0.1); /* 10% opaque */
  --color-surface-card: #533527; /* Medium brown */
  --color-text-default: var(--color_mocha-mousse); /* Light off-white */
  --color-text-secondary: #d3d3d3; /* Light grey */
  --color-interactive-primary: var(--accent-deep-ochre); /* Mid-tone orange */
  --color-interactive-secondary: var(--accent-terra-cotta);
  --color-border-default: #666666; /* Neutral darker */
}

/* ==== Theme: Mocha Mousse (Earthy, Balanced) ==== */

.mocha-mousse {
  --mocha-mousse-color: #a47864; /* The core Pantone color */
  --mocha-mousse-background-dark: #5d4037;
  --mocha-mousse-background-alt: #6d504b;

  /*  Update Backgrounds --- */
  --mocha-mousse-background-page: var(--color_choco);
  /* Use the alt dark mocha for cards etc. */
  --mocha-mousse-background-alt: var(--mocha-mousse-background-alt);

  --mocha-mousse-text-default: rgb(var(--color_18));
  --mocha-mousse-text-secondary: var(--neutral-medium);

  --mocha-mousse-accent-terra-cotta: #bc8f8f;
  --mocha-mousse-accent-earth-green: #8fbc8f;
  --mocha-mousse-accent-warm-tan: #d2b48c;
  --mocha-mousse-accent-deep-ochre: #a0522d;
  --mocha-mousse-accent-soft-grey: #c0c0c0;

  --mocha-mousse-interactive-primary: var(--color_mocha-mousse);
  /* Use a lighter earthy accent */
  --mocha-mousse-interactive-secondary: var(--mocha-mousse-accent-warm-tan);
  --mocha-mousse-border-color: var(--neutral-darker);

  /* Map Mocha Mousse Theme Colors to Generic Roles --- */
  --color-surface-page: var(--mocha-mousse-background-page);
  --color-surface-card: var(--mocha-mousse-background-alt);
  --color-text-default: var(--mocha-mousse-color);
  --color-text-secondary: var(--mocha-mousse-text-secondary);

  --color-interactive-primary: var(--mocha-mousse-interactive-primary);
  --color-interactive-secondary: var(--mocha-mousse-interactive-secondary);
  --color-border-default: var(--mocha-mousse-border-color);

  --color-accent-highlight: var(--mocha-mousse-accent-earth-green);
  --color-accent-bold: var(--mocha-mousse-accent-deep-ochre);
}

html {
  color-scheme: light; /* Enforce light theme by default */
  scroll-behavior: smooth;
  font-size: 100%;
}

/* === Component Styles (Keep minimal) === */

.scroll-watcher {
  height: 10px;
  position: fixed;
  top: 0;
  z-index: 1000;
  background-color: var(--color-accent);
  width: 100%;
  scale: 0 1;
  transform-origin: left;
  animation: scroll-watcher linear;
  animation-timeline: scroll(y);
}

@keyframes scroll-watcher {
  to {
    scale: 1 1;
  }
}

@keyframes marquee {
  0% {
    transform: translateX(0);
  }

  to {
    transform: translateX(-100%);
  }
}

.marquee {
  animation: marquee 30s linear infinite;
  white-space: nowrap;
  font-family: var(--font-dancing-script), serif;
}

/* Scroll controls */
.scroll-controls {
  position: sticky;
  bottom: theme("spacing.8", "2rem");
  z-index: 50;
  display: flex;
  justify-content: flex-end;
  margin-right: calc(var(--scrollbar-width, 0px) + 1rem);
}

/* === Utility Overrides & Prose Styles === */

.hamburger div {
  transition: all 0.3s ease;
}
.menu {
  transition: transform 0.3s ease;
}

/* Layout Utilities  */
.content-grid {
  display: grid;
  grid-template-columns: 40fr 5fr 5fr 40fr;
  grid-template-rows: minmax(var(--slide-height), auto);
}

.sticky-col {
  position: sticky;
  top: 0; /* Adjust if needed, e.g., top-[var(--nav-height)] */
  height: var(--slide-height);
  scroll-snap-align: start;
}

/* Scroll Utilities  */
[data-scroll-section] {
  scroll-snap-type: y mandatory;
  scroll-behavior: smooth;
  overscroll-behavior: contain;
}

/* MDX Prose Styles (Controlling Typography Plugin) --- */
/* Plugin variables need to be defined to use theme variables */
.mdx-prose {
  @apply max-w-none;

  /* Link plugin variables directly to the theme variables */
  /* These will automatically switch with the .dark class */
  --tw-prose-body: rgb(var(--foreground-rgb));
  --tw-prose-headings: rgb(var(--foreground-rgb));
  --tw-prose-lead: rgb(var(--foreground-rgb));
  --tw-prose-links: rgb(var(--primary-rgb));
  --tw-prose-bold: rgb(var(--foreground-rgb));
  --tw-prose-counters: rgb(var(--foreground-rgb));
  --tw-prose-bullets: rgb(var(--primary-rgb));
  --tw-prose-hr: rgb(var(--border-medium-rgb));
  --tw-prose-quotes: rgb(var(--foreground-rgb));
  --tw-prose-quote-borders: rgb(var(--border-medium-rgb));
  --tw-prose-captions: rgba(var(--foreground-rgb), 0.7);
  --tw-prose-code: rgb(var(--secondary-rgb)); /* Inline code color */
  --tw-prose-pre-code: inherit; /* Let highlighter handle text */
  /* Code block background */
  --tw-prose-pre-bg: rgb(var(--code-background-rgb));
  --tw-prose-th-borders: rgb(var(--border-medium-rgb));
  --tw-prose-td-borders: rgb(var(--border-subtle-rgb));

  /* Invert variables, points to the same theme vars */
  --tw-prose-invert-body: rgb(var(--foreground-rgb));
  --tw-prose-invert-headings: rgb(var(--foreground-rgb));
  --tw-prose-invert-lead: rgb(var(--foreground-rgb));
  --tw-prose-invert-links: rgb(var(--primary-rgb));
  --tw-prose-invert-bold: rgb(var(--foreground-rgb));
  --tw-prose-invert-counters: rgb(var(--foreground-rgb));
  --tw-prose-invert-bullets: rgb(var(--primary-rgb));
  --tw-prose-invert-hr: rgb(var(--border-medium-rgb));
  --tw-prose-invert-quotes: rgb(var(--foreground-rgb));
  --tw-prose-invert-quote-borders: rgb(var(--border-medium-rgb));
  --tw-prose-invert-captions: rgba(var(--foreground-rgb), 0.7);
  --tw-prose-invert-code: rgb(var(--secondary-rgb));
  --tw-prose-invert-pre-code: inherit;
  --tw-prose-invert-pre-bg: rgb(var(--code-background-rgb));
  --tw-prose-invert-th-borders: rgb(var(--border-medium-rgb));
  --tw-prose-invert-td-borders: rgb(var(--border-subtle-rgb));
}


================================================================================
FILE: app/styles/utility-patterns.css
================================================================================

/* app/styles/utility-patterns.css */

/* === Typography (Using CSS Variables from theme.css) === */
.heading-1 {
  font-size: var(--fontSize-h1);
  font-weight: 800; /* extrabold */
  line-height: var(--lineHeight-tight);
}
.heading-2 {
  font-size: var(--fontSize-h2);
  font-weight: 800; /* extrabold */
  line-height: var(--lineHeight-tight);
}
.heading-3 {
  font-size: var(--fontSize-h3);
  font-weight: 700; /* bold */
  line-height: var(--lineHeight-tight);
}
.heading-4 {
  font-size: var(--fontSize-h4);
  font-weight: 700; /* bold */
  line-height: var(--lineHeight-tight);
}

/* === Button Components (Using CSS Variables from theme.css) === */
/* These act as base styles that can be extended with Tailwind classes */
.btn {
  @apply inline-flex items-center justify-center rounded-full px-[var(--spacing-md)] py-[0.375rem] text-[length:var(--fontSize-sm)] leading-[var(--lineHeight-normal)] font-medium transition-all duration-150 whitespace-nowrap border border-transparent;
}

.btn-sm {
  @apply inline-flex items-center justify-center rounded-full px-[var(--spacing-sm)] py-[var(--spacing-xs)] text-[length:var(--fontSize-xs)] leading-[var(--lineHeight-normal)] font-medium transition-all duration-150 whitespace-nowrap border border-transparent;
  /* Use --fontSize-xs defined in theme.css */
}

/* === Form Components === */
/* NOTE: @tailwindcss/forms plugin provides base styles.
   These custom classes might override or supplement them.
*/
.form-input,
.form-textarea,
.form-multiselect,
.form-select {
  /* Forms plugin needs to be active */
  @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm dark:bg-slate-800 dark:border-slate-600 dark:text-slate-200 dark:placeholder-slate-500 dark:focus:border-indigo-400 dark:focus:ring-indigo-400;
  /* Adjust colors (e.g., border-gray-300, focus:border-indigo-500) to match theme */
  font-size: var(--fontSize-sm); /* Override font size if needed */
}

.form-select {
  @apply pr-10; /* Keep padding for arrow */
}

.form-checkbox,
.form-radio {
  @apply rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:border-slate-600 dark:bg-slate-800 dark:checked:bg-indigo-500 dark:focus:ring-indigo-400;
}

/* === Scrollbar Utilities === */
.scrollbar-thin {
  scrollbar-width: thin;
}
.scrollbar-thin::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}
.no-scrollbar {
  scrollbar-width: none;
  -ms-overflow-style: none;
}
.no-scrollbar::-webkit-scrollbar {
  display: none;
}
.no-search-decoration::-webkit-search-decoration,
.no-search-decoration::-webkit-search-cancel-button,
.no-search-decoration::-webkit-search-results-button,
.no-search-decoration::-webkit-search-results-decoration {
  -webkit-appearance: none;
}


================================================================================
FILE: components/DashboardButton.tsx
================================================================================

// import { getCurrentUser } from "@/lib/dal"
import Button from "./ui/Button"
import Link from "next/link"

// const DashboardButtonSignedIn = async () => {
//   const user = await getCurrentUser()
//   return (
//     <>
//       {user ? (
//         <Link href="/dashboard">
//           <Button>Go to Dashboard</Button>
//         </Link>
//       ) : (
//         <div className="flex items-center space-x-4">
//           <Link href="/signin">
//             <Button variant="outline">Sign in</Button>
//           </Link>
//           <Link href="/signup">
//             <Button>Sign up</Button>
//           </Link>
//         </div>
//       )}
//     </>
//   )
// }

const DashboardButton = () => {
  return (
    <div className="flex items-center space-x-4">
      <Link href="/signin">
        <Button variant="outline">Sign in</Button>
      </Link>
      <Link href="/signup">
        <Button>Sign up</Button>
      </Link>
    </div>
  )
}

export default DashboardButton


================================================================================
FILE: components/Glitchy.tsx
================================================================================

import { FC } from "react";
import ParticlesV3 from "./particles/ParticlesV3";

const Glitchy: FC = () => (
  <div className="relative max-w-6xl mx-auto px-4 sm:px-6 min-h-screen border border-red-500">
    {/* Particles animation */}
    <ParticlesV3
      className="absolute inset-0 -z-10"
      quantity={10}
      staticity={90}
    />
    {/*
      <div className="absolute left-1/2 -translate-x-1/2 top-0 -z-10 w-80 h-80 -mt-24 -ml-32">
        <ParticlesV2
          className="absolute inset-0 -z-10"
          quantity={6}
          staticity={30}
        />
      </div> */}
    <div className="pt-32 pb-16 md:pt-52 md:pb-32">
      {/* Hero content */}
      <div className="max-w-3xl mx-auto text-center">
        <div className="mb-6" data-aos="fade-down">
          <p className="glitchy">
            <span aria-hidden="true">Samir</span>
            <span aria-hidden="true">Samir</span>
            Samir
          </p>
        </div>
      </div>
    </div>
  </div>
);
export default Glitchy;


================================================================================
FILE: components/Hero.tsx
================================================================================

// components/Hero.tsx

import Image from "next/image";
import Particles from "./particles/Particles";
import Illustration from "@/public/glow-bottom.svg";
import TypingEffect from "./TypingEffect";
import { cn } from "@/lib/utils";

const Intro = [
  "Hi, I’m a software engineer passionate about solving complex problems and creating technology that improves lives. Welcome to my website, where I share my projects and insights on building impactful software.",
  "my digital playground—a space where I stash notes, articles, and code snippets to revisit later. I’m a software engineer who thinks out loud here, mostly about dev challenges, with some rants, self-care musings, and mental health sprinkled in. Dive in and explore!",
  "Hey, I’m a coder hooked on crafting speedy, open-for-all web magic—welcome to my wild dev playground!",
  "Hey, I’m a dev who thrives on crafting code to fix user headaches and build speedy, open-for-all web magic!",
];

// Dynamic parts
const dynamicHobbies = [
  "gaming.",
  "reading.",
  "coding.",
  "hiking.",
  "cooking.",
];

export default function Hero() {
  return (
    <section className="relative min-h-screen flex items-center justify-center">
      {/* Background Elements */}
      <Particles className="absolute inset-0 -z-10" quantity={40} />
      <div
        className="absolute bottom-0 left-1/2 transform -translate-x-1/2 pointer-events-none -z-10 opacity-70 dark:opacity-100"
        aria-hidden="true"
      >
        <Image
          src={Illustration}
          className="max-w-none"
          width={2146}
          alt="Hero Background Glow"
          priority
        />
      </div>

      <div className="max-w-6xl mx-auto px-4 sm:px-6 text-center">
        <div className="max-w-3xl mx-auto">
          {/* Constrain text width */}
          <div data-aos="fade-down" data-aos-delay="200">
            <TypingEffect
              staticPrefix="I like "
              items={dynamicHobbies}
              // Apply text size/weight/color using Tailwind utilities
              // Example using text-4xl for larger hero text
              paragraphClassName={cn(
                "text-4xl md:text-6xl font-bold mb-8",
                "text-slate-700 dark:text-slate-200"
              )}
              typingSpeed={120}
              deletingSpeed={60}
              pauseDuration={1800000}
            />
          </div>
          {/* Optional Buttons Section */}
        </div>
      </div>
    </section>
  );
}


================================================================================
FILE: components/HeroSection.tsx
================================================================================

// components/HeroSection.tsx

// 'use client'; Uncomment later to add interactive elements
import Image from "next/image";
import { cn } from "../lib/utils";

const imageSrc = "/assets/Relaxing-Forest-Setting.png";
const imageAlt = "Samir Coder";

const subText =
  "With a passion for crafting web solutions that are blazing fast and accessible.";

const HeroSection = () => {
  return (
    <section
      className="my-4"
      aria-label="Hero section introducing Samir's portfolio"
    >
      <div className="pb-[61vw] md:pb-[55vw] lg:pb-[45vw] xl:pb-[36.25vw] 2xl:pb-[670px] mb-24 lg:mb-16 relative">
        {/* Text Content Area */}
        <div
          className={cn(
            "uppercase",
            "max-w-[1700px] w-full lg:w-11/12",
            "hero-text"
          )}
        >
          <h1
            className={cn(
              "text-default",
              "flex flex-wrap overflow-hidden justify-start w-full"
            )}
          >
            <span className="block overflow-hidden">
              <span className="block overflow-hidden will-change-transform translate-y-0 transform-gpu">
                <span className="block mb-0 pb-0 pr-[1px] ml-[10vw]">
                  <span className="block ms-text-adjust">I &nbsp;</span>
                </span>
              </span>
            </span>

            {/* "Build! " */}
            <span className="block overflow-hidden">
              <span className="block overflow-hidden will-change-transform translate-y-0 transform-gpu">
                <span className="block mb-0 pb-0">
                  <span className="block ms-text-adjust">Build &nbsp;</span>
                </span>
              </span>
            </span>
            {/* "Build" with flip effect to "Break " */}
            {/* <span className="block overflow-hidden">
              <span className="block overflow-hidden will-change-transform translate-y-0 transform-gpu">
                <span className="block mb-0 pb-0 flip-hero-text">
                  <span className="block ms-text-adjust flip-word">
                    Build &nbsp;
                  </span>
                  <span className="block ms-text-adjust flip-word">
                    Break &nbsp;
                  </span>
                </span>
              </span>
            </span> */}

            {/* "things! " */}
            <span className="block overflow-hidden">
              <span className="block overflow-hidden will-change-transform translate-y-0 transform-gpu">
                <span className="block mb-0 pb-0">
                  <span className="block ms-text-adjust">things. &nbsp;</span>
                </span>
              </span>
            </span>

            {/*
              Manual line break element
              Insert a span with w-full (width: 100%).
              As a flex item, this span will take up the entire width of the flex container (the h1), forcing the subsequent flex items ("I " and the mapped words) onto the next line.
            */}
            <span className="w-full"></span>

            {/* Mapping the rest of the words from coreMessage */}
            {subText.split(" ").map((message, index) => (
              <span className="block overflow-hidden" key={index}>
                <span className="block overflow-hidden will-change-transform translate-y-0 transform-gpu">
                  <span className="block mb-0 pb-0">
                    <span className="block ms-text-adjust">
                      {message}
                      {index < subText.split(" ").length - 1 ? "\u00A0" : ""}
                    </span>
                  </span>
                </span>
              </span>
            ))}
          </h1>
        </div>
        <div className="absolute bottom-0 right-0 h-[60vh] w-[80vw] overflow-hidden bg-[#000] bg-opacity-50 max-w-[1000px]">
          {/* This div provides the W/H needed for Image fill and ensures it covers the opacity layer */}
          <div className="opacity-[0.2] absolute inset-0 overflow-hidden">
            {/* Inner container needed for Image fill (must be relative/absolute/etc. and have dimensions) */}

            <div className="absolute inset-0 w-full h-full">
              <Image
                src={imageSrc}
                alt={imageAlt}
                fill
                className="object-cover filter saturate-50 hue-rotate-15deg"
                priority={true}
              />
              {/* Overlay for text readability and blending with dark green */}
              <div className="absolute inset-0 bg-color-surface-page bg-opacity-60" />
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default HeroSection;


================================================================================
FILE: components/ScrollSlide.tsx
================================================================================

// components/ScrollSlide.tsx
'use client';
import { useEffect, useRef } from 'react';

export default function ScrollSlide() {
  const containerRef = useRef<HTMLDivElement>(null);
  const leftColRef = useRef<HTMLDivElement>(null);
  const rightColRef = useRef<HTMLDivElement>(null);

  // Basic height synchronization
  useEffect(() => {
    const setHeights = () => {
      if (containerRef.current) {
        const height = containerRef.current.offsetHeight;
        containerRef.current.style.setProperty('--slide-height', `${height}px`);
      }
    };

    setHeights();
    window.addEventListener('resize', setHeights);
    return () => window.removeEventListener('resize', setHeights);
  }, []);

  return (
    <div
      ref={containerRef}
      className="h-screen overflow-y-auto relative"
      style={{ scrollBehavior: 'smooth' }}
    >
      {/* Main Grid Container */}
      <div className="grid grid-cols-[40fr_5fr_5fr_40fr] min-h-[var(--slide-height)]">
        {/* Left Sticky Column */}
        <div
          ref={leftColRef}
          className="sticky top-0 h-[var(--slide-height)] flex flex-col justify-between p-8"
        >
          <div className="space-y-4">
            <h2 className="text-4xl font-bold">Section Title</h2>
            <p className="text-lg">Section content that remains sticky...</p>
          </div>
          <div className="flex gap-4">
            <button className="px-4 py-2 bg-black text-white rounded-full">
              Previous
            </button>
            <button className="px-4 py-2 bg-black text-white rounded-full">
              Next
            </button>
          </div>
        </div>

        {/* Right Sticky Column */}
        <div
          ref={rightColRef}
          className="sticky top-0 h-[var(--slide-height)] col-start-4 flex items-center justify-center"
        >
          <div className="w-full max-w-md h-64 bg-gray-100 rounded-xl" />
        </div>

        {/* Scroll Content */}
        <div className="col-span-full row-start-1 min-h-[200vh]">
          <div className="grid grid-cols-[40fr_5fr_5fr_40fr]">
            {/* Content that scrolls between columns */}
            {Array.from({ length: 10 }).map((_, i) => (
              <div key={i} className="h-screen p-8 border-t">
                <p className="text-lg">Scrollable content section {i + 1}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}


================================================================================
FILE: components/ThemeToggle.tsx
================================================================================

"use client";

import { useTheme } from "next-themes";
import { useEffect, useState } from "react";
import { SunIcon, MoonIcon } from "lucide-react";
import Button from "./ui/Button";

const themes = ["light", "dark", "mocha-mousse"];
export default function ThemeToggle() {
  // useTheme hook provides the current theme and the setTheme function
  // 'theme' can be 'light', 'dark', 'mocha-mousse', 'system', or undefined on initial render
  // 'resolvedTheme' will be 'light' or 'dark' if 'system' is the theme, otherwise matches 'theme'
  // 'themes' is the list of themes provided to ThemeProvider (['light', 'dark', 'mocha-mousse'] in your case)
  // 'setTheme' is the function to change the theme
  // 'systemTheme' is 'light' or 'dark' based on the user's OS preference
  const { theme, setTheme, resolvedTheme } = useTheme();

  // State to track if the component has mounted. This is crucial for
  // avoiding hydration mismatches as next-themes reads localStorage
  // which is only available on the client side.
  const [mounted, setMounted] = useState(false);

  // useEffect runs only on the client side after initial render
  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    console.log("THEME TOGGLE:", { theme });
  }, [theme]);

  // If the component is not mounted, render a placeholder or null
  // This prevents rendering a UI that might not match the server-rendered HTML
  if (!mounted) {
    // You can return a loading spinner or a placeholder div here
    // For now, returning null to render nothing until mounted
    return null;
  }

  // Determine the currently displayed theme for the button text/icon
  // Use 'resolvedTheme' if 'enableSystem' is true and 'theme' is 'system'
  const currentThemeDisplay =
    theme === "system" ? `${resolvedTheme} (System)` : theme;

  // Function to cycle through the defined themes
  const toggleTheme = () => {
    // Start from light if theme is undefined initially
    const currentIndex = themes.indexOf(theme || "light");
    const nextIndex = (currentIndex + 1) % themes.length;
    const nextTheme = themes[nextIndex];
    setTheme(nextTheme);
  };

  return (
    <Button
      variant="ghost"
      size="sm" // Use a smaller size consistent with header icons
      onClick={toggleTheme}
      aria-label={
        theme === "dark" ? "Activate light mode" : "Activate dark mode"
      }
      className="px-2" // Adjust padding for icon-only button
    >
      {currentThemeDisplay}
      {theme === "dark" ? (
        <SunIcon className="h-5 w-5 text-slate-400 hover:text-slate-200" />
      ) : (
        <MoonIcon className="h-5 w-5 text-slate-500 hover:text-slate-800" />
      )}
    </Button>
  );
}


================================================================================
FILE: components/Timestamp.tsx
================================================================================

'use client'

import { useState, useLayoutEffect } from 'react'

export function Timestamp() {
  const [time, setTime] = useState<number | null>(null)
  useLayoutEffect(() => {
    // You can determine when and how often to update
    // the time here. In this example we update it only once
    setTime(new Date().getFullYear())
  }, [])
  if (time) {
    return time
  }
  return null
}


================================================================================
FILE: components/TypingEffect.tsx
================================================================================

// /components/TypingEffect.tsx
"use client";

import React, { useState, useEffect, useRef } from "react";
import { calculateNextTypingStep } from "@/lib/typing-logic";
import { cn } from "@/lib/utils";

interface TypingEffectProps {
  staticPrefix?: string /** Static text to display before typing animation. */;
  items: string[];
  typingSpeed?: number;
  deletingSpeed?: number;
  pauseDuration?: number;
  paragraphClassName?: string;
}

const defaultItems = ["gaming.", "reading.", "coding."];

const TypingEffect: React.FC<TypingEffectProps> = ({
  staticPrefix = "",
  items = defaultItems,
  typingSpeed = 100,
  deletingSpeed = 50,
  pauseDuration = 1500,
  paragraphClassName = "font-semibold",
}) => {
  const [currentItemIndex, setCurrentItemIndex] = useState(0);
  const [displayedText, setDisplayedText] = useState("");
  const [isDeleting, setIsDeleting] = useState(false);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    if (!items || items.length === 0) return;

    const step = calculateNextTypingStep(
      { items, currentItemIndex, displayedText, isDeleting },
      { typingSpeed, deletingSpeed, pauseDuration }
    );
    timeoutRef.current = setTimeout(() => {
      setDisplayedText(step.nextText);
      setIsDeleting(step.nextIsDeleting);
      if (isDeleting && step.nextText === "") {
        setCurrentItemIndex((prevIndex) => (prevIndex + 1) % items.length);
      }
    }, step.delay);

    return () => {
      if (timeoutRef.current) clearTimeout(timeoutRef.current);
    };
  }, [
    items,
    currentItemIndex,
    displayedText,
    isDeleting,
    typingSpeed,
    deletingSpeed,
    pauseDuration,
  ]);

  return (
    <p className={cn(paragraphClassName)}>
      {/* Static prefix */}
      {staticPrefix && (
        <span className="inline-block align-bottom pr-3 min-h-[1.2em] ">{staticPrefix}</span>
      )}

      {/* Dynamic part within styled span */}
      <span
        className={cn(
          // Base styles needed for effect
          "inline-block relative align-bottom whitespace-nowrap min-h-[1.2em]",
          // Custom class for caret (styles in global CSS)
          "blinkingCaret",
          // Default text color (overridden by dark gradient)
          "text-inherit", // Inherit color from parent <p>
          // Dark mode gradient text (using mapped colors from tailwind.config)
          "dark:bg-gradient-to-r dark:from-primary-400 dark:to-secondary-400 dark:bg-clip-text dark:text-transparent"
        )}
      >
        {displayedText || "\u00A0"}
      </span>
    </p>
  );
};

export default TypingEffect;


================================================================================
FILE: components/animate.tsx
================================================================================

"use client"
import AOS from "aos"
import { useEffect } from "react"

const Animate = () => {
  useEffect(() => {
    AOS.init({
      once: true,
      disable: "phone",
      duration: 1000,
      easing: "ease-out-cubic",
    })
  })

  return null
}

export default Animate


================================================================================
FILE: components/flip-text.tsx
================================================================================

import { FC } from "react";

const FlipText: FC = () => (
  <section className="pb-[20vw] lg:pb-[12.5vw]">
    <ul role="list" className="uppercase border-t border-white/30">
      <li className="block">
        <span className="border-b border-white/30 w-full py-2 lg:py-1 block lg:flex lg:items-end">
          <span className="leading-[1.275] block text-[clamp(18px,0.92rem+1.15vw,34px)] tracking-tight mb-1 lg:mb-0 relative overflow-hidden">
            <span className="quick-flip block">
              <span className="block ms-text-adjust ">British Petroleum</span>
            </span>
          </span>
        </span>
      </li>
    </ul>
  </section>
);

export default FlipText;


================================================================================
FILE: components/highlighter.tsx
================================================================================

// components/highlighter.tsx (Refactored with Tailwind v3)
/* eslint-disable @typescript-eslint/no-unused-expressions */
"use client";

import React, { useRef, useState, useEffect } from "react";
import useMousePosition from "./hooks/mouse-position"; // Assuming hook is moved or path updated
import { cn } from "@/lib/utils";

// --- Highlighter Container ---
// This component manages mouse position and applies CSS variables to children
type HighlighterProps = {
  children: React.ReactNode;
  className?: string;
  refresh?: boolean; // Prop to trigger re-calculation if needed
};

export default function Highlighter({
  children,
  className = "",
  refresh = false,
}: HighlighterProps) {
  const containerRef = useRef<HTMLDivElement>(null);
  const mousePosition = useMousePosition();
  const mouse = useRef<{ x: number; y: number }>({ x: 0, y: 0 });
  const containerSize = useRef<{ w: number; h: number }>({ w: 0, h: 0 });
  // No need for boxes state if we apply variables directly

  // Function to initialize container dimensions
  const initContainer = () => {
    if (containerRef.current) {
      containerSize.current.w = containerRef.current.offsetWidth;
      containerSize.current.h = containerRef.current.offsetHeight;
    }
  };

  // Function to update mouse position variables on children
  const onMouseMove = () => {
    if (containerRef.current) {
      const rect = containerRef.current.getBoundingClientRect();
      const { w, h } = containerSize.current;
      const x = mousePosition.x - rect.left;
      const y = mousePosition.y - rect.top;
      const inside = x < w && x > 0 && y < h && y > 0;

      if (inside) {
        mouse.current.x = x;
        mouse.current.y = y;
        // Apply CSS variables to all direct children with the target class
        Array.from(containerRef.current.children).forEach((el) => {
          if (el instanceof HTMLElement && (el.classList.contains('highlighterItem') || el.classList.contains('highlighterItem02'))) {
            const box = el;
            const boxX = -(box.getBoundingClientRect().left - rect.left) + mouse.current.x;
            const boxY = -(box.getBoundingClientRect().top - rect.top) + mouse.current.y;
            box.style.setProperty("--mouse-x", `${boxX}px`);
            box.style.setProperty("--mouse-y", `${boxY}px`);
          }
        });
      }
    }
  };

  // Initialize container size on mount and resize
  useEffect(() => {
    initContainer();
    window.addEventListener("resize", initContainer);
    return () => {
      window.removeEventListener("resize", initContainer);
    };
  }, []);

  // Update mouse variables on mouse move
  useEffect(() => {
    onMouseMove();
  }, [mousePosition]); // eslint-disable-line react-hooks/exhaustive-deps

  // Re-initialize if refresh prop changes
  useEffect(() => {
    initContainer();
  }, [refresh]);

  return (
    // Apply passed className to the container
    <div className={className} ref={containerRef}>
      {children}
    </div>
  );
}

// --- Highlighter Item ---
type HighlighterItemProps = {
  children: React.ReactNode;
  className?: string;
};

// Base Highlighter Item
export function HighlighterItem({
  children,
  className = "",
}: HighlighterItemProps) {
  return (
    <div
      // Apply base Tailwind styles + the custom class for pseudo-elements
      className={cn(
        "highlighterItem", // Custom class for global CSS pseudo-elements
        "relative h-full overflow-hidden rounded-2xl p-px", // Base layout/styles
        "bg-slate-800 dark:bg-slate-900", // Base background
        "transition-colors duration-300 ease-in-out", // Transition for hover
        "group-hover:bg-slate-700 dark:group-hover:bg-slate-800", // Background change on group hover
        className // Allow merging additional classes
      )}
      // Initialize CSS variables (optional, but good practice)
      style={{ '--mouse-x': '0px', '--mouse-y': '0px' } as React.CSSProperties}
    >
      {/* Inner div might be needed if padding interferes with pseudo-elements */}
      <div className="relative h-full bg-inherit rounded-[inherit] z-10"> {/* z-index to keep content above ::after */}
         {children}
      </div>
    </div>
  );
}

// Variant Highlighter Item (uses different pseudo-element styles via class)
export function HighlighterItem02({
  children,
  className = "",
}: HighlighterItemProps) {
  return (
    <div
      // Apply base Tailwind styles + the variant custom class
      className={cn(
        "highlighterItem02", // Custom class for global CSS pseudo-elements (variant)
        "relative h-full overflow-hidden rounded-2xl p-px", // Base layout/styles
        "bg-slate-800 dark:bg-slate-900", // Base background
        "transition-colors duration-300 ease-in-out", // Transition for hover
        "group-hover:bg-slate-700 dark:group-hover:bg-slate-800", // Background change on group hover
        className // Allow merging additional classes
      )}
      style={{ '--mouse-x': '0px', '--mouse-y': '0px' } as React.CSSProperties}
    >
       <div className="relative h-full bg-inherit rounded-[inherit] z-10">
         {children}
      </div>
    </div>
  );
}


================================================================================
FILE: components/hooks/mouse-position.ts
================================================================================

import { useState, useEffect } from 'react';

interface MousePosition {
  x: number;
  y: number;
}

export default function useMousePosition(): MousePosition {
  const [mousePosition, setMousePosition] = useState<MousePosition>({ x: 0, y: 0 });

  useEffect(() => {
    const handleMouseMove = (event: MouseEvent) => {
      setMousePosition({ x: event.clientX, y: event.clientY });
    }

    window.addEventListener('mousemove', handleMouseMove);

    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
    }
  }, []);

  return mousePosition;
}


================================================================================
FILE: components/project-stack.tsx
================================================================================

// components/project-stack.tsx

interface Project {
  id: string | number;
  name: string;
  link: string;
}

interface ProjectStackProps {
  projects: Project[];
}

const ProjectStack: React.FC<ProjectStackProps> = ({ projects }) => {
  return (
    <section>
      <div className="pb-[20vw] lg:pb-[12.5vw]">
        <h2 className="font-mono uppercase tracking-tight leading-none text-[10px] mb-3 lg:mb-3 pb-0">
          Some Of My Projects
        </h2>

        {/* The list of projects */}
        <ul className="border-t bouncy-hover">
          {projects.map((project) => (
            <li key={project.id} className="block relative">
              <a
                href={project.link}
                className="uppercase border-b border-text-default w-full py-2 lg:py-[15px] flex items-end relative group transition-all ease-[cubic-bezier([0.83,0,0.17,1])] duration-[400ms] lg:pl-0 a11y-focus"
                aria-label={`View Project: ${project.name}`}
              >
                <span className="block overflow-hidden">
                  <span className="leading-[0.95] block text-mousse-terracotta text-[clamp(30px,0.92rem+4.4vw,100px)] font-display tracking-tight relative z-[1] transition-opacity ease-[cubic-bezier([0.83,0,0.17,1])] duration-[400ms] lg:opacity-100">
                    <span className="block">
                      <span className="block ms-text-adjust">
                        {project.name}
                      </span>
                    </span>
                  </span>
                </span>

                {/* "View Project" text (hidden on small screens) */}
                <span className="ml-auto text-right font-mono text-[10px] tracking-tight leading-none hidden lg:block relative overflow-hidden z-[1] transition-opacity ease-[cubic-bezier([0.83,0,0.17,1])] duration-[400ms] lg:opacity-100">
                  <span
                    className="block"
                    style={{ transform: "translateY(0%) translateZ(0px)" }}
                  >
                    View Project
                  </span>
                </span>
              </a>
            </li>
          ))}
        </ul>
      </div>
    </section>
  );
};

export default ProjectStack;


================================================================================
FILE: components/slider/SlideColumn.tsx
================================================================================

// @/component/slider/SlideColumn.tsx
import React from "react";

interface SlideColumnProps {
  children: React.ReactNode;
  // other potential props: alignment
}

// This column will stick to the top while scrolling within its parent container
const SlideColumn: React.FC<SlideColumnProps> = ({ children }) => {
  return (
    <div className="sticky top-16 md:top-24 h-fit p-4 md:p-6">
      {/*
        'top-16 md:top-24': Defines the offset from the top where it sticks. Adjust as needed (e.g., header height).
        'h-fit': Height adjusts to content, crucial for sticky behavior within a scrolling context.
       */}
      <div className="bg-pastel-card shadow-md rounded-lg p-6">{children}</div>
    </div>
  );
};

export default SlideColumn;

/*
* Usage :
* We are not implementing slide-to-slide transitions here, but rendering all sections vertically to demonstrate the sticky scrolling effect WITHIN each section and AS YOU SCROLL from one section to the next.
const App: React.FC = () => {
  return (
    <main className="w-full overflow-x-hidden">
       {slides.map((slide) => (
        <SlideSection key={slide.id} slide={slide} />
      ))}

       > Optional: Add a simple footer
       <footer className="text-center p-4 bg-pastel-bg text-pastel-text-subtle text-sm">
         End of content.
       </footer>
    </main>
  );
};

export default App;

*/


================================================================================
FILE: components/slider/SlideSection.tsx
================================================================================

// @/component/slider/SlideSection.tsx

import Image from "next/image";
import React from "react";
import SlideColumn from "./SlideColumn";
import { SlideContent } from "./slideData"; // Import interface

interface SlideSectionProps {
  slide: SlideContent;
}

// Each section takes full viewport height and has its own background
const SlideSection: React.FC<SlideSectionProps> = ({ slide }) => {
  return (
    <section
      id={slide.id}
      // min-h-screen ensures it takes at least the screen height, allowing scrolling
      className={`min-h-screen w-full flex items-center justify-center p-4 md:p-8 ${slide.bgColor}`}
    >
      {/* The grid container within the section */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 w-full max-w-6xl">
        {/* Left Column (Sticky) */}
        <SlideColumn>
          <h2 className="text-2xl md:text-3xl font-bold mb-4 text-pastel-text-main">
            {slide.title}
          </h2>
          <p className="text-base md:text-lg text-pastel-text-subtle leading-relaxed">
            {slide.text}
          </p>
          {/* Add more content here if needed to test scrolling */}
          <div className="mt-6 h-48 bg-gray-200 rounded flex items-center justify-center text-sm text-gray-500">
            (Placeholder for more left content)
          </div>
        </SlideColumn>

        {/* Right Column (Sticky) */}
        <SlideColumn>
          {slide.imageUrl ? (
            <Image
              width={1440}
              height={1900}
              src={slide.imageUrl}
              alt={`${slide.title} visual representation`}
              className="w-full h-auto object-contain rounded-lg shadow-sm max-h-[60vh]" // Limit image height
            />
          ) : (
            <div className="flex items-center justify-center h-64 bg-gray-100 rounded-lg">
              <p className="text-pastel-text-subtle">
                No image for this section
              </p>
            </div>
          )}
          {/* Add more content here if needed */}
          <div className="mt-6 h-32 bg-gray-200 rounded flex items-center justify-center text-sm text-gray-500">
            (Placeholder for more right content)
          </div>
        </SlideColumn>
      </div>
    </section>
  );
};

export default SlideSection;


================================================================================
FILE: components/slider/slideData.ts
================================================================================

// @/component/slider/slideData.ts
export interface SlideContent {
    id: string;
    title: string;
    text: string;
    imageUrl?: string; // Optional image for the right column
    bgColor: string; // Background color for the slide section
  }

  export const slides: SlideContent[] = [
    {
      id: 'intro',
      title: 'Welcome to Our Story',
      text: 'This is the beginning. Scroll down to see how things progress. Notice how the columns behave as you scroll through this section.',
      imageUrl: '/assets/blast-off.png',
      bgColor: 'bg-pastel-primary' // Light Blue
    },
    {
      id: 'middle',
      title: 'The Developing Chapter',
      text: 'Here, things start to change. The content on the left might be longer than the image placeholder on the right, demonstrating the sticky effect more clearly. Keep scrolling!',
      imageUrl: '/assets/astro-2.png',
      bgColor: 'bg-pastel-secondary' // Pink
    },
    {
      id: 'end',
      title: 'Looking Ahead',
      text: 'This marks a new phase. We explore future possibilities. Sticky positioning allows key information or visuals to remain present as related details scroll by.',
      imageUrl: '/assets/astro-3.png',
      bgColor: 'bg-pastel-accent' // Mint Green
    },
    {
      id: 'extra',
      title: 'More Details',
      imageUrl: '/assets/astro-5.png',
      text: 'Adding some extra content here to ensure scrolling is significant enough to see the sticky effect properly on multiple sections. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
      // No image for this one to show variation
      bgColor: 'bg-indigo-100' // Different Pastel
    },
  ];


================================================================================
FILE: components/ui/Button.tsx
================================================================================

import React from 'react'
// import { cn } from '@/lib/utils'

import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

// Utility function for combining Tailwind classes
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger'
  size?: 'sm' | 'md' | 'lg'
  isLoading?: boolean
}

export default function Button({
  className,
  children,
  variant = 'primary',
  size = 'md',
  isLoading = false,
  disabled,
  ...props
}: ButtonProps) {
  const baseStyles =
    'font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none'

  const variants = {
    primary:
      'bg-purple-600 text-white hover:bg-purple-700 active:bg-purple-800',
    secondary:
      'bg-gray-200 text-gray-900 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-100 dark:hover:bg-gray-600',
    outline:
      'border border-gray-300 bg-transparent hover:bg-gray-100 dark:border-dark-border-medium dark:hover:bg-gray-800 dark:hover:text-gray-100 dark:text-gray-100',
    ghost:
      'bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-100 dark:text-gray-100',
    danger: 'bg-red-600 text-white hover:bg-red-700',
  }

  const sizes = {
    sm: 'h-8 px-3 text-xs rounded-md',
    md: 'h-10 px-4 py-2 text-sm rounded-md',
    lg: 'h-12 px-6 py-3 text-base rounded-lg',
  }

  return (
    <button
      className={cn(
        baseStyles,
        variants[variant],
        sizes[size],
        isLoading && 'opacity-70 cursor-not-allowed',
        className
      )}
      disabled={disabled || isLoading}
      {...props}
    >
      {isLoading ? (
        <div className="flex items-center justify-center">
          <svg
            className="animate-spin -ml-1 mr-2 h-4 w-4 text-current"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              className="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              strokeWidth="4"
            ></circle>
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
          <span>Loading...</span>
        </div>
      ) : (
        children
      )}
    </button>
  )
}


================================================================================
FILE: components/ui/PrimaryButton.tsx
================================================================================

// components/ui/PrimaryButton.tsx
import React from "react";
import clsx from "clsx";
import { twMerge } from "tailwind-merge";

interface PrimaryButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  children: React.ReactNode;
}

const PrimaryButton: React.FC<PrimaryButtonProps> = ({
  children,
  className,
  ...props
}) => {
  const baseStyles =
    "px-6 py-3 rounded-md font-semibold transition duration-300 ease-in-out";
  const colorStyles =
    "bg-mocha-mousse text-neutral-lightest hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-mocha-mousse focus:ring-opacity-50";
  // Consider adding subtle shadow: shadow-md hover:shadow-lg

  const mergedClasses = twMerge(clsx(baseStyles, colorStyles, className));

  return (
    <button className={mergedClasses} {...props}>
      {children}
    </button>
  );
};

export default PrimaryButton;


================================================================================
FILE: components/ui/footer.tsx
================================================================================

import { Timestamp } from "@/components/Timestamp";

export default function Footer() {
  return (
    <footer>
      <div className="px-4 lg:px-5">
        <div className="grid grid-cols-2 text-lg leading-none lg:text-xl lg:leading-none border-t border-current pt-4 pb-3 lg:pt-4 lg:pb-3 items-center">
          <div className="col-span-1">
            <nav className="ml-auto flex space-x-3 lg:space-x-4">
              <a
                href="https://twitter.com/samuelgoddard"
                target="_blank"
                rel="noopener noreferrer"
                className="block group a11y-focus"
              >
                <span className="block relative overflow-hidden">
                  Twitter{" "}
                  <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                    <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                  </span>
                </span>
              </a>
              <a
                href="https://www.linkedin.com/in/samirllama/"
                target="_blank"
                rel="noopener noreferrer"
                className="block group a11y-focus"
              >
                <span className="block relative overflow-hidden">
                  LinkedIn{" "}
                  <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                    <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                  </span>
                </span>
              </a>
              <a
                href="https://github.com/samirllama"
                target="_blank"
                rel="noopener noreferrer"
                className="block group a11y-focus"
              >
                <span className="block relative overflow-hidden">
                  Github{" "}
                  <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                    <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                  </span>
                </span>
              </a>
              <a
                href="mailto:hello@samgoddard.co.uk"
                className="block group a11y-focus"
              >
                <span className="block relative overflow-hidden">
                  Email{" "}
                  <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                    <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                  </span>
                </span>
              </a>
            </nav>
          </div>

          <div className="col-span-1 text-right flex justify-end">
            <button className="block group a11y-focus border-none outline-none focus:border-none focus:outline-none">
              <span className="block relative overflow-hidden">
                <span className="hidden lg:inline">Back To </span>Top
                <span className="absolute inset-0 w-full h-full flex items-center justify-start">
                  <span className="block transition-transform ease-in-out duration-[350ms] w-full h-[1px] bg-current translate-y-[-100%] translate-x-[-110%] lg:group-hover:translate-x-0"></span>
                </span>
              </span>
            </button>
          </div>
        </div>
      </div>
      <div className="text-center">
        <span className="hidden lg:inline">
          &copy; <Timestamp /> Samir.Coder. All rights reserved.
        </span>
      </div>
    </footer>
  );
}


================================================================================
FILE: components/ui/header.tsx
================================================================================

// components/ui/header.tsx

"use client"; // Needs client-side interactivity

import { useState } from "react";
import Link from "next/link";
import { Suspense } from "react";
import Logo from "./logo";
import MobileMenu from "./mobile-menu";
import DashboardButton from "../DashboardButton";
import ThemeToggle from "../ThemeToggle";
import { cn } from "@/lib/utils";

export default function HeaderMinimal() {
  return (
    <header
      className={cn(
        "fixed top-0 left-0 right-0 z-[100] transition-colors ease-[cubic-bezier([0.83,0,0.17,1])] duration-[500ms] delay-[50ms]",
        "selection:bg-[var(--color-accent)] selection:text-black",
        "bg-surface-page"
      )}
      data-testid="header-minimal"
    >
      <div className="px-4 lg:px-5">
        <div className="grid grid-cols-3 lg:grid-cols-4 text-xl leading-none lg:text-2xl lg:leading-none border-b border-b-mousse-terracota pt-4 pb-3 lg:pt-4 lg:pb-3 items-center">
          <div className="align-center text-2xl  font-cinzel-deco">
            Samir Lama
          </div>
          <div className="col-span-2 text-center hidden lg:flex justify-center items-center">
            <div className="relative flex overflow-hidden lg:max-w-[250px] xl:max-w-[300px] pb-[0.25rem]">
              <div className="marquee">
                <span className="mr-4">Software Engineer&nbsp;&nbsp;—</span>
                <span className="mr-4">Chicago Based&nbsp;&nbsp;—</span>
                <span className="mr-4">Web Developer&nbsp;&nbsp;—</span>

                <span className="mr-4">Software Engineer&nbsp;&nbsp;—</span>
                <span className="mr-4">Chicago Based&nbsp;&nbsp;—</span>
                <span className="mr-4">Web Developer&nbsp;&nbsp;—</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </header>
  );
}

export function HeaderWithScrollNav() {
  const [isOpen, setIsOpen] = useState(true);

  const toggleMenu = () => {
    setIsOpen(!isOpen);
  };

  return (
    <header
      className="bg-header border-b border-[var(--header-text)] text-[var(--header-text)] flex items-center py-3 relative"
      data-testid="header-bar-dropdown"
    >
      <div className="align-center text-2xl">Samir Lama</div>
      <div
        className="hamburger flex flex-col justify-center items-center cursor-pointer absolute top-[100%] left-1/2 transform -translate-x-1/2"
        onClick={toggleMenu}
      >
        <div className="w-8 h-0.5 bg-[var(--header-text)] mb-1"></div>
        <div className="w-8 h-0.5 bg-[var(--header-text)] mb-1"></div>
        <div className="w-8 h-0.5 bg-[var(--header-text)]"></div>
      </div>
      <nav
        className={`menu absolute top-full left-0 w-full bg-header transform ${
          isOpen ? "translate-y-0" : "-translate-y-full"
        } z-10`}
      >
        <ul className="list-none p-4 m-0">
          <li className="mb-2">
            <a
              href="#"
              className="text-[var(--header-text)] no-underline hover:underline"
            >
              Home
            </a>
          </li>
          <li className="mb-2">
            <a
              href="#"
              className="text-[var(--header-text)] no-underline hover:underline"
            >
              About
            </a>
          </li>
          <li className="mb-2">
            <a
              href="#"
              className="text-[var(--header-text)] no-underline hover:underline"
            >
              Services
            </a>
          </li>
          <li className="mb-2">
            <a
              href="#"
              className="text-[var(--header-text)] no-underline hover:underline"
            >
              Contact
            </a>
          </li>
        </ul>
      </nav>
    </header>
  );
}

// Define links centrally
const NAV_LINKS = [
  { href: "/about", label: "About" },
  { href: "/playbook", label: "Playbook" },
];

export function Header_() {
  return (
    <header
      className={cn(
        "sticky top-0 z-50 w-full", // Sticky positioning
        "border-b border-[rgb(var(--border-subtle-rgb))]", // Subtle border using theme variable
        "bg-[rgb(var(--header-bg-rgb))]/95 backdrop-blur-sm" // Background with transparency + blur
      )}
    >
      <div className="max-w-6xl mx-auto px-4 sm:px-6">
        {/* Content container */}
        <div className="flex items-center justify-between h-16">
          {/* Height and flex layout */}
          {/* Site branding with my name as Logo */}
          <div className="flex-shrink-0 mr-4">
            <Logo />
          </div>
          {/* Desktop navigation */}
          <nav className="hidden md:flex md:grow">
            <ul className="flex grow justify-start flex-wrap items-center gap-x-6 lg:gap-x-8">
              {/* Use gap for spacing */}
              {NAV_LINKS.map((link) => (
                <li key={link.label}>
                  <Link
                    href={link.href}
                    className="text-sm font-medium text-gray-600 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white transition duration-150 ease-in-out"
                  >
                    {link.label}
                  </Link>
                </li>
              ))}
            </ul>
          </nav>
          {/* Right side controls */}
          <div className="flex items-center gap-x-2 sm:gap-x-4">
            <ThemeToggle />
            {/* Auth Buttons / Links */}
            <div className="hidden sm:flex items-center gap-x-2">
              <Suspense fallback={<div>Loading...</div>}>
                {/* Keep suspense */}
                <DashboardButton />
              </Suspense>
            </div>
            {/* Mobile menu button */}
            <div className="md:hidden">
              <MobileMenu />
            </div>
          </div>
        </div>
      </div>
    </header>
  );
}


================================================================================
FILE: components/ui/logo.tsx
================================================================================

import Link from "next/link"
import Image from "next/image"
import LogoImg from "@/public/logo.svg"

export default function Logo() {
  return (
    <Link className="inline-flex" href="/" aria-label="ai.com">
      <Image
        className="max-w-none"
        src={LogoImg}
        width={38}
        height={38}
        priority
        alt="logo"
      />
    </Link>
  )
}


================================================================================
FILE: components/ui/mobile-menu.tsx
================================================================================

"use client";

import { useState, useRef, useEffect } from "react";
import Link from "next/link";
import { cn } from "@/lib/utils";

const LINKS = [
  { href: "/", label: "Home" },
  { href: "/about", label: "About" },
  { href: "/notes", label: "Notes" },
  { href: "/playbook", label: "Playbook" },
  { href: "/today-i-learned", label: "TIL" },
];

export default function MobileMenu() {
  const [mobileNavOpen, setMobileNavOpen] = useState<boolean>(false);
  const trigger = useRef<HTMLButtonElement>(null);
  const mobileNav = useRef<HTMLDivElement>(null);

  // close the mobile menu on click outside
  useEffect(() => {
    const clickHandler = ({ target }: { target: EventTarget | null }): void => {
      if (!mobileNav.current || !trigger.current) return;
      if (
        !mobileNavOpen ||
        mobileNav.current.contains(target as Node) ||
        trigger.current.contains(target as Node)
      )
        return;
      setMobileNavOpen(false);
    };
    document.addEventListener("click", clickHandler);
    return () => document.removeEventListener("click", clickHandler);
  });

  // close the mobile menu if the esc key is pressed
  useEffect(() => {
    const keyHandler = ({ keyCode }: { keyCode: number }): void => {
      if (!mobileNavOpen || keyCode !== 27) return;
      setMobileNavOpen(false);
    };
    document.addEventListener("keydown", keyHandler);
    return () => document.removeEventListener("keydown", keyHandler);
  });

  return (
    <div className="md:hidden flex items-center ml-4">
      {/* Hamburger button */}
      <button
        ref={trigger}
        className={cn(
          "hamburger", // Keep base class if needed for JS/CSS targeting
          mobileNavOpen && "active"
        )}
        type="button"
        aria-controls="mobile-nav"
        aria-expanded={mobileNavOpen}
        onClick={() => setMobileNavOpen(!mobileNavOpen)}
      >
        <span className="sr-only">Menu</span>
        <svg
          className="w-5 h-5 fill-current text-slate-300 hover:text-white transition duration-150 ease-in-out"
          viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg"
        >
          <rect y="2" width="20" height="2" rx="1" />
          <rect y="9" width="20" height="2" rx="1" />
          <rect y="16" width="20" height="2" rx="1" />
        </svg>
      </button>

      {/*Mobile navigation */}
      <nav
        id="mobile-nav"
        ref={mobileNav}
        className="absolute top-full z-20 left-0 w-full px-4 sm:px-6 overflow-hidden transition-all duration-300 ease-in-out"
        style={
          mobileNavOpen
            ? { maxHeight: mobileNav.current?.scrollHeight, opacity: 1 }
            : { maxHeight: 0, opacity: 0.8 }
        }
      >
        {/* Keep complex background/border for now, or simplify later */}
        <ul className="border border-transparent [background:linear-gradient(theme(colors.slate.900),_theme(colors.slate.900))_padding-box,_conic-gradient(theme(colors.slate.400),_theme(colors.slate.700)_25%,_theme(colors.slate.700)_75%,_theme(colors.slate.400)_100%)_border-box] rounded-lg px-4 py-1.5">
          {LINKS.map((link) => (
            <li key={link.label}>
              <Link
                className="flex font-medium text-sm text-slate-300 hover:text-white py-1.5"
                href={link.href}
                onClick={() => setMobileNavOpen(false)}
              >
                {link.label}
              </Link>
            </li>
          ))}
        </ul>
      </nav>
    </div>
  );
}


================================================================================
FILE: components/ui/swipe-header.tsx
================================================================================

// components/layout/swipe-header.tsx

"use client"; // Needs client-side interactivity

import { useState, useRef } from "react";
import Link from "next/link";
import { Suspense } from "react";
import Logo from "../ui/logo";
import ThemeToggle from "../ThemeToggle";
import DashboardButton from "../DashboardButton";
import { cn } from "@/lib/utils"; // cn utility
import { twMerge } from "tailwind-merge";

// === Potential Use Cases for Imported useEffect ===
// 1. Close menu on route change:
//    import { usePathname } from 'next/navigation';
//    const pathname = usePathname();
//    useEffect(() => {
//      setIsOpen(false);
//    }, [pathname]);
//
// 2. Calculate dynamic height or adjust styles on mount/state change:
//    useEffect(() => {
//      if (headerRef.current && isOpen) {
//        // Example: Log height or adjust based on content
//        // console.log('Menu height:', headerRef.current.scrollHeight);
//      }
//    }, [isOpen]); // Re-run when isOpen changes

// Define links centrally
const NAV_LINKS = [
  { href: "/about", label: "About" },
  { href: "/playbook", label: "Playbook" },
  { href: "/projects", label: "Projects" }, // Added a common portfolio link
  { href: "/contact", label: "Contact" }, // Added a common portfolio link
];

// Define the height of the expanded menu as a percentage of viewport height
const EXPANDED_HEIGHT_VH = 75; // 75vh

export default function SwipeHeader() {
  const [isOpen, setIsOpen] = useState(false);

  const headerRef = useRef<HTMLDivElement>(null); // Use the more specific type HTMLDivElement

  const toggleMenu = () => setIsOpen(!isOpen);

  const menuHeightClass = isOpen ? `h-[${EXPANDED_HEIGHT_VH}vh]` : "h-0";
  const menuTopClass = isOpen ? "top-0" : `-top-[${EXPANDED_HEIGHT_VH}vh]`;

  const headerBgClass = "bg-header";
  const textColorClass = "text-text-default";
  const borderColorClass = "border-border-default";

  // Color for the hamburger lines (black for now, using dark neutral from theme)
  const hamburgerLineColorClass = "bg-neutral-darkest"; // Resolves to #333333 based on theme

  // Tailwind classes for the two hamburger icon lines
  const hamburgerLineClasses = cn(
    "w-6 h-0.5 transition-transform duration-300 ease-in-out",
    hamburgerLineColorClass // Apply the line color
    // Add animation classes for when the menu is open if desired.
    // For the simple two lines from the screenshot, maybe just a slight rotate
    // or moving further apart, or no animation if you want them static.
    // Example: isOpen ? 'rotate-3' : ''
  );

  return (
    <>
      <div
        data-testid="header-fixed-bar"
        className={cn(
          "fixed top-0 left-0 right-0 z-50 flex justify-center items-center",
          "h-16",
          headerBgClass,
          borderColorClass,
          "border-b",
          "backdrop-blur-sm bg-opacity-95"
        )}
      >
        {/* Hamburger Button - Centered */}
        <button
          data-testid="header-hamburger-button"
          onClick={toggleMenu}
          className={cn(
            "flex flex-col items-center justify-between w-12 h-12 rounded-full",
            "focus:outline-none focus:ring-2 focus:ring-interactive-primary focus:ring-opacity-50",
            "z-50",
            "py-3"
          )}
          aria-label={isOpen ? "Close menu" : "Open menu"}
          aria-expanded={isOpen}
        >
          {/* Hamburger Icon Lines Container */}
          <div className="flex flex-col justify-between h-4 w-6">
            {/* Added data-test ids for lines */}
            <div
              data-testid="hamburger-line-top"
              className={hamburgerLineClasses}
            ></div>
            <div
              data-testid="hamburger-line-bottom"
              className={hamburgerLineClasses}
            ></div>
          </div>
        </button>
      </div>

      {/* Added data-test id */}
      <div
        data-testid="header-expanded-menu"
        ref={headerRef}
        className={cn(
          "fixed left-0 right-0 z-40 transition-all duration-500 ease-in-out",
          menuTopClass,
          menuHeightClass,
          headerBgClass,
          textColorClass,
          "overflow-y-auto",
          "shadow-xl",
          "flex flex-col items-center justify-center",
          "pt-20 pb-8"
        )}
      >
        {/* Content inside the Expanded Menu */}
        <div className="container mx-auto px-4 sm:px-6 flex flex-col items-center">
          {/* Logo */}
          <div data-testid="header-logo" className="mb-8">
            <Logo />
          </div>

          {/* Navigation Links */}
          <nav className="flex flex-col items-center mb-8 gap-y-6">
            {NAV_LINKS.map((link) => (
              <Link
                key={link.label}
                href={link.href}
                // Added data-test id
                data-testid={`header-nav-link-${link.label
                  .toLowerCase()
                  .replace(/\s+/g, "-")}`}
                className={cn(
                  "text-xl font-medium hover:text-interactive-primary transition-colors",
                  textColorClass
                )}
                onClick={() => setIsOpen(false)}
              >
                {link.label}
              </Link>
            ))}
          </nav>

          {/* Theme Toggle */}
          <div data-testid="header-theme-toggle" className="mb-6">
            <ThemeToggle />
          </div>

          {/* Dashboard Button/Auth Links */}
          <Suspense
            fallback={
              <div data-testid="header-dashboard-loading">Loading...</div>
            }
          >
            <DashboardButton data-testid="header-dashboard-button" />
          </Suspense>
        </div>
      </div>
      {/* Expanded Menu Panel */}
      <div
        ref={headerRef}
        className={cn(
          "fixed left-0 right-0 z-40 transition-all duration-500 ease-in-out",
          menuTopClass,
          menuHeightClass,
          headerBgClass, // Apply theme background to the expanded panel
          textColorClass, // Apply theme text color to the expanded panel
          "overflow-y-auto",
          "shadow-xl",
          "flex flex-col items-center justify-center",
          "pt-20 pb-8" // pt-20 to clear the fixed top bar (h-16 + some buffer)
        )}
      >
        {/* Content inside the Expanded Menu */}
        <div className="container mx-auto px-4 sm:px-6 flex flex-col items-center">
          {/* Logo */}
          <div className="mb-8">
            <Logo />
          </div>

          {/* Navigation Links */}
          <nav className="flex flex-col items-center mb-8 gap-y-6">
            {NAV_LINKS.map((link) => (
              <Link
                key={link.label}
                href={link.href}
                className={cn(
                  "text-xl font-medium hover:text-interactive-primary transition-colors",
                  textColorClass
                )}
                onClick={() => setIsOpen(false)}
              >
                {link.label}
              </Link>
            ))}
          </nav>

          {/* Theme Toggle */}
          <div className="mb-6">
            <ThemeToggle />
          </div>

          {/* Dashboard Button/Auth Links */}
          <Suspense fallback={<div>Loading...</div>}>
            <DashboardButton />
          </Suspense>
        </div>
      </div>
    </>
  );
}


================================================================================
FILE: components/ui/ui.module.css
================================================================================

/* Main header container */
.header {
  box-sizing: content-box;
  background: var(--background);
  border-block-start: 10px solid var(--primary-color);
  border-block-end: 1px solid var(--gray-lighter);
  box-shadow: 0 2px 10px var(--gray-light);
  position: sticky;
  inset-block-start: 0;
  height: var(--spacer);
  padding-inline: var(--spacer-small);

  font-family: var(--font-body);
  font-size: var(--font-size-medium);
  color: var(--text-color);
  font-weight: 400;
  -webkit-font-smoothing: antialiased;
}

/* Inner header container */
.header__inner {
  display: flex;
  justify-content: space-between;
  margin: auto;

  font-family: var(--font-body);
  font-size: var(--font-size-medium);
  font-weight: 400;
  color: var(--text-color);
  -webkit-font-smoothing: antialiased;
}

.nav {
  box-sizing: border-box;
  display: flex;
  flex-wrap: wrap;
  list-style: none;
  margin: 0;
  padding-inline-start: 0;
  gap: 20px;

  font-family: var(--font-body);
  font-size: var(--font-size-small);
  color: var(--text-color);
}

/* List item */
.navItem {
  display: grid;
  place-items: center;
  margin: 0;

  font-family: var(--font-body);
  font-size: var(--font-size-small);
  color: var(--text-color);

  -webkit-font-smoothing: antialiased;
}

/* Hamburger button */
.hamburger svg > *:nth-child(1),
.hamburger svg > *:nth-child(2),
.hamburger svg > *:nth-child(3) {
  transform-origin: center;
  transform: rotate(0deg);
}

.hamburger svg > *:nth-child(1) {
  transition: y 0.1s 0.25s ease-in,
    transform 0.22s cubic-bezier(0.55, 0.055, 0.675, 0.19), opacity 0.1s ease-in;
}

.hamburger svg > *:nth-child(2) {
  transition: transform 0.22s cubic-bezier(0.55, 0.055, 0.675, 0.19);
}

.hamburger svg > *:nth-child(3) {
  transition: y 0.1s 0.25s ease-in,
    transform 0.22s cubic-bezier(0.55, 0.055, 0.675, 0.19),
    width 0.1s 0.25s ease-in;
}

.hamburger.active svg > *:nth-child(1) {
  opacity: 0;
  y: 9;
  transform: rotate(225deg);
  transition: y 0.1s ease-out,
    transform 0.22s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1),
    opacity 0.1s 0.12s ease-out;
}

.hamburger.active svg > *:nth-child(2) {
  transform: rotate(225deg);
  transition: transform 0.22s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1);
}

.hamburger.active svg > *:nth-child(3) {
  y: 9;
  transform: rotate(135deg);
  transition: y 0.1s ease-out,
    transform 0.22s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1),
    width 0.1s ease-out;
}


================================================================================
FILE: db/index.ts
================================================================================

import { drizzle as drizzleNeon } from 'drizzle-orm/neon-http'
import { drizzle as drizzlePostgres } from 'drizzle-orm/node-postgres'
import { neon } from '@neondatabase/serverless'

import * as schema from './schema'

export const db = process.env.VERCEL
  ? drizzleNeon({
      client: neon(process.env.DATABASE_URL!),
      schema,
      casing: 'snake_case',
    })
  : drizzlePostgres(process.env.DATABASE_URL!, { schema, casing: 'snake_case' })


================================================================================
FILE: db/schema.ts
================================================================================

import { InferSelectModel, relations } from 'drizzle-orm'
import { pgTable, serial, text, timestamp, pgEnum } from 'drizzle-orm/pg-core'

// Enums for issue status and priority
export const statusEnum = pgEnum('status', [
  'backlog',
  'todo',
  'in_progress',
  'done',
])
export const priorityEnum = pgEnum('priority', ['low', 'medium', 'high'])

// Issues table
export const issues = pgTable('issues', {
  id: serial('id').primaryKey(),
  title: text('title').notNull(),
  description: text('description'),
  status: statusEnum('status').default('backlog').notNull(),
  priority: priorityEnum('priority').default('medium').notNull(),
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at').defaultNow().notNull(),
  userId: text('user_id').notNull(),
})

// Users table
export const users = pgTable('users', {
  id: text('id').primaryKey(),
  email: text('email').notNull().unique(),
  password: text('password').notNull(),
  createdAt: timestamp('created_at').defaultNow().notNull(),
})

// Relations between tables
export const issuesRelations = relations(issues, ({ one }) => ({
  user: one(users, {
    fields: [issues.userId],
    references: [users.id],
  }),
}))

export const usersRelations = relations(users, ({ many }) => ({
  issues: many(issues),
}))

// Types
export type Issue = InferSelectModel<typeof issues>
export type User = InferSelectModel<typeof users>

// Status and priority labels for display
export const ISSUE_STATUS = {
  backlog: { label: 'Backlog', value: 'backlog' },
  todo: { label: 'Todo', value: 'todo' },
  in_progress: { label: 'In Progress', value: 'in_progress' },
  done: { label: 'Done', value: 'done' },
}

export const ISSUE_PRIORITY = {
  low: { label: 'Low', value: 'low' },
  medium: { label: 'Medium', value: 'medium' },
  high: { label: 'High', value: 'high' },
}


================================================================================
FILE: eslint.config.mjs
================================================================================

import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;


================================================================================
FILE: mdx-components.tsx
================================================================================

// mdx-components.tsx
import type { MDXComponents } from "mdx/types";
import type { ComponentPropsWithoutRef } from "react";
import { cn } from "@/lib/utils";

// Define reusable gradient classes using Tailwind v3 utility classes
// Make sure primary/secondary are mapped in tailwind.config.ts
const gradientPrimaryText =
  "bg-gradient-to-r from-primary-500 to-secondary-500 dark:from-primary-400 dark:to-secondary-400 bg-clip-text text-transparent";
const gradientSecondaryText =
  "bg-gradient-to-r from-accent-500 to-primary-500 dark:from-accent-400 dark:to-primary-400 bg-clip-text text-transparent"; // Assumes accent is mapped

export function useMDXComponents(components: MDXComponents): MDXComponents {
  return {
    ...components,

    // Override h2 to apply primary gradient and base styles
    h2: ({ children, className, ...props }: ComponentPropsWithoutRef<"h2">) => (
      <h2
        // Apply Tailwind classes directly. Plugin handles base typography.
        className={cn(
          "mt-[2em] mb-[1em]", // Keep custom margins if desired
          gradientPrimaryText, // Apply the primary gradient
          className
        )}
        {...props}
      >
        {children}
      </h2>
    ),
    h3: ({ children, className, ...props }: ComponentPropsWithoutRef<"h3">) => (
      <h3
        className={cn(
          "mt-[1.8em] mb-[0.8em]", // Keep custom margins if desired
          gradientSecondaryText, // Apply the secondary gradient
          className
        )}
        {...props}
      >
        {children}
      </h3>
    ),

    // Override 'a' link element - rely on mdx.css for styling now
    a: ({ children, href, ...props }: ComponentPropsWithoutRef<"a">) => {
      const isExternal =
        href && (href.startsWith("http") || href.startsWith("//"));
      if (isExternal) {
        return (
          <a
            href={href}
            target="_blank"
            rel="noopener noreferrer"
            // Class applied for mdx.css to target, plugin handles base link style
            className="prose-a prose-a-external"
            {...props}
          >
            {children}
          </a>
        );
      }
      return (
        // Class applied for mdx.css to target
        <a href={href} className="prose-a prose-a-internal" {...props}>
          {children}
        </a>
      );
    },

    // Override hr to apply neon effect using Tailwind
    hr: ({ className, ...props }: ComponentPropsWithoutRef<"hr">) => (
      <hr
        className={cn(
          "my-12 h-0.5 border-none rounded", // Base structure & margin
          // Use Tailwind color utilities based on config mapping
          "bg-primary-500 dark:bg-primary-400",
          // Use CSS variables for the complex shadow
          "shadow-[0_0_10px_rgb(var(--primary-rgb)),0_0_20px_rgb(var(--primary-rgb)),0_0_30px_rgb(var(--accent-rgb))]",
          "animate-neonPulse",
          className
        )}
        {...props}
      />
    ),
  };
}


================================================================================
FILE: next.config.ts
================================================================================

// next.config.ts
import type { NextConfig } from "next";
import { PHASE_DEVELOPMENT_SERVER } from 'next/constants';
import createMDX from '@next/mdx';

// Import MDX Plugins ---
import remarkGfm from 'remark-gfm';
import rehypePrettyCode from 'rehype-pretty-code';
import type { Element } from 'hast';
import type { Options as PrettyCodeOptions } from 'rehype-pretty-code'; //

//  Configure rehype-pretty-code
const prettyCodeOptions: PrettyCodeOptions = {
  theme: {
    // Match dark theme base (slate-900)
    dark: 'github-dark', // Example: Use GitHub Dark theme
    // Add light theme if desired
    light: 'github-light', // Example: Use GitHub Light theme
  },

  onVisitLine(node: Element) {
    if (node.children.length === 0) {
      node.children = [{ type: 'text', value: ' ' }];
    }
  },
  onVisitHighlightedLine(node: Element) {
    node.properties = node.properties || {};
    const currentClasses = node.properties.className;

    if (Array.isArray(currentClasses)) {
      // Already an array, push the new class
      currentClasses.push('line--highlighted');
    } else if (typeof currentClasses === 'string') {
      // It's a string, create a new array containing the existing class and the new one
      node.properties.className = [currentClasses, 'line--highlighted'];
    } else {
      // It's null, undefined, or something else - create a new array with just our class
      node.properties.className = ['line--highlighted'];
    }
  },

  onVisitHighlightedChars(node: Element) {
    node.properties = node.properties || {};
    node.properties.className = ['word--highlighted'];
  },

};


//  Main Next.js Config Function ---
const nextConfig = (phase: string): NextConfig => {
  // Call createMdx INSIDE the function ---
  const withMDX = createMDX({
    extension: /\.mdx?$/,
    options: {
      remarkPlugins: [remarkGfm],
      rehypePlugins: [[rehypePrettyCode, prettyCodeOptions]],
    },
  });

  if (phase === PHASE_DEVELOPMENT_SERVER) {
    console.log('happy building session ;)');
  }

  // Define base config options
  const nextConfigOptions: NextConfig = {
    pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'md', 'mdx'],
    reactStrictMode: true,
    poweredByHeader: false,
    experimental: {
      dynamicIO: true,
      typedRoutes: true,
      // mdxRs: false, // Explicitly ensure Rust compiler is off if relying on @mdx-js/loader
    },
    typescript: {
      ignoreBuildErrors: true,
    },
    eslint: {
      ignoreDuringBuilds: true,
    },
    // Add other configs like CSP headers, images, redirects here later
  };

  return withMDX(nextConfigOptions);
};

export default nextConfig


================================================================================
FILE: package.json
================================================================================

{
  "name": "samir.codes",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "vitest"
  },
  "dependencies": {
    "@mdx-js/loader": "^3.1.0",
    "@mdx-js/react": "^3.1.0",
    "@react-three/drei": "^10.0.6",
    "@react-three/fiber": "^9.1.2",
    "@tailwindcss/aspect-ratio": "^0.4.2",
    "@tailwindcss/container-queries": "^0.1.1",
    "@types/mdx": "^2.0.13",
    "@types/uuid": "^10.0.0",
    "aos": "^2.3.4",
    "bcrypt": "^5.1.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "dotenv": "^16.4.7",
    "drizzle-orm": "^0.39.3",
    "gray-matter": "^4.0.3",
    "jose": "^6.0.6",
    "lucide-react": "^0.475.0",
    "nanoid": "^5.1.2",
    "next": "15.3.0-canary.29",
    "next-themes": "^0.4.6",
    "pg": "^8.13.3",
    "postgres": "^3.4.5",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hot-toast": "^2.5.2",
    "react-icons": "^5.5.0",
    "rehype-pretty-code": "^0.14.1",
    "remark-gfm": "^4.0.1",
    "swiper": "^11.2.6",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "three": "^0.175.0",
    "uuid": "^11.1.0",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@next/mdx": "^15.2.4",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/typography": "^0.5.16",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.2.0",
    "@types/aos": "^3.0.7",
    "@types/bcrypt": "^5.0.2",
    "@types/hast": "^3.0.4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/three": "^0.175.0",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.21",
    "drizzle-kit": "^0.30.4",
    "eslint": "^9",
    "eslint-config-next": "15.3.0-canary.29",
    "jsdom": "^26.0.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.1",
    "tsx": "^4.19.3",
    "typescript": "^5",
    "vite-tsconfig-paths": "^5.1.4",
    "vitest": "^3.1.1"
  },
  "packageManager": "pnpm@8.15.3+sha512.dd85cd6eca6417c6f73db32ba1eb4767ffb4cba4f5bf0727846722c92b6b9e56a2cc218b11385bbc2b21f18a16a67da77aceae9b61a0f56a1643b25e1fb6a605"
}


================================================================================
FILE: postcss.config.mjs
================================================================================

/* eslint-disable import/no-anonymous-default-export */

// postcss.config.mjs
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

export default config;


================================================================================
FILE: tailwind.config.ts
================================================================================

// tailwind.config.ts
import type { Config } from 'tailwindcss'
import typography from '@tailwindcss/typography'
import forms from '@tailwindcss/forms'
import aspectRatio from '@tailwindcss/aspect-ratio'
import containerQueries from '@tailwindcss/container-queries'


const config: Config = {
    content: [
        './components/**/*.{js,ts,jsx,tsx,mdx,css}',
        './app/**/*.{js,ts,jsx,tsx,mdx,css}',
    ],
    darkMode: 'class', // Using class-based dark mode
    theme: {
        extend: {
            position: {
                sticky: 'sticky',
                fixed: 'fixed',
                absolute: 'absolute',
                relative: 'relative',
                static: 'static',
            },

            colors: {
                'surface-page': 'var(--color-surface-page)',
                'surface-card': 'var(--color-surface-card)',
                'text-default': 'var(--color-text-default)',
                header: 'var(--color-header)',
                'text-secondary': 'var(--color-text-secondary)',
                'interactive-primary': 'var(--color-interactive-primary)',
                'interactive-secondary': 'var(--color-interactive-secondary)',
                'border-default': 'var(--color-border-default)',
                'button-text': 'var(--color-button-text)',
                'interactive-text': 'var(--color-interactive-text)',
                accent: 'var(--color-accent)',
                'light-grey': 'rgb(var(--color-light-grey-rgb))',
                'galactic-base': 'rgb(var(--color-galactic-base-rgb))',
                'mousse-terracotta': '#924622',
            },

            fontFamily: {
                'cal-sans': ['Cal Sans', 'sans-serif'],
                'cinzel': ['Cinzel', 'sans'],
                'cinzel-deco': ['Cinzel Decorative', 'sans'],
                mono: ["var(--font-geist-mono)", "ui-monospace", "monospace"],
                dancing: ['Dancing Script', 'cursive']
            },

            // Custom Shadows (Using CSS Variables) ---
            boxShadow: {
                'default': "var(--shadow-default)",
                "clay-light": `
                          inset 6px 6px 10px 0 rgba(var(--shadow-base-rgb), 0.2),
                          inset -6px -6px 10px 0 rgba(var(--shadow-highlight-rgb), 0.7),
                          10px 10px 20px 0 rgba(var(--shadow-outer-rgb), 0.2),
                          -4px -4px 12px 0 rgba(var(--shadow-highlight-rgb), 0.5)
                        `,
            },

            scrollSnapType: {
                y: 'y mandatory',
            },
            gridTemplateColumns: {
                'scroll-slide': '40fr 5fr 5fr 40fr',
            },
        },
    },
    plugins: [
        aspectRatio,
        containerQueries,
        forms,
        typography({
            className: 'mdx-prose',
        })
    ],
}
export default config


================================================================================
FILE: tsconfig.json
================================================================================

// tsconfig.json

{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "app/posts/[slug]/fibonacci-spiral.mdx"],
  "exclude": ["node_modules"]
}

