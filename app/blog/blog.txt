Directory Tree:
.
├── [slug]
│   ├── fibonacci-spiral
│   │   └── page.mdx
│   └── test-post
│       └── page.mdx
├── layout.tsx
└── page.tsx


================================================================================
FILE: [slug]/fibonacci-spiral/page.mdx
================================================================================

---
title: "Visualizing the Fibonacci Spiral with React & Canvas"
description: "An interactive exploration of the Fibonacci sequence visualized as a growing spiral using React Client Components and the HTML Canvas API."
date: "2025-04-15" # Adjust date as needed (YYYY-MM-DD)
author: "Samir Llama" # Adjust author if needed
tags:
  [
    "React",
    "Canvas",
    "JavaScript",
    "Animation",
    "Fibonacci",
    "Client Component",
  ]
---

{/_
NO MORE IMPORTS OR EXPORTS NEEDED HERE!
The content below is automatically passed as 'children' to the layout.
Frontmatter above is read by gray-matter in lib/blog.ts.
_/}

import FibonacciSpiral from "@/components/interactive/FibonacciSpiral"; // Keep imports for components used *in* the content

## The Beauty of the Fibonacci Sequence

The Fibonacci sequence is a fascinating mathematical concept where each number is the sum of the two preceding ones, usually starting with 0 and 1. So, it goes: 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on.

One of the most visually appealing representations of this sequence is the **Fibonacci spiral**. We can create this by drawing squares whose side lengths correspond to the Fibonacci numbers and then drawing quarter-circle arcs connecting the corners of these squares. The result is a beautiful logarithmic spiral that appears frequently in nature, from seashells to galaxies.

## Interactive Visualization

Below is an interactive visualization of the Fibonacci spiral built using React and the HTML Canvas API. It's a **Client Component** because it needs access to browser features (like the canvas) and uses React hooks (`useState`, `useEffect`) to manage the animation and user interaction.

You can adjust the number of terms in the Fibonacci sequence used to generate the spiral and watch it draw segment by segment.

{/* Embed the interactive Client Component here */}

<div className="my-8 flex justify-center">
  {/* Optional centering container */}
  <FibonacciSpiral />
</div>

### How it Works

1.  **Fibonacci Generation:** A simple function generates the required number of Fibonacci terms.
2.  **Canvas Setup:** A `canvas` element is rendered, and we get its 2D drawing context using `useRef`.
3.  **Drawing Logic:** The `drawSpiralAnimated` function calculates the position and radius for each arc based on the Fibonacci numbers and the current drawing direction (right, down, left, up). It uses `setTimeout` to create the animation effect, drawing one arc segment at a time.
4.  **Scaling:** The drawing scale is adjusted based on the number of terms to keep the spiral reasonably centered and visible within the canvas.
5.  **Client Component:** The `use client` directive at the top of the component file tells Next.js to handle this component differently, allowing it to use browser-specific APIs and hooks.

This example demonstrates how you can seamlessly integrate interactive, client-side components directly into your server-rendered MDX blog posts within the Next.js App Router.


================================================================================
FILE: [slug]/test-post/page.mdx
================================================================================

---
title: "Test Blog Post"
description: "Exploring the setup of this new MDX blog."
date: "2025-04-15" # Use YYYY-MM-DD format
author: "Samir Llama"
tags: ["Next.js", "MDX", "Web Development", "Meta"]
---

## Welcome to the Blog!

This is the first post written in MDX for this Next.js 15 project. It leverages the App Router's built-in MDX capabilities.

### Features

- **Markdown:** All your favorite Markdown syntax works.
- **JSX:** You can embed React components directly!
- **Styling:** Content is styled using `@tailwindcss/typography` via the `.mdx-prose` class defined in `mdx.css` and `theme.css`.
- **Syntax Highlighting:** Code blocks are highlighted using `rehype-pretty-code`.

### Code Example (JavaScript)

```javascript
function greet(name) {
  // This line should be highlighted if configured
  console.log(`Hello, ${name}! Welcome to MDX.`);
  return `Hello, ${name}!`;
}

const message = greet("Developer");
// Check the console!
```

### Code Example (CSS)

```css
/* Check theme.css and mdx.css for actual styles */
.mdx-prose {
  color: rgb(var(--foreground));
}

.mdx-prose a {
  color: rgb(var(--primary));
  text-decoration: underline;
}

/* Highlighted line style from mdx.css */
.line--highlighted {
  background-color: rgba(var(--primary), 0.1);
  box-shadow: inset 3px 0 0 0 rgb(var(--primary));
}
```


================================================================================
FILE: layout.tsx
================================================================================

// app/blog/[slug]/layout.tsx
import type { Metadata } from "next";
import { notFound } from "next/navigation";
import { getAllPostSlugs, getPostMetaBySlug } from "@/lib/blog";
import BlogLayout from "@/components/layouts/BlogLayout";

interface LayoutProps {
  children: React.ReactNode;
  params: {
    slug: string;
  };
}

// Generate static paths for all blog posts at build time
export async function generateStaticParams() {
  const slugs = getAllPostSlugs(); // Get all slugs ['fibonacci-spiral', 'test-post']
  return slugs.map((slug) => ({
    slug: slug,
  }));
}

// Generate metadata for each blog post page
export async function generateMetadata({
  params,
}: LayoutProps): Promise<Metadata> {
  const meta = getPostMetaBySlug(params.slug);

  if (!meta) {
    // If metadata isn't found, you could return default metadata
    // or potentially trigger a notFound() here if the slug is truly invalid,
    // although generateStaticParams should prevent invalid slugs during build.
    return {
      title: "Post Not Found",
      description: "This blog post could not be found.",
    };
  }

  return {
    title: meta.title,
    description: meta.description,
    // Add other metadata fields like openGraph images based on meta if needed
    // openGraph: { title: meta.title, description: meta.description, ... }
  };
}

export default function PostLayout({ children, params }: LayoutProps) {
  // const meta = getPostMetaBySlug(params.slug);  // Comment this out

  return <div>{children} </div>;
}

// This layout component fetches the metadata again (necessary for passing to BlogLayout)
// and wraps the children (the rendered MDX page content)
// export default function PostLayout({ children, params }: LayoutProps) {
//     const meta = getPostMetaBySlug(params.slug)

//     // If the slug is valid (because generateStaticParams found it) but
//     // metadata somehow fails to load, render notFound.
//     if (!meta) {
//         notFound()
//     }

//     return <BlogLayout meta={ meta }> { children } </BlogLayout>
// }


================================================================================
FILE: page.tsx
================================================================================

// app/blog/page.tsx
import type { Metadata } from "next";
import Link from "next/link";
import { Route } from "next";
import { getAllPostsMeta } from "@/lib/blog";
import { cn } from "@/lib/utils";

export const metadata: Metadata = {
  title: "Blog",
  description: "Thoughts and insights on technology, development, and more.",
};

export default async function BlogIndexPage() {
  const posts = getAllPostsMeta();
  return (
    <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12 md:py-16">
      <h1 className="h1 mb-4 text-center md:text-left">Blog</h1>
      <p className="text-lg text-slate-400 mb-10 md:mb-12 text-center md:text-left">
        {metadata.description}
      </p>
      {posts.length === 0 ? (
        <p className="text-center text-slate-400">
          No blog posts published yet. Check back soon!
        </p>
      ) : (
        <ul className="list-none p-0 m-0 space-y-10">
          {posts.map((post) => (
            <li
              key={post.slug}
              className="pb-10 border-b border-[rgb(var(--border-subtle-rgb))] dark:border-[rgb(var(--border-subtle-rgb))] last:pb-0 last:border-none"
            >
              <article>
                <Link
                  href={`/blog/${post.slug}` as Route} // Link to the dynamic route
                  className="block mb-2"
                >
                  <h2 className="h3 text-[rgb(var(--primary))] hover:text-[rgb(var(--secondary))] transition-colors duration-150 ease-in-out">
                    {post.title}
                  </h2>
                </Link>
                <p className="text-sm text-slate-500 dark:text-slate-400 mb-3">
                  <time dateTime={post.date}>
                    {new Date(post.date).toLocaleDateString("en-US", {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })}
                  </time>
                  {post.author && (
                    <span className="text-slate-600 dark:text-slate-500">
                      {" "}
                      by {post.author}
                    </span>
                  )}
                </p>
                {post.tags && post.tags.length > 0 && (
                  <div className="flex flex-wrap gap-2 mb-4">
                    {post.tags.map((tag) => (
                      <span
                        key={tag}
                        className={cn(
                          "inline-block text-xs font-medium rounded-full",
                          "px-2.5 py-0.5",
                          "bg-[rgba(var(--primary),0.1)] text-[rgb(var(--primary))]"
                        )}
                      >
                        {tag}
                      </span>
                    ))}
                  </div>
                )}
                <p className="text-slate-600 dark:text-slate-400 leading-relaxed mb-4">
                  {post.description}
                </p>
                <Link
                  href={`/blog/${post.slug}` as Route}
                  className="inline-flex items-center font-medium text-[rgb(var(--primary))] hover:text-[rgb(var(--secondary))] transition-colors duration-150 ease-in-out group"
                >
                  <span>Read more</span>
                  <span className="tracking-normal text-[rgb(var(--primary))] group-hover:translate-x-0.5 transition-transform duration-150 ease-in-out ml-1">
                    ->
                  </span>
                </Link>
              </article>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

