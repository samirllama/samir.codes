/* app/styles/globals.css (Updated for Tailwind v3) */

/* === Custom Font Definitions === */
@font-face {
  font-family: "MonaspaceNeon"; /* Must match the key in tailwind.config.ts */
  src: url("/fonts/MonaspaceNeon-Regular.woff2") format("woff2"); /* Adjust path and format */
  font-weight: normal; /* Or specify weight range if variable */
  font-style: normal;
  font-display: swap; /* Improves perceived performance */
}

@font-face {
  font-family: "MonaspaceArgon";
  src: url("/fonts/MonaspaceArgon-Regular.woff2") format("woff2");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "MonaspaceXenon"; /* MUST MATCH */
  src: url("/fonts/MonaspaceXenon-Regular.woff2") format("woff2");
}
@font-face {
  font-family: "MonaspaceRadon";
  src: url("/fonts/MonaspaceRadon-Regular.woff2") format("woff2");
}

/* === Tailwind v3 Directives  === */
@tailwind base;

/* === Base Layer Styles === */

@layer base {
  body,
  input {
    /* Default styles */
    background-color: var(--color-surface-page);
    --pf-opsz: 1;
    --pf-slnt: 0;
    --pf-wght: 1;
  }

  /* Detail Page Body Background */
  body[page-type="detail"] {
    background: var(--nerdy-gradient);
    background-attachment: fixed;
    /* Optional: Override base text color if gradient needs it */
    /* color: var(--some-other-color); */
  }

  /* ... other base styles (headings, etc.) ... */
}
@layer base {
  body,
  input {
    color: var(--color-text-default);
    font-family: var(--font-sans);
    font-feature-settings: "kern" on, "liga" on;
    font-size: var(--type-scale-step-0);
    font-style: normal;
    letter-spacing: normal; /* Base letter-spacing */
    line-height: 1.325; /* 132.5% */

    font-variation-settings: "opsz" var(--pf-opsz), "slnt" var(--pf-slnt),
      "wght" var(--pf-wght);
    background-color: var(--color-surface-page);

    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  body {
    overscroll-behavior: none;
  }

  body[page-type="detail"] {
    background: var(--nerdy-gradient);
    background-attachment: fixed;
  }

  @media screen and (min-width: 40em) {
    body,
    input {
      --pf-opsz: 20;
    }
  }
  @media screen and (min-width: 45em) {
    body,
    input {
      line-height: 1.4725;
      --pf-opsz: 40;
    } /* 147.25% */
  }
  @media screen and (min-width: 55em) {
    body,
    input {
      line-height: 1.5;
    } /* 150% */
  }
  @media screen and (min-width: 65em) {
    body,
    input {
      --pf-opsz: 80;
    }
  }
  @media screen and (min-width: 80em) {
    body,
    input {
      line-height: 1.45;
      --pf-opsz: 160;
    } /* 145% */
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p.welcome {
    --pf-opsz: 250;
  }
  @media screen and (min-width: 30em) {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    p.welcome {
      --pf-opsz: 400;
    }
  }
  @media screen and (min-width: 35em) {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    p.welcome {
      --pf-opsz: 600;
    }
  }
  @media screen and (min-width: 50em) {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    p.welcome {
      --pf-opsz: 850;
    }
  }
  @media screen and (min-width: 70em) {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    p.welcome {
      --pf-opsz: 1000;
    }
  }

  strong,
  bold {
    /* Use strong, avoid custom 'bold' tag */
    font-synthesis: none;
    --pf-wght: 700; /* Apply weight override via variable */
    /* Update variation settings */
    font-variation-settings: "opsz" var(--pf-opsz), "slnt" var(--pf-slnt),
      "wght" var(--pf-wght);
  }
  em,
  i,
  blockquote p {
    /* Use em */
    font-style: italic;
    font-synthesis: none;
    --pf-slnt: 10; /* Apply slant override via variable */
    /* Update variation settings */
    font-variation-settings: "opsz" var(--pf-opsz), "slnt" var(--pf-slnt),
      "wght" var(--pf-wght);
  }

  /* Heading Specific Styles --- */
  h1,
  h2,
  h3,
  h4 {
    padding-bottom: var(--spacing-xs);
    /* Apply font variation settings */
    font-variation-settings: "opsz" var(--pf-opsz), "slnt" var(--pf-slnt),
      "wght" var(--pf-wght);
  }

  h1 {
    font-size: var(--type-scale-step-5);
    line-height: var(--type-scale-step-5);
    padding-bottom: var(--spacing-lg);
    --pf-wght: 900; /* Override weight */
    font-variation-settings: /* Re-apply with new weight */ "opsz"
        var(--pf-opsz),
      "slnt" var(--pf-slnt), "wght" var(--pf-wght);
  }
  @media screen and (min-width: 40em) {
    h1 {
      line-height: calc(var(--type-scale-step-5) * 0.825);
    }
  }
  h1 span {
    /* Style spans *within* h1 if needed */
    --pf-wght: 100;
    font-variation-settings: /* Apply specifically */ "opsz" var(--pf-opsz),
      "slnt" var(--pf-slnt), "wght" var(--pf-wght);
  }

  h2 {
    font-size: var(--type-scale-step-3);
    line-height: var(--type-scale-step-3);
    --pf-wght: 100; /* Override weight */
    font-variation-settings: /* Re-apply */ "opsz" var(--pf-opsz),
      "slnt" var(--pf-slnt), "wght" var(--pf-wght);
  }

  h3 {
    font-size: var(--type-scale-step-2);
    line-height: var(--type-scale-step-2);
    --pf-wght: 700; /* Override weight */
    font-variation-settings: /* Re-apply */ "opsz" var(--pf-opsz),
      "slnt" var(--pf-slnt), "wght" var(--pf-wght);
  }

  h3 a {
    text-decoration-thickness: 0.025em;
  }

  h4 {
    font-size: var(--type-scale-step-0);
    line-height: var(--type-scale-step-0);
    letter-spacing: var(--tracking-wide); /* Use variable */
    text-transform: uppercase;
    --pf-wght: 560; /* Override weight */
    font-variation-settings: /* Re-apply */ "opsz" var(--pf-opsz),
      "slnt" var(--pf-slnt), "wght" var(--pf-wght);
  }
  h4 + p,
  h4 + ul.tags {
    /* Assuming .tags class might be used */
    margin-top: -0.5rem;
  }

  /* Figcaption / Button Font Size --- */
  figcaption,
  button {
    font-size: var(--type-scale-step--1);
  }
  figcaption {
    margin-bottom: var(--spacing-l);
  }

  * {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
  }
  a {
    color: inherit;
    text-decoration: none;
  }

  .hero-text {
    font-family: var(--font-cinzel), serif;
    line-height: 1.2;
    font-size: clamp(1.875rem, 0.82rem + 4.6vw, 5.625rem);
    letter-spacing: -0.025em;

    font-feature-settings: "ss01" 1;
  }

  .font-mono {
    letter-spacing: 0.05em !important;
  }

  .will-change-transform {
    transform: translateY(3.3446px) translateZ(0px);
    will-change: transform;
  }

  .mdx-prose {
    /* the correct semantic color vars defined in :root */
    /* MDX Prose Styles (Controlling Typography Plugin) --- */
    .mdx-prose {
      @apply max-w-none;
      --tw-prose-body: var(--color-text-default);
      --tw-prose-body: rgb(var(--color-text-default-rgb));
      --tw-prose-headings: rgb(var(--color-text-default-rgb));
      --tw-prose-lead: rgb(var(--color-text-muted-rgb));
      --tw-prose-links: rgb(
        var(--color-accent-primary-rgb)
      ); /* Using moth-orange */
      --tw-prose-bold: rgb(var(--color-text-default-rgb));
      --tw-prose-counters: rgb(var(--color-text-muted-rgb));
      --tw-prose-bullets: rgb(
        var(--color-accent-primary-rgb)
      ); /* Using moth-orange */
      --tw-prose-hr: rgb(
        var(--color-border-default-rgb)
      ); /* Using moth-mousse */
      --tw-prose-quotes: rgb(var(--color-text-muted-rgb));
      --tw-prose-quote-borders: rgb(var(--color-border-default-rgb));
      --tw-prose-captions: rgb(var(--color-text-muted-rgb));
      --tw-prose-code: rgb(
        var(--color-accent-secondary-rgb)
      ); /* Using deep-ochre */
      --tw-prose-pre-code: inherit; /* Let syntax highlighter handle */
      --tw-prose-pre-bg: rgb(
        var(--color-code-background-rgb)
      ); /* Using moth-brown */
      --tw-prose-th-borders: rgb(var(--color-border-default-rgb));
      --tw-prose-td-borders: rgb(
        var(--color-border-subtle-rgb)
      ); /* Using moth-brown */

      /* Define invert vars pointing to the same values, just in case */
      --tw-prose-invert-body: rgb(var(--color-text-default-rgb));
      --tw-prose-invert-headings: rgb(var(--color-text-default-rgb));
      --tw-prose-invert-lead: rgb(var(--color-text-muted-rgb));
      --tw-prose-invert-links: rgb(var(--color-accent-primary-rgb));
      --tw-prose-invert-bold: rgb(var(--color-text-default-rgb));
      --tw-prose-invert-counters: rgb(var(--color-text-muted-rgb));
      --tw-prose-invert-bullets: rgb(var(--color-accent-primary-rgb));
      --tw-prose-invert-hr: rgb(var(--color-border-default-rgb));
      --tw-prose-invert-quotes: rgb(var(--color-text-muted-rgb));
      --tw-prose-invert-quote-borders: rgb(var(--color-border-default-rgb));
      --tw-prose-invert-captions: rgb(var(--color-text-muted-rgb));
      --tw-prose-invert-code: rgb(var(--color-accent-secondary-rgb));
      --tw-prose-invert-pre-code: inherit;
      --tw-prose-invert-pre-bg: rgb(var(--color-code-background-rgb));
      --tw-prose-invert-th-borders: rgb(var(--color-border-default-rgb));
      --tw-prose-invert-td-borders: rgb(var(--color-border-subtle-rgb));
    }
  }
} /* End of @layer base */

@tailwind components;

/* === NEW Custom Components Layer === */
@layer components {
  /* Marquee (Used in Header) */
  @keyframes marquee {
    0% {
      transform: translateX(0);
    }
    to {
      transform: translateX(-100%);
    }
  }
  .marquee {
    animation: marquee 30s linear infinite;
    white-space: nowrap;
    font-family: var(--font-dancing-script), serif;
  }

  /* Hamburger Menu Base (Used by ui.module.css / MobileMenu) */
  .hamburger div {
    transition: all 0.3s ease;
  }
  .menu {
    transition: transform 0.3s ease;
  }

  .project_list {
    @media screen and (min-width: 55em) {
      li.project {
        display: grid;
        grid-gap: 0 5%;
        grid-template-columns: 33% 62%;
        grid-template-areas: "head body";
        padding: var(--spacing-2xl) 0;
      }
    }
  }

  .project_header {
    grid-area: head;
    padding-top: var(--spacing-lg);

    > h2 {
      font-size: var(--type-scale-step-3);
    }
  }

  .project_body {
    grid-area: body;
    padding-top: var(--spacing-l);
  }

  .portfolio_intro {
    font-size: var(--type-scale-step-2);
    line-height: calc(var(--type-scale-step-2) * 1.125);
    max-width: 50ch;

    > a {
      color: #333;
      text-decoration-thickness: 0.05em;
      text-underline-offset: 0.07em;
      transition: color 0.25s ease, text-decoration-color 0.25s ease;
    }
  }

  .detail-page-background {
    background: radial-gradient(
        circle at 35% 50%,
        rgba(5, 88, 255, 0.15),
        transparent 50%
      ),
      radial-gradient(
        circle at 65% 50%,
        rgba(128, 0, 74, 0.15),
        transparent 50%
      ),
      radial-gradient(
        circle at 50% 65%,
        rgba(74, 128, 0, 0.15),
        transparent 50%
      );
    background-attachment: fixed;
  }
} /* End of @layer components */

@tailwind utilities;

/* === Custom Style Imports (AFTER Tailwind directives for v3 JIT) === */
@import "./theme.css"; /* Defines CSS variables, custom component styles */
@import "./utility-patterns.css";
@import "./animations.css";
@import "./mdx.css";

/* === lighting effect with pseudo-elements === */
.bg-lighting::before {
  content: "";
  position: absolute;
  top: -20%;
  left: -20%;
  width: 140%;
  height: 140%;
  background: radial-gradient(
    circle at 50% 50%,
    rgba(255, 255, 255, 0.2) 0%,
    transparent 60%
  );
  pointer-events: none;
}

/* === Custom @layer definitions  === */

@layer utilities {
  .rtl {
    direction: rtl;
  }
}

/* === Transition Styles === */

/* Style the old view during transition */
::view-transition-old(root) {
  animation: exit-fade 0.25s ease-out forwards;
  /* Add 'forwards' to keep the final state */
}

/* Style the new view during transition */
::view-transition-new(root) {
  animation: enter-fade 0.25s ease-out 0.1s backwards;
  /* Delay slightly, start from the first keyframe state */
}

@keyframes exit-fade {
  from {
    opacity: 1;
    transform: scale(1);
  }
  to {
    opacity: 0;
    transform: scale(0.98); /* Slight shrink */
  }
}

@keyframes enter-fade {
  from {
    opacity: 0;
    transform: scale(1.02); /* Slight grow */
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}
