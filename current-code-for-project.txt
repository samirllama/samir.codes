Directory Tree:
.
├── .gitignore
├── BACKUP_layout.tsx
├── README.md
├── app
│   ├── (auth)
│   │   ├── layout.tsx
│   │   ├── signin
│   │   │   └── page.tsx
│   │   └── signup
│   │       └── page.tsx
│   ├── (default)
│   │   ├── about
│   │   │   └── page.tsx
│   │   ├── layout.tsx
│   │   ├── page.tsx
│   │   └── timeline
│   │       └── page.tsx
│   ├── actions
│   │   └── auth.ts
│   ├── blog
│   │   ├── [slug]
│   │   │   ├── fibonacci-spiral
│   │   │   │   └── page.mdx
│   │   │   ├── layout.tsx
│   │   │   └── test-page.mdx
│   │   ├── blog.txt
│   │   └── page.tsx
│   ├── layout.tsx
│   ├── playbook
│   │   ├── first_mdx
│   │   │   └── page.mdx
│   │   ├── mdx-modules.txt
│   │   ├── page.tsx
│   │   └── web-security
│   │       └── page.mdx
│   ├── styles
│   │   ├── animations.css
│   │   ├── current-code-status.txt
│   │   ├── globals.css
│   │   ├── mdx.css
│   │   ├── theme.css
│   │   └── utility-patterns.css
│   └── test
│       └── page.tsx
├── components
│   ├── DashboardButton.tsx
│   ├── PostItem.tsx
│   ├── RotatingNebula.tsx
│   ├── ScrollSlide.tsx
│   ├── ThemeToggle.tsx
│   ├── Timestamp.tsx
│   ├── animate.tsx
│   ├── feature
│   │   ├── feature.module.css
│   │   └── feature.tsx
│   ├── fibonacci-spiral
│   │   └── FibonacciSpiral.tsx
│   ├── galactic
│   │   ├── galactic.module.css
│   │   ├── layout.tsx
│   │   └── page.tsx
│   ├── hero
│   │   └── Hero.tsx
│   ├── highlight
│   │   ├── highlight.module.css
│   │   └── highlighter.tsx
│   ├── hooks
│   │   └── mouse-position.ts
│   ├── layouts
│   │   ├── ArticleLayout.tsx
│   │   └── BlogLayout.tsx
│   ├── particles
│   │   └── Particles.tsx
│   ├── projects
│   │   ├── project.module.css
│   │   └── projects.tsx
│   ├── slider
│   │   ├── SlideColumn.tsx
│   │   ├── SlideSection.tsx
│   │   └── slideData.ts
│   ├── typing
│   │   ├── TypingEffect.tsx
│   │   └── typing.module.css
│   └── ui
│       ├── Button.tsx
│       ├── footer.tsx
│       ├── header.tsx
│       ├── logo.tsx
│       ├── mobile-menu.tsx
│       └── ui.module.css
├── db
│   ├── index.ts
│   └── schema.ts
├── eslint.config.mjs
├── mdx-components.tsx
├── next.config.ts
├── package.json
├── postcss.config.mjs
├── tailwind.config.ts
└── tsconfig.json


================================================================================
FILE: .gitignore
================================================================================

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# notes
notes*


================================================================================
FILE: BACKUP_layout.tsx
================================================================================

// app/playbook/layout.tsx

import type { Metadata } from "next";

export const metadata: Metadata = {
  title: {
    template: "%s | Samir's Playbook",
    default: "Playbook",
  },
  description:
    "Engineering Playbook with insights on web development, security, and technology",
};

// This layout now simply renders its children.
// The overall site structure (header/footer/main padding) comes from app/(default)/layout.tsx
// The specific two-column layout for articles comes from ArticleLayout used within the .mdx files.
export default function PlaybookLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return <>{children}</>; // Render children directly
}


================================================================================
FILE: README.md
================================================================================

# Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

## Analysis of Each Layer and Its Role

1. `<section className="relative min-h-screen">` (Layer 0 - Positioning Context):
   Purpose: This is the main container for the entire Hero section.
   relative: Crucially, this establishes the positioning context for all the absolutely positioned elements within it (Particles, Illustration). Without this, they would be positioned relative to the viewport or another ancestor.
   min-h-screen: Ensures the section takes up at least the full height of the viewport, providing vertical space for the background elements to fill, even if the text content itself is short.

2. `<Particles className="absolute inset-0 -z-10" quantity={40} />` (Layer 1 - Dynamic Background):
   Purpose: Provides a dynamic, subtly moving background effect that adds texture, depth, and a "techy" or "spacey" feel. It reacts slightly to mouse movement.
   absolute inset-0: Stretches the particle canvas container to fill the bounds of the parent `<section>`. Because the section has min-h-screen, the particles cover at least the full viewport area behind the content.
   -z-10: Places this layer behind the main content (z-10) and also potentially behind other background elements if they have a higher negative z-index (though currently, the glow is also -z-10).
   `quantity={40}`: Controls the density of the particles.

3. `<div containing <Image src={Illustration} ... />` (Layer 2 - Static Glow/Shape):
   Purpose: This layer adds a static visual element, specifically a soft glow or shape emanating from the bottom center. Given the filename glow-bottom.svg, its primary role is likely to create a soft, ambient light effect anchoring the bottom of the hero section, possibly highlighting the area where content might transition out or where CTAs sit. It adds visual interest and depth without the constant motion of the particles.
   `absolute bottom-0 left-1/2 transform -translate-x-1/2`: Precisely positions the container of the image at the bottom center of the parent `<section>`.
   pointer-events-none: Ensures this visual layer doesn't interfere with mouse interactions (like clicking buttons that might overlap it).
   -z-10: Places it on the same visual layer as the particles (or potentially slightly above/below depending on browser rendering order for same z-index). It sits behind the main content.
   Image component: Renders the actual SVG (@/public/glow-bottom.svg). max-w-none prevents Tailwind's default max-width constraints from shrinking the SVG. The large width={2146} suggests the SVG is designed to be wide and potentially extend beyond the main content area horizontally, creating a broad glow effect.

4. `<div className="relative z-10 max-w-6xl mx-auto px-4 sm:px-6">`: (Layer 3 - Content Area)
   Purpose: This container holds the actual visible content (logo, headings, typing effect, buttons).
   max-w-6xl mx-auto px-4 sm:px-6: Centers the content horizontally and limits its maximum width for readability, creating margins on wider screens.
   relative z-10: Ensures this content block sits on top of the background layers (Particles and Illustration which have z-index: -10).

### The Combined UI Experience

- The layers work together to create a deep, visually engaging, and modern hero section:
- The dark base (from the body style) sets the mood.
- The Particles provide a subtle, dynamic, and interactive background texture filling the screen height.
- The Glow Illustration adds a static, focused light source or shape at the bottom, grounding the design and adding visual depth without competing directly with the particles.
- The Content sits clearly on top, centered and well-padded, ensuring readability against the layered background effects.
- The AOS animations (applied to content elements) further enhance the dynamic feel as the user scrolls or the page loads.
- This multi-layered approach creates a sophisticated visual hierarchy common in modern web design, especially for tech-focused sites, balancing dynamic elements with static visuals and clear content presentation.

--

# Project Analysis: Samir.Codes (Next.js 15)

This document provides an analysis of the `samir.codes` project codebase, focusing on its architecture, technologies, configuration, and key features.

## 1. High-Level Summary

- **Core Technologies:** Next.js 15 (Canary), React 19, TypeScript, Tailwind CSS 4, pnpm.
- **Architecture:** Utilizes the Next.js App Router for routing and layout management. Employs a mix of Server Components and Client Components. Server Actions are used for backend logic like authentication.
- **Styling:** Primarily uses Tailwind CSS 4, leveraging its utility classes. Integrates CSS variables defined in `app/styles/theme.css` for theming (light/dark modes via `next-themes`). CSS Modules (`*.module.css`) are used for some component-specific styles. Global styles and animations are defined in `app/styles/`.
- **Content:** Features standard pages (Home, About), a blog/posts section, an "Engineering Playbook" section leveraging MDX with custom components and syntax highlighting (`rehype-pretty-code`), and authentication flows (Sign In/Sign Up).
- **Database:** Integrates with a PostgreSQL database using Drizzle ORM (`db/schema.ts`, `db/index.ts`) for user and potentially other data (e.g., `issues` schema defined but not used in provided pages).
- **Key Features:**
  - App Router with Route Groups (`(auth)`, `(default)`) and nested layouts.
  - Server Actions for form handling and authentication (`app/actions/auth.ts`).
  - MDX support for content pages (`/playbook`) with custom component rendering (`mdx-components.tsx`) and code highlighting.
  - Client-side interactivity using React hooks (`useState`, `useEffect`, `useRef`) in various components (`Particles`, `FibonacciSpiral`, `TypingEffect`, `Highlighter`, etc.).
  - Theme switching (light/dark) via `next-themes`.
  - Visual effects using `aos` for scroll animations, `three`/`@react-three/fiber` for 3D elements (`RotatingNebula`), and custom canvas animations (`Particles`).
  - Component library (`Swiper`) used for carousels (`ProjectsCarousel`).

## 2. Project Structure & Routing (App Router)

- **Routing:** The project uses the Next.js App Router located in the `app/` directory.
- **Route Groups:**
  - `(auth)`: Groups authentication-related pages (`/signin`, `/signup`) under a specific layout (`app/(auth)/layout.tsx`) which includes a `RotatingNebula` background.
  - `(default)`: Groups the main application pages (`/`, `/about`, `/timeline`) under a standard layout (`app/(default)/layout.tsx`) that includes the main `Header` and `Footer`.
- **Main Routes & Pages:**
  - `/`: `app/(default)/page.tsx` (Home page, renders `Hero`, `Features`, `ProjectsCarousel`).
  - `/about`: `app/(default)/about/page.tsx` (Currently displays a "Changelog" title and uses `PostItem` - might be placeholder content).
  - `/timeline`: `app/(default)/timeline/page.tsx` (Renders `SlideSection` components for a vertical scrolling experience).
  - `/signin`: `app/(auth)/signin/page.tsx` (Sign-in form).
  - `/signup`: `app/(auth)/signup/page.tsx` (Placeholder sign-up page).
  - `/posts`: `app/posts/page.tsx` (Lists posts, likely reading from filesystem via `lib/posts`).
  - `/posts/fibonacci-spiral`: `app/posts/fibonacci-spiral/page.tsx` (Example post page rendering the `FibonacciSpiral` component).
  - `/playbook`: `app/playbook/page.tsx` (Index page for MDX articles, lists posts from `lib/posts`).
  - `/playbook/*`: MDX pages like `app/playbook/first_mdx/page.mdx` and `app/playbook/web-security/page.mdx`. These use `ArticleLayout` and custom MDX components.
- **Layouts:** Nested layouts are used effectively:
  - `app/layout.tsx`: Root layout setting up HTML structure, fonts (`Geist`), `ThemeProvider`, and base body styles.
  - `app/(default)/layout.tsx`: Adds `Header`, `Footer`, and AOS animation initialization (`Animate`).
  - `app/(auth)/layout.tsx`: Provides a distinct background (`RotatingNebula`) and padding for auth pages.
  - `app/playbook/layout.tsx`: Simple layout wrapper for playbook pages (main structure comes from `(default)` layout). MDX pages within use `ArticleLayout`.

## 3. Component Structure

- **UI Primitives (`components/ui`):** Reusable elements like `Button.tsx`, `Header.tsx`, `Footer.tsx`, `Logo.tsx`, `MobileMenu.tsx`. Styled with Tailwind and some CSS Modules (`ui.module.css`).
- **Layout Components (`components/layouts`):** `ArticleLayout.tsx` provides a two-column structure (main content + sidebar with ToC/metadata) specifically for MDX pages.
- **Feature Components:**
  - `Hero.tsx`: Main hero section with `Particles` and `TypingEffect`.
  - `feature/feature.tsx`: Displays a highlighted image section.
  - `projects/projects.tsx`: A carousel (`Swiper`) showcasing projects with `Particles` and `Highlighter` effects.
  - `fibonacci-spiral/FibonacciSpiral.tsx`: Interactive canvas animation (Client Component).
  - `RotatingNebula.tsx`: 3D sphere with texture using `@react-three/fiber` (Client Component).
  - `particles/Particles.tsx`: Animated canvas background reacting to mouse movement (Client Component).
  - `typing/TypingEffect.tsx`: Animates typing text (Client Component).
  - `slider/*`: Components (`SlideSection`, `SlideColumn`) for the `/timeline` page's vertical scroll effect.
  - `highlight/highlighter.tsx`: Creates a mouse-aware highlighting effect for child components.
- **Utility/Hooks:**
  - `hooks/mouse-position.ts`: Custom hook to track mouse coordinates.
  - `animate.tsx`: Initializes AOS library.
  - `ThemeToggle.tsx`: Button to switch between light/dark themes.
  - `Timestamp.tsx`: Displays the current year (Client Component).
- **Interaction:** Components interact primarily through props. Server Actions handle form submissions (`auth.ts`). Client components manage their own state or use shared context (`next-themes`).

## 4. Key Configurations

- **`next.config.ts`:**

  - **MDX:** Configured using `@next/mdx` with `remark-gfm` and `rehype-pretty-code` (theme: `github-dark`, custom line/word highlighting hooks).
  - **Page Extensions:** Includes `.md` and `.mdx` allowing these files to be treated as pages.
  - **Experimental:** `typedRoutes: true` enabled for type-safe linking. `dynamicIO: true` is also present.
  - **Build Settings:** `typescript.ignoreBuildErrors: true` and `eslint.ignoreDuringBuilds: true` are enabled (Note: Should ideally be `false` for production builds).
  - **React Strict Mode:** Enabled (`reactStrictMode: true`).

- **`tsconfig.json`:**

  - **Strict Mode:** `strict: true` enforces strong type checking.
  - **Module Resolution:** Uses `moduleResolution: "bundler"`, the recommended setting for modern Node.js/TypeScript projects with bundlers like Next.js.
  - **Path Aliases:** Configured with `baseUrl: "."` and `paths: { "@/*": ["./*"] }`, allowing imports like `@/components/...`.
  - **Target/Lib:** Modern settings (`ES2017`, `esnext`, `dom`).
  - **JSX:** `jsx: "preserve"` as required by Next.js.

- **`tailwind.config.ts`:**

  - **Tailwind Version:** Uses Tailwind CSS v4 (`@tailwindcss/postcss`).
  - **Dark Mode:** Configured with `darkMode: 'class'`, managed by `next-themes`.
  - **Content:** Correctly configured to scan `app` and `components` directories.
  - **Theme Extensions:**
    - **Colors:** Extends the theme to use CSS variables defined in `app/styles/theme.css` (e.g., `primary: 'rgb(var(--primary) / <alpha-value>)'`). This allows the theme (light/dark) defined in CSS to drive Tailwind colors. Includes semantic names like `primary`, `secondary`, `accent`, `background`, `foreground`, and mappings for `gray` and `dark` mode specifics.
    - **Box Shadow:** Adds a custom `clay-dark` shadow.
    - **Typography:** Uses `clamp()` for responsive font sizes.
  - **Plugins:** Integrates `@tailwindcss/typography` (configured for `.mdx-prose` class), `@tailwindcss/forms`, `@tailwindcss/aspect-ratio`, `@tailwindcss/container-queries`, and `tailwindcss-animate`.

- **`postcss.config.mjs`:**

  - Includes `@tailwindcss/postcss` (required for Tailwind 4) and `autoprefixer`.

- **Styling Files (`app/styles/`):**
  - `globals.css`: Imports Tailwind layers and custom CSS files in the correct order. Defines base HTML/body styles using CSS variables.
  - `theme.css`: Central definition for CSS variables (colors, spacing, typography) for both light (`:root`) and dark (`.dark`) themes. Uses `@layer base` and `@layer components`.
  - `utility-patterns.css`: Defines custom utility classes (e.g., `.btn`, `.form-input`) using CSS variables.
  - `animations.css`: Defines keyframes (`@keyframes`) and animation utility classes (`.animate-*`).
  - `mdx.css`: Provides specific styling for elements within the `.prose` / `.mdx-prose` class, often targeting elements generated by Markdown/MDX (like links, code blocks styled by `rehype-pretty-code`).

## 5. Key Features & Patterns

- **Server Components:** Most pages and layouts are Server Components, allowing server-side data fetching (e.g., `getAllPostsMeta` in `playbook/page.tsx`) and reducing client-side JavaScript.
- **Client Components:** Used for interactive elements requiring hooks (`useState`, `useEffect`, event listeners) like `Particles`, `RotatingNebula`, `FibonacciSpiral`, `TypingEffect`, `ThemeToggle`, `ProjectsCarousel`, `Highlighter`, `MobileMenu`. Marked with `"use client"`.
- **Server Actions:** Used for authentication (`app/actions/auth.ts`). Actions run on the server, receive form data, perform validation (with `zod`), interact with the database/session logic (`lib/session`, `lib/dal`), and handle redirects.
- **Data Fetching:**
  - **Server-Side:** Primarily through Server Actions for mutations and inferred filesystem access (`lib/posts`) for static content metadata within Server Components.
  - **Database:** Drizzle ORM is configured (`db/index.ts`, `db/schema.ts`) for database interactions (though direct usage isn't shown in the provided page/component files beyond the auth actions).
- **State Management:**
  - **Local Component State:** Managed using React hooks (`useState`, `useRef`) within Client Components.
  - **Theme State:** Handled globally by `next-themes`.
- **Styling Strategy:** A hybrid approach combining:
  - Tailwind utility classes for general layout and styling.
  - CSS variables (`app/styles/theme.css`) for centralized theme definition (colors, spacing) used by both Tailwind (`tailwind.config.ts`) and custom CSS.
  - CSS Modules (`*.module.css`) for component-scoped styles where needed (e.g., `projects.module.css`, `typing.module.css`).
  - Global CSS (`app/styles/globals.css`, `animations.css`, `mdx.css`) for base styles, animations, and MDX prose styling.
  - `cn` utility (`clsx` + `tailwind-merge`) for conditional class application.
- **MDX Integration:** Leverages `@next/mdx` for rendering `.mdx` files as pages. Uses frontmatter for metadata, `rehype-pretty-code` for syntax highlighting, and `mdx-components.tsx` to map Markdown elements to custom styled React components.
- **TypeScript Usage:** Project uses TypeScript throughout. Custom types are defined in `db/schema.ts` (e.g., `Issue`, `User`) using Drizzle's `InferSelectModel`. Zod schemas (`SignInSchema`, `SignUpSchema` in `auth.ts`) define data shapes and validation rules. Interfaces are used for component props (e.g., `ArticleLayoutProps`, `ParticlesProps`).

## 6. Potential Issues & Areas for Improvement

- **Build Configuration:** `ignoreBuildErrors: true` for TypeScript and ESLint in `next.config.ts` should be set to `false` and any errors resolved before deploying to production.
- **Styling Consistency:** The project uses multiple styling methods (Tailwind, CSS Modules, Global CSS, CSS Variables). While functional, ensuring consistency and clear boundaries for when to use each method can improve maintainability.
- **Testing:** `vitest` is listed as a dev dependency, but no actual tests are included in the provided files. Adding unit, integration, and potentially end-to-end tests would improve code quality and reliability.
- **Error Handling:** Server Action error handling is basic. Consider more specific error handling and user feedback mechanisms. Error boundaries in React could also be beneficial.
- **Accessibility (A11y):** While some ARIA attributes are used, a thorough accessibility audit would be recommended to ensure compliance and usability for all users.
- **Performance:** Components like `Particles` and `RotatingNebula` can be resource-intensive. Profiling and optimization might be necessary, especially on lower-end devices. Ensure Next.js Image optimization is used correctly for all images.
- **Database Schema:** The `issues` table is defined in `db/schema.ts` but doesn't appear to be used in the provided application code. It might be leftover from a previous feature or intended for future use.
- **Code Duplication:** Some styling patterns (e.g., HighlighterItem vs HighlighterItem02) might be refactorable into more reusable components or utilities.


================================================================================
FILE: app/(auth)/layout.tsx
================================================================================

// (auth)/layout.tsx

import RotatingNebula from "@/components/RotatingNebula";

export default function AuthLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <main className="grow">
      {/* Nebula Background Container (Fixed Fullscreen) */}
      {/* <div
        className="fixed inset-0 -z-20 overflow-hidden pointer-events-none opacity-50 md:opacity-60"
        aria-hidden="true"
      > */}
      {/* Content Area */}
      <section>
        <div className="relative z-10 max-w-6xl mx-auto px-4 sm:px-6">
          <div
            className="absolute inset-0 -z-10 overflow-hidden pointer-events-none -ml-28 -mr-28"
            aria-hidden="true"
          >
            <RotatingNebula
              textureUrl="/textures/nebula-blue-purple.jpg"
              rotationSpeed={0.0008}
              // No className needed here anymore for basic sizing
              // className="w-full h-full" // <--- REMOVED
            />
          </div>
          <div className="pt-32 pb-12 md:pt-40 md:pb-20">{children}</div>
        </div>
      </section>
    </main>
  );
}


================================================================================
FILE: app/(auth)/signin/page.tsx
================================================================================


import Link from 'next/link';
import Image from "next/image"
import AuthLogo from '@/public/logo.svg';
import { cn } from '@/lib/utils';

export const metadata = {
  title: 'Sign In - Samir.Codes', // Updated title
  description: 'Sign in to your account',
};

export default function SignIn() {
  return (
    <>
      {/* Page header (Keep as is for now) */}
      <div className="max-w-3xl mx-auto text-center pb-12">
      <Image
        className="max-w-none"
        src={AuthLogo}
        width={38}
        height={38}
        priority
        alt="logo"
      />
        <h1 className="h2 bg-clip-text text-transparent bg-gradient-to-r from-slate-200/60 via-slate-200 to-slate-200/60">
          Sign in to your account
        </h1>
      </div>

      {/* --- Form Container: Apply Claymorphism --- */}
      <div
        className={
          // Base layout & sizing
          "max-w-1/2 mx-auto " +
          // Claymorphism styles
          "bg-slate-800/80 " + // Slightly transparent base to interact with nebula? Or solid bg-slate-800
          "rounded-3xl " +     // Generous rounding
          "p-6 sm:p-8 " +      // Padding inside the container
          "shadow-clay-dark-soft " + // Apply the custom shadow
          "backdrop-blur-sm"     // Optional: Add blur if using transparent bg
        }
      >
        {/* Form content goes here - Keep existing form for now */}
        <form>
          <div className="space-y-4">
            <div>
              <label className="block text-sm text-slate-300 font-medium mb-1" htmlFor="email">Email</label>
              {/* Input styling will be addressed next */}
              <input id="email" className="form-input w-full" type="email" required />
            </div>
            <div>
              <div className="flex justify-between">
                <label className="block text-sm text-slate-300 font-medium mb-1" htmlFor="password">Password</label>
                <Link className="text-sm font-medium text-primary hover:text-purple-400 transition duration-150 ease-in-out ml-2" href="/reset-password">Forgot?</Link>
              </div>
              {/* Input styling will be addressed next */}
              <input id="password" className="form-input w-full" type="password" autoComplete="on" required />
            </div>
          </div>
          <div className="mt-6">
            {/* Button styling will be addressed next */}
            <button className="btn text-sm text-white bg-primary hover:bg-purple-700 w-full shadow-sm group">
              Sign In <span className="tracking-normal text-purple-300 group-hover:translate-x-0.5 transition-transform duration-150 ease-in-out ml-1">-></span>
            </button>
          </div>
        </form>

        {/* Footer links inside the container */}
        <div className="text-center mt-6"> {/* Increased margin slightly */}
          <div className="text-sm text-slate-400">
            Don't have an account? <Link className="font-medium text-primary hover:text-purple-400 transition duration-150 ease-in-out" href="/signup">Sign up</Link>
          </div>
        </div>

        {/* Divider (Keep as is for now) */}
        <div className="flex items-center my-6">
          <div className="border-t border-slate-700 grow mr-3" aria-hidden="true" /> {/* Adjusted color slightly */}
          <div className="text-sm text-slate-500 italic">or</div>
          <div className="border-t border-slate-700 grow ml-3" aria-hidden="true" /> {/* Adjusted color slightly */}
        </div>

   {/* Social login */}
   <div className="flex space-x-3">
          {/* Twitter Button */}
          <button
            className={cn( "btn-sm",  "w-full h-9",               "relative group","border",
              // Use CSS Variables for colors in the gradient border
              "border-transparent", // Make base border transparent
              "bg-slate-900", // Set the background color directly
              "bg-clip-padding", // Clip background to padding box (padding-box keyword)
              // Apply the conic gradient border using background-image on the border itself
              // This requires careful layering or pseudo-elements usually.
              // A simpler approach is a pseudo-element overlay:
              "before:absolute before:inset-[-1px] before:-z-10", // Position pseudo-element slightly outside, behind
              "before:rounded-full", // Match button rounding
              "before:bg-[conic-gradient(var(--color-slate-400),var(--color-slate-700)_25%,var(--color-slate-700)_75%,var(--color-slate-400)_100%)]", // Conic gradient on pseudo-element
              // Original hover/text styles
              "text-slate-300 hover:text-white transition duration-150 ease-in-out"
              // Removed the complex arbitrary [background:...]
              // Removed the second before pseudo-element for the overlay as bg-slate-900 handles it
            )}
          >
            <span className="relative z-10"> {/* Ensure icon is above background */}
              <span className="sr-only">Continue with Twitter</span>
              {/* Twitter SVG */}
              <svg className="fill-current" xmlns="http://www.w3.org/2000/svg" width="14" height="12">
                 <path d="m4.34 0 2.995 3.836L10.801 0h2.103L8.311 5.084 13.714 12H9.482L6.169 7.806 2.375 12H.271l4.915-5.436L0 0h4.34Zm-.635 1.155H2.457l7.607 9.627h1.165L3.705 1.155Z" />
              </svg>
            </span>
          </button>

          {/* GitHub Button - Apply the same refactored classes */}
          <button
             className={cn(
              "btn-sm",
              "w-full h-9",
              "relative group",
              "border border-transparent",
              "bg-slate-900 bg-clip-padding",
              "before:absolute before:inset-[-1px] before:-z-10",
              "before:rounded-full",
              "before:bg-[conic-gradient(var(--color-slate-400),var(--color-slate-700)_25%,var(--color-slate-700)_75%,var(--color-slate-400)_100%)]",
              "text-slate-300 hover:text-white transition duration-150 ease-in-out"
            )}
          >
            <span className="relative z-10">
              <span className="sr-only">Continue with GitHub</span>
              {/* GitHub SVG */}
              <svg className="fill-current" xmlns="http://www.w3.org/2000/svg" width="16" height="15">
                 <path d="M7.488 0C3.37 0 0 3.37 0 7.488c0 3.276 2.153 6.084 5.148 7.113.374.094.468-.187.468-.374v-1.31c-2.06.467-2.527-.936-2.527-.936-.375-.843-.843-1.124-.843-1.124-.655-.468.094-.468.094-.468.749.094 1.123.75 1.123.75.655 1.216 1.778.842 2.153.654.093-.468.28-.842.468-1.03-1.685-.186-3.37-.842-3.37-3.743 0-.843.281-1.498.75-1.966-.094-.187-.375-.936.093-1.965 0 0 .655-.187 2.059.749a6.035 6.035 0 0 1 1.872-.281c.655 0 1.31.093 1.872.28 1.404-.935 2.059-.748 2.059-.748.374 1.03.187 1.778.094 1.965.468.562.748 1.217.748 1.966 0 2.901-1.778 3.463-3.463 3.65.281.375.562.843.562 1.498v2.059c0 .187.093.468.561.374 2.996-1.03 5.148-3.837 5.148-7.113C14.976 3.37 11.606 0 7.488 0Z" />
               </svg>
            </span>
          </button>
        </div>
      </div>
      {/* --- End Form Container --- */}
    </>
  );
}


================================================================================
FILE: app/(auth)/signup/page.tsx
================================================================================

const Signup = () => {
    return 'signup'
  }

  export default Signup


================================================================================
FILE: app/(default)/about/page.tsx
================================================================================

// app/changelog/page.tsx (Example)

import type { Metadata } from "next";
import Image from 'next/image';
import Illustration from "@/public/page-illustration.svg";
import Particles from '@/components/particles/Particles';
import PostItem from '@/components/PostItem';
import { getAllPostsMeta } from '@/lib/posts';

export const metadata: Metadata = {
  title: "About - Samir.Codes",
  description: "About Samir and his experience.",
};

export default async function AboutPage() {
  // Fetch posts using your function (modify if needed for 'About' dir)
  const posts = getAllPostsMeta();

  return (
    <>
      <section className="relative">
        {/* Backgrounds (Keep or adapt from Project 2) */}
        <div className="absolute flex items-center justify-center top-0 -translate-y-1/2 left-1/2 -translate-x-1/2 pointer-events-none -z-10 w-[800px] aspect-square" aria-hidden="true">
          <div className="absolute inset-0 translate-z-0 bg-purple-500 rounded-full blur-[120px] opacity-30"></div>
          <div className="absolute w-64 h-64 translate-z-0 bg-purple-400 rounded-full blur-[80px] opacity-70"></div>
        </div>
        {/* Use your Particles component */}
        <Particles className="absolute inset-0 h-96 -z-10" quantity={15} />
        <div className="md:block absolute left-1/2 -translate-x-1/2 -mt-16 blur-2xl opacity-90 pointer-events-none -z-10" aria-hidden="true">
          <Image src={Illustration} className="max-w-none" width={1440} height={427} alt="Page Illustration" />
        </div>

        {/* Content Area */}
        <div className="max-w-6xl mx-auto px-4 sm:px-6">
          <div className="pt-32 pb-12 md:pt-40 md:pb-20">
            {/* Page header */}
            <div className="text-center pb-12 md:pb-20">
              <h1 className="h1 bg-clip-text text-transparent bg-gradient-to-r from-slate-200/60 via-slate-200 to-slate-200/60 pb-4">
                Changelog {/* Updated Title */}
              </h1>
              <div className="max-w-3xl mx-auto">
                <p className="text-lg text-slate-400">
                  New updates and improvements to the site and projects. {/* Updated Subtitle */}
                </p>
              </div>
            </div>

            {/* Post List */}
            <div className="max-w-3xl mx-auto">
              <div className="relative">
                {/* Decorative timeline line (Adapted from Project 2) */}
                {/* Note: The animate-shine likely needs keyframes defined globally */}
                {/* <div className="absolute h-full top-4 left-[2px] w-0.5 bg-slate-800 [mask-image:_linear-gradient(0deg,transparent,theme(colors.white)_150px,theme(colors.white))] -z-10 overflow-hidden after:absolute after:h-4 after:top-0 after:-translate-y-full after:left-0 after:w-0.5 after:bg-[linear-gradient(180deg,_transparent,_theme(colors.purple.500/.65)_25%,_theme(colors.purple.200)_50%,_theme(colors.purple.500/.65)_75%,_transparent)] after:animate-shine" aria-hidden="true"></div> */}

                {/* Render Post Items */}
                {posts.length === 0 ? (
                   <p className="text-center text-slate-400">No changelog entries yet.</p>
                ) : (
                   posts.map((post) => (
                     <PostItem
                       key={post.slug}
                       baseUrl="/changelog" // Or "/playbook" depending on context
                       {...post}
                       // Pass an image prop if your PostMeta includes it or you fetch it
                       // image={post.image}
                     />
                   ))
                )}
              </div>
            </div>

            {/* Optional Pagination */}
            {/* ... */}

          </div>
        </div>
      </section>
      {/* Optional CTA */}
      {/* <Cta /> */}
    </>
  );
}


================================================================================
FILE: app/(default)/layout.tsx
================================================================================

import "aos/dist/aos.css";
import Header from "@/components/ui/header";
import Footer from "@/components/ui/footer";
import Animate from "@/components/animate";

export default function DefaultLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      <Animate />
      <Header />

      <main className="grow">{children}</main>
      <Footer />
    </>
  );
}


================================================================================
FILE: app/(default)/page.tsx
================================================================================

// app/page.tsx

import Hero from "@/components/hero/Hero";
import Features from "@/components/feature/feature";
import ProjectsCarousel from "@/components/projects/projects";

export default function Home() {
  return (
    <>
      <Hero />
      {/* <TypingEffect
        items={myHobbies}
        interval={4000}
        paragraphClassName="text-3xl md:text-4xl font-light mt-4 text-center"
      /> */}
      <Features />
      <ProjectsCarousel />
    </>
  );
}


================================================================================
FILE: app/(default)/timeline/page.tsx
================================================================================

// app/changelog/page.tsx (Example)

import type { Metadata } from "next";

import { slides } from "@/components/slider/slideData";
import SlideSection from "../../../components/slider/SlideSection";

export const metadata: Metadata = {
  title: "About - Samir.Codes",
  description: "About Samir and his experience.",
};

export default async function SliderPager() {
  return (
    <>
      {/* <div className="w-full overflow-x-hidden"></div> */}
      <div className="w-full overflow-x-hidden">
        {slides.map((slide) => (
          <SlideSection key={slide.id} slide={slide} />
        ))}
      </div>
    </>
  );
}


================================================================================
FILE: app/actions/auth.ts
================================================================================

'use server'

import { z } from 'zod'
import {
  verifyPassword,
  createSession,
  createUser,
  deleteSession,
} from '@/lib/session'
import { getUserByEmail } from '@/lib/dal'
import { mockDelay } from '@/lib/utils'
import { redirect } from 'next/navigation'

// Define Zod schema for signin validation
const SignInSchema = z.object({
  email: z.string().min(1, 'Email is required').email('Invalid email format'),
  password: z.string().min(1, 'Password is required'),
})

// Define Zod schema for signup validation
const SignUpSchema = z
  .object({
    email: z.string().min(1, 'Email is required').email('Invalid email format'),
    password: z.string().min(6, 'Password must be at least 6 characters'),
    confirmPassword: z.string().min(1, 'Please confirm your password'),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ['confirmPassword'],
  })

export type SignInData = z.infer<typeof SignInSchema>
export type SignUpData = z.infer<typeof SignUpSchema>

export type ActionResponse = {
  success: boolean
  message: string
  errors?: Record<string, string[]>
  error?: string
}

export async function signIn(formData: FormData): Promise<ActionResponse> {
  try {
    // Add a small delay to simulate network latency
    await mockDelay(700)

    // Extract data from form
    const data = {
      email: formData.get('email') as string,
      password: formData.get('password') as string,
    }

    // Validate with Zod
    const validationResult = SignInSchema.safeParse(data)
    if (!validationResult.success) {
      return {
        success: false,
        message: 'Validation failed',
        errors: validationResult.error.flatten().fieldErrors,
      }
    }

    // Find user by email
    const user = await getUserByEmail(data.email)
    if (!user) {
      return {
        success: false,
        message: 'Invalid email or password',
        errors: {
          email: ['Invalid email or password'],
        },
      }
    }

    // Verify password
    const isPasswordValid = await verifyPassword(data.password, user.password)
    if (!isPasswordValid) {
      return {
        success: false,
        message: 'Invalid email or password',
        errors: {
          password: ['Invalid email or password'],
        },
      }
    }

    // Create session
    await createSession(user.id)

    return {
      success: true,
      message: 'Signed in successfully',
    }
  } catch (error) {
    console.error('Sign in error:', error)
    return {
      success: false,
      message: 'An error occurred while signing in',
      error: 'Failed to sign in',
    }
  }
}

export async function signUp(formData: FormData): Promise<ActionResponse> {
  try {
    // Add a small delay to simulate network latency
    await mockDelay(700)

    // Extract data from form
    const data = {
      email: formData.get('email') as string,
      password: formData.get('password') as string,
      confirmPassword: formData.get('confirmPassword') as string,
    }

    // Validate with Zod
    const validationResult = SignUpSchema.safeParse(data)
    if (!validationResult.success) {
      return {
        success: false,
        message: 'Validation failed',
        errors: validationResult.error.flatten().fieldErrors,
      }
    }

    // Check if user already exists
    const existingUser = await getUserByEmail(data.email)
    if (existingUser) {
      return {
        success: false,
        message: 'User with this email already exists',
        errors: {
          email: ['User with this email already exists'],
        },
      }
    }

    // Create new user
    const user = await createUser(data.email, data.password)
    if (!user) {
      return {
        success: false,
        message: 'Failed to create user',
        error: 'Failed to create user',
      }
    }

    // Create session for the newly registered user
    await createSession(user.id)

    return {
      success: true,
      message: 'Account created successfully',
    }
  } catch (error) {
    console.error('Sign up error:', error)
    return {
      success: false,
      message: 'An error occurred while creating your account',
      error: 'Failed to create account',
    }
  }
}

export async function signOut(): Promise<void> {
  try {
    await mockDelay(300)
    await deleteSession()
  } catch (error) {
    console.error('Sign out error:', error)
    throw new Error('Failed to sign out')
  } finally {
    redirect('/signin')
  }
}


================================================================================
FILE: app/blog/[slug]/fibonacci-spiral/page.mdx
================================================================================

---
title: "Visualizing the Fibonacci Spiral with React & Canvas"
description: "An interactive exploration of the Fibonacci sequence visualized as a growing spiral using React Client Components and the HTML Canvas API."
date: "2025-04-15" # Adjust date as needed (YYYY-MM-DD)
author: "Samir Llama" # Adjust author if needed
tags:
  [
    "React",
    "Canvas",
    "JavaScript",
    "Animation",
    "Fibonacci",
    "Client Component",
  ]
---

{/_
NO MORE IMPORTS OR EXPORTS NEEDED HERE!
The content below is automatically passed as 'children' to the layout.
Frontmatter above is read by gray-matter in lib/blog.ts.
_/}

import FibonacciSpiral from "@/components/interactive/FibonacciSpiral"; // Keep imports for components used *in* the content

## The Beauty of the Fibonacci Sequence

The Fibonacci sequence is a fascinating mathematical concept where each number is the sum of the two preceding ones, usually starting with 0 and 1. So, it goes: 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on.

One of the most visually appealing representations of this sequence is the **Fibonacci spiral**. We can create this by drawing squares whose side lengths correspond to the Fibonacci numbers and then drawing quarter-circle arcs connecting the corners of these squares. The result is a beautiful logarithmic spiral that appears frequently in nature, from seashells to galaxies.

## Interactive Visualization

Below is an interactive visualization of the Fibonacci spiral built using React and the HTML Canvas API. It's a **Client Component** because it needs access to browser features (like the canvas) and uses React hooks (`useState`, `useEffect`) to manage the animation and user interaction.

You can adjust the number of terms in the Fibonacci sequence used to generate the spiral and watch it draw segment by segment.

{/* Embed the interactive Client Component here */}

<div className="my-8 flex justify-center">
  {/* Optional centering container */}
  <FibonacciSpiral />
</div>

### How it Works

1.  **Fibonacci Generation:** A simple function generates the required number of Fibonacci terms.
2.  **Canvas Setup:** A `canvas` element is rendered, and we get its 2D drawing context using `useRef`.
3.  **Drawing Logic:** The `drawSpiralAnimated` function calculates the position and radius for each arc based on the Fibonacci numbers and the current drawing direction (right, down, left, up). It uses `setTimeout` to create the animation effect, drawing one arc segment at a time.
4.  **Scaling:** The drawing scale is adjusted based on the number of terms to keep the spiral reasonably centered and visible within the canvas.
5.  **Client Component:** The `use client` directive at the top of the component file tells Next.js to handle this component differently, allowing it to use browser-specific APIs and hooks.

This example demonstrates how you can seamlessly integrate interactive, client-side components directly into your server-rendered MDX blog posts within the Next.js App Router.


================================================================================
FILE: app/blog/[slug]/layout.tsx
================================================================================

// app/blog/[slug]/layout.tsx
import type { Metadata } from "next";
import { notFound } from "next/navigation";
import { getAllPostSlugs, getPostMetaBySlug } from "@/lib/blog";
import BlogLayout from "@/components/layouts/BlogLayout";

interface LayoutProps {
  children: React.ReactNode;
  params: {
    slug: string;
  };
}

export async function generateStaticParams() {
  const slugs = getAllPostSlugs();
  return slugs.map((slug) => ({
    slug: slug,
  }));
}

export async function generateMetadata({
  params,
}: LayoutProps): Promise<Metadata> {
  console.log("generateMetadata called with params:", params); // Add this
  const meta = getPostMetaBySlug(params.slug);

  if (!meta) {
    return {
      title: "Post Not Found",
      description: "This blog post could not be found.",
    };
  }

  return {
    title: meta.title,
    description: meta.description,
  };
}

export default function PostLayout({ children, params }: LayoutProps) {
  console.log("PostLayout called with params:", params); // Add this
  const meta = getPostMetaBySlug(params.slug);

  if (!meta) {
    notFound();
  }

  return <BlogLayout meta={meta}>{children}</BlogLayout>;
}


================================================================================
FILE: app/blog/[slug]/test-page.mdx
================================================================================

---
title: "Test Blog Post"
description: "Exploring the setup of this new MDX blog."
date: "2025-04-15" # Use YYYY-MM-DD format
author: "Samir Llama"
tags: ["Next.js", "MDX", "Web Development", "Meta"]
---

## Welcome to the Blog!

This is the first post written in MDX for this Next.js 15 project. It leverages the App Router's built-in MDX capabilities.

### Features

- **Markdown:** All your favorite Markdown syntax works.
- **JSX:** You can embed React components directly!
- **Styling:** Content is styled using `@tailwindcss/typography` via the `.mdx-prose` class defined in `mdx.css` and `theme.css`.
- **Syntax Highlighting:** Code blocks are highlighted using `rehype-pretty-code`.

### Code Example (JavaScript)

```javascript
function greet(name) {
  // This line should be highlighted if configured
  console.log(`Hello, ${name}! Welcome to MDX.`);
  return `Hello, ${name}!`;
}

const message = greet("Developer");
// Check the console!
```

### Code Example (CSS)

```css
/* Check theme.css and mdx.css for actual styles */
.mdx-prose {
  color: rgb(var(--foreground));
}

.mdx-prose a {
  color: rgb(var(--primary));
  text-decoration: underline;
}

/* Highlighted line style from mdx.css */
.line--highlighted {
  background-color: rgba(var(--primary), 0.1);
  box-shadow: inset 3px 0 0 0 rgb(var(--primary));
}
```


================================================================================
FILE: app/blog/blog.txt
================================================================================

Directory Tree:
.
├── [slug]
│   ├── fibonacci-spiral
│   │   └── page.mdx
│   └── test-post
│       └── page.mdx
├── layout.tsx
└── page.tsx


================================================================================
FILE: [slug]/fibonacci-spiral/page.mdx
================================================================================

---
title: "Visualizing the Fibonacci Spiral with React & Canvas"
description: "An interactive exploration of the Fibonacci sequence visualized as a growing spiral using React Client Components and the HTML Canvas API."
date: "2025-04-15" # Adjust date as needed (YYYY-MM-DD)
author: "Samir Llama" # Adjust author if needed
tags:
  [
    "React",
    "Canvas",
    "JavaScript",
    "Animation",
    "Fibonacci",
    "Client Component",
  ]
---

{/_
NO MORE IMPORTS OR EXPORTS NEEDED HERE!
The content below is automatically passed as 'children' to the layout.
Frontmatter above is read by gray-matter in lib/blog.ts.
_/}

import FibonacciSpiral from "@/components/interactive/FibonacciSpiral"; // Keep imports for components used *in* the content

## The Beauty of the Fibonacci Sequence

The Fibonacci sequence is a fascinating mathematical concept where each number is the sum of the two preceding ones, usually starting with 0 and 1. So, it goes: 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on.

One of the most visually appealing representations of this sequence is the **Fibonacci spiral**. We can create this by drawing squares whose side lengths correspond to the Fibonacci numbers and then drawing quarter-circle arcs connecting the corners of these squares. The result is a beautiful logarithmic spiral that appears frequently in nature, from seashells to galaxies.

## Interactive Visualization

Below is an interactive visualization of the Fibonacci spiral built using React and the HTML Canvas API. It's a **Client Component** because it needs access to browser features (like the canvas) and uses React hooks (`useState`, `useEffect`) to manage the animation and user interaction.

You can adjust the number of terms in the Fibonacci sequence used to generate the spiral and watch it draw segment by segment.

{/* Embed the interactive Client Component here */}

<div className="my-8 flex justify-center">
  {/* Optional centering container */}
  <FibonacciSpiral />
</div>

### How it Works

1.  **Fibonacci Generation:** A simple function generates the required number of Fibonacci terms.
2.  **Canvas Setup:** A `canvas` element is rendered, and we get its 2D drawing context using `useRef`.
3.  **Drawing Logic:** The `drawSpiralAnimated` function calculates the position and radius for each arc based on the Fibonacci numbers and the current drawing direction (right, down, left, up). It uses `setTimeout` to create the animation effect, drawing one arc segment at a time.
4.  **Scaling:** The drawing scale is adjusted based on the number of terms to keep the spiral reasonably centered and visible within the canvas.
5.  **Client Component:** The `use client` directive at the top of the component file tells Next.js to handle this component differently, allowing it to use browser-specific APIs and hooks.

This example demonstrates how you can seamlessly integrate interactive, client-side components directly into your server-rendered MDX blog posts within the Next.js App Router.


================================================================================
FILE: [slug]/test-post/page.mdx
================================================================================

---
title: "Test Blog Post"
description: "Exploring the setup of this new MDX blog."
date: "2025-04-15" # Use YYYY-MM-DD format
author: "Samir Llama"
tags: ["Next.js", "MDX", "Web Development", "Meta"]
---

## Welcome to the Blog!

This is the first post written in MDX for this Next.js 15 project. It leverages the App Router's built-in MDX capabilities.

### Features

- **Markdown:** All your favorite Markdown syntax works.
- **JSX:** You can embed React components directly!
- **Styling:** Content is styled using `@tailwindcss/typography` via the `.mdx-prose` class defined in `mdx.css` and `theme.css`.
- **Syntax Highlighting:** Code blocks are highlighted using `rehype-pretty-code`.

### Code Example (JavaScript)

```javascript
function greet(name) {
  // This line should be highlighted if configured
  console.log(`Hello, ${name}! Welcome to MDX.`);
  return `Hello, ${name}!`;
}

const message = greet("Developer");
// Check the console!
```

### Code Example (CSS)

```css
/* Check theme.css and mdx.css for actual styles */
.mdx-prose {
  color: rgb(var(--foreground));
}

.mdx-prose a {
  color: rgb(var(--primary));
  text-decoration: underline;
}

/* Highlighted line style from mdx.css */
.line--highlighted {
  background-color: rgba(var(--primary), 0.1);
  box-shadow: inset 3px 0 0 0 rgb(var(--primary));
}
```


================================================================================
FILE: layout.tsx
================================================================================

// app/blog/[slug]/layout.tsx
import type { Metadata } from "next";
import { notFound } from "next/navigation";
import { getAllPostSlugs, getPostMetaBySlug } from "@/lib/blog";
import BlogLayout from "@/components/layouts/BlogLayout";

interface LayoutProps {
  children: React.ReactNode;
  params: {
    slug: string;
  };
}

// Generate static paths for all blog posts at build time
export async function generateStaticParams() {
  const slugs = getAllPostSlugs(); // Get all slugs ['fibonacci-spiral', 'test-post']
  return slugs.map((slug) => ({
    slug: slug,
  }));
}

// Generate metadata for each blog post page
export async function generateMetadata({
  params,
}: LayoutProps): Promise<Metadata> {
  const meta = getPostMetaBySlug(params.slug);

  if (!meta) {
    // If metadata isn't found, you could return default metadata
    // or potentially trigger a notFound() here if the slug is truly invalid,
    // although generateStaticParams should prevent invalid slugs during build.
    return {
      title: "Post Not Found",
      description: "This blog post could not be found.",
    };
  }

  return {
    title: meta.title,
    description: meta.description,
    // Add other metadata fields like openGraph images based on meta if needed
    // openGraph: { title: meta.title, description: meta.description, ... }
  };
}

export default function PostLayout({ children, params }: LayoutProps) {
  // const meta = getPostMetaBySlug(params.slug);  // Comment this out

  return <div>{children} </div>;
}

// This layout component fetches the metadata again (necessary for passing to BlogLayout)
// and wraps the children (the rendered MDX page content)
// export default function PostLayout({ children, params }: LayoutProps) {
//     const meta = getPostMetaBySlug(params.slug)

//     // If the slug is valid (because generateStaticParams found it) but
//     // metadata somehow fails to load, render notFound.
//     if (!meta) {
//         notFound()
//     }

//     return <BlogLayout meta={ meta }> { children } </BlogLayout>
// }


================================================================================
FILE: page.tsx
================================================================================

// app/blog/page.tsx
import type { Metadata } from "next";
import Link from "next/link";
import { Route } from "next";
import { getAllPostsMeta } from "@/lib/blog";
import { cn } from "@/lib/utils";

export const metadata: Metadata = {
  title: "Blog",
  description: "Thoughts and insights on technology, development, and more.",
};

export default async function BlogIndexPage() {
  const posts = getAllPostsMeta();
  return (
    <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12 md:py-16">
      <h1 className="h1 mb-4 text-center md:text-left">Blog</h1>
      <p className="text-lg text-slate-400 mb-10 md:mb-12 text-center md:text-left">
        {metadata.description}
      </p>
      {posts.length === 0 ? (
        <p className="text-center text-slate-400">
          No blog posts published yet. Check back soon!
        </p>
      ) : (
        <ul className="list-none p-0 m-0 space-y-10">
          {posts.map((post) => (
            <li
              key={post.slug}
              className="pb-10 border-b border-[rgb(var(--border-subtle-rgb))] dark:border-[rgb(var(--border-subtle-rgb))] last:pb-0 last:border-none"
            >
              <article>
                <Link
                  href={`/blog/${post.slug}` as Route} // Link to the dynamic route
                  className="block mb-2"
                >
                  <h2 className="h3 text-[rgb(var(--primary))] hover:text-[rgb(var(--secondary))] transition-colors duration-150 ease-in-out">
                    {post.title}
                  </h2>
                </Link>
                <p className="text-sm text-slate-500 dark:text-slate-400 mb-3">
                  <time dateTime={post.date}>
                    {new Date(post.date).toLocaleDateString("en-US", {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })}
                  </time>
                  {post.author && (
                    <span className="text-slate-600 dark:text-slate-500">
                      {" "}
                      by {post.author}
                    </span>
                  )}
                </p>
                {post.tags && post.tags.length > 0 && (
                  <div className="flex flex-wrap gap-2 mb-4">
                    {post.tags.map((tag) => (
                      <span
                        key={tag}
                        className={cn(
                          "inline-block text-xs font-medium rounded-full",
                          "px-2.5 py-0.5",
                          "bg-[rgba(var(--primary),0.1)] text-[rgb(var(--primary))]"
                        )}
                      >
                        {tag}
                      </span>
                    ))}
                  </div>
                )}
                <p className="text-slate-600 dark:text-slate-400 leading-relaxed mb-4">
                  {post.description}
                </p>
                <Link
                  href={`/blog/${post.slug}` as Route}
                  className="inline-flex items-center font-medium text-[rgb(var(--primary))] hover:text-[rgb(var(--secondary))] transition-colors duration-150 ease-in-out group"
                >
                  <span>Read more</span>
                  <span className="tracking-normal text-[rgb(var(--primary))] group-hover:translate-x-0.5 transition-transform duration-150 ease-in-out ml-1">
                    ->
                  </span>
                </Link>
              </article>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}



================================================================================
FILE: app/blog/page.tsx
================================================================================

// app/blog/page.tsx
import type { Metadata } from "next";
import Link from "next/link";
import { Route } from "next";
import { getAllPostsMeta } from "@/lib/blog";
import { cn } from "@/lib/utils";

export const metadata: Metadata = {
  title: "Blog",
  description: "Thoughts and insights on technology, development, and more.",
};

export default async function BlogIndexPage() {
  const posts = getAllPostsMeta();
  return (
    <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12 md:py-16">
      <h1 className="h1 mb-4 text-center md:text-left">Blog</h1>
      <p className="text-lg text-slate-400 mb-10 md:mb-12 text-center md:text-left">
        {metadata.description}
      </p>
      {posts.length === 0 ? (
        <p className="text-center text-slate-400">
          No blog posts published yet. Check back soon!
        </p>
      ) : (
        <ul className="list-none p-0 m-0 space-y-10">
          {posts.map((post) => (
            <li
              key={post.slug}
              className="pb-10 border-b border-[rgb(var(--border-subtle-rgb))] dark:border-[rgb(var(--border-subtle-rgb))] last:pb-0 last:border-none"
            >
              <article>
                <Link
                  href={`/blog/${post.slug}` as Route} // Link to the dynamic route
                  className="block mb-2"
                >
                  <h2 className="h3 text-[rgb(var(--primary))] hover:text-[rgb(var(--secondary))] transition-colors duration-150 ease-in-out">
                    {post.title}
                  </h2>
                </Link>
                <p className="text-sm text-slate-500 dark:text-slate-400 mb-3">
                  <time dateTime={post.date}>
                    {new Date(post.date).toLocaleDateString("en-US", {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })}
                  </time>
                  {post.author && (
                    <span className="text-slate-600 dark:text-slate-500">
                      {" "}
                      by {post.author}
                    </span>
                  )}
                </p>
                {post.tags && post.tags.length > 0 && (
                  <div className="flex flex-wrap gap-2 mb-4">
                    {post.tags.map((tag) => (
                      <span
                        key={tag}
                        className={cn(
                          "inline-block text-xs font-medium rounded-full",
                          "px-2.5 py-0.5",
                          "bg-[rgba(var(--primary),0.1)] text-[rgb(var(--primary))]"
                        )}
                      >
                        {tag}
                      </span>
                    ))}
                  </div>
                )}
                <p className="text-slate-600 dark:text-slate-400 leading-relaxed mb-4">
                  {post.description}
                </p>
                <Link
                  href={`/blog/${post.slug}` as Route}
                  className="inline-flex items-center font-medium text-[rgb(var(--primary))] hover:text-[rgb(var(--secondary))] transition-colors duration-150 ease-in-out group"
                >
                  <span>Read more</span>
                  <span className="tracking-normal text-[rgb(var(--primary))] group-hover:translate-x-0.5 transition-transform duration-150 ease-in-out ml-1">
                    ->
                  </span>
                </Link>
              </article>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}


================================================================================
FILE: app/layout.tsx
================================================================================

// app/layout.tsx
import { Geist, Geist_Mono } from "next/font/google";
import { ThemeProvider } from "next-themes";
import type { Metadata } from "next";
import "./styles/globals.css"; // Ensure globals.css is imported
import { cn } from "@/lib/utils";

export const metadata: Metadata = {
  title: "Samir Llama",
  description: "Personal website and portfolio",
};

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="scroll-smooth" suppressHydrationWarning>
      <body
        className={cn(
          geistSans.variable,
          geistMono.variable,
          "antialiased",
          "tracking-tight"
        )}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="dark" // Ensures .dark is applied initially if no preference
          enableSystem={true} // Allows respecting OS preference
        >
          <div className="flex flex-col min-h-screen overflow-hidden supports-[overflow:clip]:overflow-clip">
            {children}
          </div>
        </ThemeProvider>
      </body>
    </html>
  );
}


================================================================================
FILE: app/playbook/first_mdx/page.mdx
================================================================================

---
title: "First MDX Pages"
description: "First MDX page on my website"
author: "Samir Coder"
date: "2025-03-29"
tags:
  - web development
  - fundamentals
---

# Hello 👋 with MDX!

## headline 2nd level

text in _italic_

text in **bold**

text in **_bold and italic_**

> a quote

[link to Next.js](https://nextjs.org)

- foo
- bar
- baz

![This is an octocat image](https://myoctocat.com/assets/images/base-octocat.svg "I'm the title of the octocat image")


================================================================================
FILE: app/playbook/mdx-modules.txt
================================================================================

================================================================================
FILE: first_mdx/page.mdx
================================================================================

---
title: "First MDX Pages"
description: "First MDX page on my website"
author: "Samir Coder"
date: "2025-03-29"
tags:
  - web development
  - fundamentals
---

/app/blog/first_mdx_page/page.mdx

export const metadata = {
  title: "First MDX Page",
  description: "First MDX page on my website",
  author: "Samir Coder",
  date: "2025-03-22",
};

# Hello 👋 with MDX!

## headline 2nd level

text in _italic_

text in **bold**

text in **_bold and italic_**

> a quote

[link to Next.js](https://nextjs.org)

- foo
- bar
- baz

![This is an octocat image](https://myoctocat.com/assets/images/base-octocat.svg "I'm the title of the octocat image")


================================================================================
FILE: layout.tsx
================================================================================

// app/playbook/layout.tsx

import type { Metadata } from "next";

export const metadata: Metadata = {
  title: {
    template: "%s | Samir's Playbook",
    default: "Playbook",
  },
  description:
    "Engineering Playbook with insights on web development, security, and technology",
};

// This layout now simply renders its children.
// The overall site structure (header/footer/main padding) comes from app/(default)/layout.tsx
// The specific two-column layout for articles comes from ArticleLayout used within the .mdx files.
export default function PlaybookLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return <>{children}</>; // Render children directly
}


================================================================================
FILE: layout/ArticleLayout.tsx
================================================================================

// components/layouts/ArticleLayout.tsx
import React from "react";
import { cn } from "@/lib/utils"; // Assuming your utility path

interface ArticleLayoutProps {
  children: React.ReactNode; // The main MDX content
  tableOfContents?: React.ReactNode; // New prop for the ToC
  meta?: {
    // Optional metadata object for the sidebar
    title?: string;
    author?: string;
    date?: string;
    // Add other fields you might have: tags, category, readingTime etc.
  };
  className?: string; // Allow passing additional classes
}

export default function ArticleLayout({
  children,
  tableOfContents,
  meta,
  className,
}: ArticleLayoutProps) {
  // --- DEBUGGING ---
  console.log("--- Rendering ArticleLayout ---");
  // Check what's actually being passed as children on the server
  // Note: This might log complex React structures
  console.log("Children type:", typeof children);
  console.log("Children received:", children);
  // --- END DEBUGGING ---

  // Temporarily return a very simple structure to isolate the children
  return (
    <div className={cn("border-4 border-red-500 p-4", className)}>
      <h2 className="text-red-600 font-bold">
        --- ArticleLayout Boundary (Start) ---
      </h2>
      <div className="border border-dashed border-blue-500 p-2">
        <h3 className="text-blue-600">Children Prop Content:</h3>
        {children ? (
          children
        ) : (
          <p className="text-red-500 font-bold">
            CHILDREN PROP IS EMPTY/FALSY!
          </p>
        )}
      </div>
      <h2 className="text-red-600 font-bold">
        --- ArticleLayout Boundary (End) ---
      </h2>
      {/* Keep sidebar minimal or remove temporarily if needed */}
      <aside className="border border-green-500 p-2 mt-4">
        <h3 className="text-green-600">Sidebar Area</h3>
        {/* Render ToC/Meta conditionally */}
        {meta && <div>Meta Info Placeholder</div>}
        {tableOfContents && <div>Table of Contents Placeholder</div>}
      </aside>
    </div>
  );
}

// Original Layout Component (Commented Out) ---
// function ArticleLayout_({
//   children,
//   tableOfContents, // Destructure the new prop
//   meta,
//   className,
// }: ArticleLayoutProps) {
//   return (
//     // Container with overall padding and max-width
//     <div
//       className={cn(
//         "w-full max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-8 py-8 md:py-12",
//         className
//       )}
//       {/* --- Core layout div --- */}
//       <div className="lg:flex lg:flex-row lg:gap-8 xl:gap-12">
//         {/* --- Main Content Area --- */}
//         {/* Apply mdx-prose styles here */}
//         <main className="flex-1 w-full lg:max-w-4xl xl:max-w-5xl mdx-prose dark:mdx-prose max-w-none">
//           {/* The main MDX content ({children}) goes here */}
//           {children}
//         </main>

//         {/* --- Sidebar --- */}
//         <aside className="w-full lg:w-64 xl:w-72 lg:shrink-0 mt-12 lg:mt-0">
//           {/* Sticky container for sidebar */}
//           <div className="lg:sticky lg:top-20 space-y-6">
//             {meta && (
//               <div className="p-5 rounded-2xl border border-slate-700/50 bg-slate-800/30 shadow-md">
//                 {/* Adjusted border/bg */}
//                 <h3 className="text-lg font-semibold text-slate-200 mb-3">
//                   Article Info
//                 </h3>
//                 <ul className="text-sm space-y-2">
//                   {meta.date && (
//                     <li className="flex justify-between">
//                       <span className="text-slate-400">Published:</span>
//                       <span className="text-slate-300">
//                         {new Date(meta.date).toLocaleDateString("en-US", {
//                           year: "numeric",
//                           month: "long",
//                           day: "numeric",
//                         })}
//                       </span>
//                     </li>
//                   )}
//                   {meta.author && (
//                     <li className="flex justify-between">
//                       <span className="text-slate-400">Author:</span>
//                       <span className="text-slate-300">{meta.author}</span>
//                     </li>
//                   )}
//                   {/* Add more meta items here */}
//                 </ul>
//               </div>
//             )}

//             {/* Render the Table of Contents if provided */}
//             {tableOfContents && (
//               // You might want a similar container style as the metadata
//               <div className="p-5 rounded-2xl border border-slate-700/50 bg-slate-800/30 shadow-md">
//                 {" "}
//                 {/* Adjusted border/bg */}
//                 <h3 className="text-lg font-semibold text-slate-200 mb-3">
//                   On this page
//                 </h3>
//                 {/* Render the actual ToC node passed in */}
//                 {tableOfContents}
//               </div>
//             )}

//             {/*
//             <div className="p-5 rounded-2xl border border-gray-alpha-200 bg-slate-800/30 shadow-md">
//               ... old placeholder ...
//             </div>
//             */}
//           </div>
//         </aside>
//       </div>
//     </div>
//   );
// }
//


================================================================================
FILE: page.tsx
================================================================================

// app/playbook/page.tsx

import type { Metadata } from "next";
import Link from "next/link";
import { getAllPostsMeta, PostMeta } from "@/lib/posts";
import { Route } from "next"; // Keep for typed links
import { cn } from "@/lib/utils";

export const metadata: Metadata = {
  title: "Engineering Playbook",
  description: "Insights on web development, security, and technology",
};

export default async function PlaybookIndexPage() {
  // Fetch metadata for all posts from the hardcoded 'app/playbook' directory
  // NOTE: Removed the ("playbook") argument as the function doesn't accept it
  const posts: PostMeta[] = getAllPostsMeta();

  return (
    // Container with consistent padding/width
    <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8 md:py-12">
      {/* Page Title */}
      <h1 className="h1 mb-4 text-center md:text-left">Engineering Playbook</h1>
      {/* Subtitle */}
      <p className="text-lg text-slate-400 mb-10 md:mb-12 text-center md:text-left">
        Insights and learnings on web development, security, and technology.
      </p>

      {/* Post List */}
      {posts.length === 0 ? (
        <p className="text-center text-slate-400">
          No playbook entries published yet. Check back soon!
        </p>
      ) : (
        // List container
        <ul className="list-none p-0 m-0 space-y-10">
          {posts.map((post) => (
            // List item with separator
            <li
              key={post.slug}
              className="pb-10 border-b border-gray-alpha-200 last:pb-0 last:border-none"
            >
              <article>
                {/* Post Title */}
                <Link
                  href={`/playbook/${post.slug}` as Route}
                  className="block mb-2"
                >
                  <h2 className="h3 text-primary hover:text-secondary transition-colors duration-150 ease-in-out">
                    {post.title}
                  </h2>
                </Link>

                {/* Post Metadata (Date/Author) */}
                <p className="text-sm text-slate-500 mb-3">
                  <time dateTime={post.date}>
                    {new Date(post.date).toLocaleDateString("en-US", {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })}
                  </time>
                  {post.author && (
                    <span className="text-slate-600"> by {post.author}</span>
                  )}
                </p>

                {/* --- Tags Section --- */}
                {post.tags && post.tags.length > 0 && (
                  <div className="flex flex-wrap gap-2 mb-4">
                    {post.tags.map((tag) => (
                      // Render each tag as a styled span (or Link later)
                      <span
                        key={tag}
                        className={cn(
                          "inline-block text-xs font-medium rounded-full",
                          "px-2.5 py-0.5", // Padding
                          "bg-slate-700/50 text-primary", // Background and text color
                          // Optional hover effect:
                          "hover:bg-slate-600/70"
                        )}
                      >
                        {tag}
                      </span>
                      /* --- If linking later ---
                      <Link
                        key={tag}
                        href={`/playbook/tags/${encodeURIComponent(tag.toLowerCase().replace(/\s+/g, '-'))}` as Route} // Example slug generation
                        className={cn(
                          "inline-block text-xs font-medium rounded-full",
                          "px-2.5 py-0.5",
                          "bg-slate-700/50 text-primary",
                          "hover:bg-slate-600/70 hover:text-secondary" // Example hover
                        )}
                      >
                        {tag}
                      </Link>
                      */
                    ))}
                  </div>
                )}
                {/* --- End Tags Section --- */}

                {/* Post Description */}
                <p className="text-slate-400 leading-relaxed mb-4">
                  {post.description}
                </p>

                {/* Read More Link */}
                <Link
                  href={`/playbook/${post.slug}` as Route}
                  className="inline-flex items-center font-medium text-primary hover:text-secondary transition-colors duration-150 ease-in-out group"
                >
                  <span>Read more</span>
                  <span className="tracking-normal text-primary group-hover:translate-x-0.5 transition-transform duration-150 ease-in-out ml-1">
                    ->
                  </span>
                </Link>
              </article>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}


================================================================================
FILE: web-security/page.mdx
================================================================================

---
title: "Web Security Fundamentals: Protecting Your Digital Fortress"
description: "An introduction to the core concepts of web security, essential for every developer building for the modern web."
author: "Samir Coder"
date: "2025-03-29"
tags:
  - security
  - web development
  - fundamentals
---

import ArticleLayout from "@/components/layouts/ArticleLayout";

{/* Keep the metadata export */}
export const metadata = {
title: "Web Security Fundamentals: Protecting Your Digital Fortress",
description: "An introduction to the core concepts of web security, essential for every developer building for the modern web.",
author: "Samir Coder",
date: "2025-03-29",
tags: ["security", "web development", "fundamentals"],
};

{/* Define the Table of Contents as a separate JSX variable */}
export const toc = (

<nav>
  {/* Removed outer container/styling, just pass the nav itself */}
  {/* Removed h2 - the layout adds "On this page" */}
  <ul className="list-none !pl-0 space-y-1">
    <li>
      <a
        href="#why-it-matters"
        className="text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
      >
        Why Does Web Security Matter?
      </a>
    </li>
    <li>
      <a
        href="#core-pillars"
        className="text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
      >
        Core Pillars of Web Security
      </a>
      <ul className="list-none !pl-4 mt-1 space-y-1">
        <li>
          <a
            href="#pillar-https"
            className="text-sm text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
          >
            1. HTTPS Everywhere
          </a>
        </li>
        <li>
          <a
            href="#pillar-input"
            className="text-sm text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
          >
            2. Never Trust User Input
          </a>
        </li>
        <li>
          <a
            href="#pillar-output"
            className="text-sm text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
          >
            3. Encode Output Correctly
          </a>
        </li>
        <li>
          <a
            href="#pillar-access"
            className="text-sm text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
          >
            4. Control Access (AuthN/AuthZ)
          </a>
        </li>
        <li>
          <a
            href="#pillar-headers"
            className="text-sm text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
          >
            5. Security Headers
          </a>
        </li>
        <li>
          <a
            href="#pillar-dependencies"
            className="text-sm text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
          >
            6. Keep Dependencies Updated
          </a>
        </li>
      </ul>
    </li>
    <li>
      <a
        href="#common-threats"
        className="text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
      >
        Common Threats to Be Aware Of
      </a>
    </li>
    <li>
      <a
        href="#developer-role"
        className="text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
      >
        Your Role as a Developer
      </a>
    </li>
    <li>
      <a
        href="#journey-continues"
        className="text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
      >
        The Journey Continues
      </a>
    </li>
  </ul>
</nav>
);

{/* Pass the 'toc' variable and metadata to ArticleLayout */}

<ArticleLayout meta={metadata} tableOfContents={toc}>
<h1>{metadata.title}</h1>

{/* Introduction */}

Welcome to the first technical post on my new site! As web engineers, we build
the digital world brick by brick. But just like physical structures, our
digital creations need strong foundations and defenses. Today, we're diving
into a topic crucial for every developer: <strong>Web Security</strong>.

This isn't about becoming a penetration tester overnight. It's about
understanding the fundamental principles and common threats so we can build
more resilient, trustworthy applications from the ground up. Let's secure our
digital fortresses.

    {/* Use custom HR component */}
    <hr />

    {/* Section: Why It Matters */}
    <h2 id="why-it-matters">Why Does Web Security Matter So Much?</h2>
    <p>In an era where data breaches make headlines almost weekly, and regulations like GDPR and CCPA impose hefty fines, the stakes have never been higher. Insecure web applications aren't just technical flaws; they are significant business risks leading to:</p>
    <ul>
      <li><strong>Compromised User Data:</strong> Sensitive personal information (passwords, credit cards, emails) stolen and misused, leading to identity theft and fraud.</li>
      <li><strong>Financial Loss:</strong> Direct theft, regulatory fines, incident response costs, and potential lawsuits.</li>
      <li><strong>Reputation Damage:</strong> Users lose trust in platforms that can't protect them, leading to customer churn and difficulty acquiring new users.</li>
      <li><strong>Service Disruption:</strong> Attacks like DDoS can take your website or application offline, impacting users and business operations.</li>
      <li><strong>Intellectual Property Theft:</strong> Source code, proprietary algorithms, or sensitive business data can be stolen.</li>
    </ul>
    <p>Security isn't just a feature or an afterthought; it's a fundamental requirement for building and maintaining trust in the digital age.</p>

    {/* Section: Core Pillars */}
    <h2 id="core-pillars">Core Pillars of Web Security</h2>
    <p>Web security is vast, but many defensive principles revolve around these core ideas:</p>

    <h3 id="pillar-https">1. Protect Data in Transit: HTTPS Everywhere</h3>
    <ul>
      <li><strong>What:</strong> Using HTTPS (HyperText Transfer Protocol Secure) encrypts the data exchanged between a user's browser and your server using TLS/SSL protocols.</li>
      <li><strong>Why:</strong> Prevents eavesdroppers ("man-in-the-middle" attacks) from reading or modifying sensitive data like login credentials, session cookies, or personal information sent over potentially insecure networks (like public Wi-Fi).</li>
      <li><strong>Action:</strong> Always configure your servers to enforce HTTPS. Use services like Let's Encrypt for free certificates. Most modern hosting platforms (Vercel, Netlify, etc.) handle this automatically. Ensure HTTP traffic is permanently redirected (301) to HTTPS. Look for the padlock!</li>
    </ul>

    <h3 id="pillar-input">2. Never Trust User Input: Validation & Sanitization</h3>
    <ul>
      <li><strong>What:</strong> Treat <em>any</em> data originating from the client-side (forms, URL parameters, API requests, headers, cookies) as potentially malicious until proven otherwise. Validate its format, type, length, and content against strict rules on the <strong>server-side</strong>. Sanitize data by removing or encoding potentially dangerous characters based on the context where it will be used.</li>
      <li><strong>Why:</strong> This is the primary defense against <strong>Injection Attacks</strong> (like SQL Injection, NoSQL Injection, Command Injection, and Cross-Site Scripting).</li>
      <li><strong>Action:</strong> Implement robust server-side validation using libraries like Zod (as seen in this project's actions!) or built-in framework validators. Use allow-lists (defining what *is* permitted) rather than block-lists (trying to guess what's bad). Use parameterized queries or ORMs (like Drizzle!) for database interactions to prevent SQLi.</li>
    </ul>

      {/* <<<=== ADD A BLANK LINE HERE ===>>> */}

    <pre><code className="language-javascript">
    {`// Simplified Zod Example (Server-Side)
    import { z } from 'zod';

    const CommentSchema = z.object({
      email: z.string().email("Invalid email format"),
      comment: z.string().min(1, "Comment cannot be empty").max(500, "Comment too long"),
      // Example: Validate against known safe characters if needed
      // safeComment: z.string().regex(/^[\\w\\s.,!?'"-]*$/),
    });

    function handleCommentSubmit(formData) {
      const result = CommentSchema.safeParse({
        email: formData.get("email"),
        comment: formData.get("comment"),
      });

      if (!result.success) {
        // Handle validation errors (e.g., return errors to user)
        console.error("Validation failed:", result.error.flatten());
        throw new Error("Invalid input");
      }

      // Data is validated, proceed with sanitized data
      const validatedData = result.data;
      // Further sanitization might be needed depending on usage
      // e.g., using a library to strip unwanted HTML if displaying comment
      saveCommentToDatabase(validatedData.email, validatedData.comment);
    }`}
    </code></pre>

    <h3 id="pillar-output">3. Encode Output Correctly: Defeating XSS</h3>
    <ul>
      <li><strong>What:</strong> When displaying user-provided data back in the browser (or any client), ensure it's treated as plain text, not as executable code (HTML, JavaScript, CSS). This involves encoding special characters (like <code>{'<'}</code> becoming <code>{'<'}</code>, <code>{'>'}</code> becoming <code>{'>'}</code>) appropriate for the context (HTML body, HTML attributes, JS variables, etc.).</li>
      <li><strong>Why:</strong> Prevents <strong>Cross-Site Scripting (XSS)</strong>, where attackers inject malicious scripts that execute in <em>other</em> users' browsers, potentially stealing session cookies, performing actions on their behalf, or defacing the site.</li>
      <li><strong>Action:</strong> Use modern frameworks/libraries (like React, Vue, Angular) that automatically encode data rendered within standard templating syntax (e.g., `{data}` in JSX). Be extremely cautious when using mechanisms that bypass this encoding (like React's `dangerouslySetInnerHTML`). Use context-aware encoding libraries if manually constructing output.</li>
    </ul>

    <h3 id="pillar-access">4. Control Access: Authentication & Authorization (AuthN/AuthZ)</h3>
    <ul>
      <li><strong>Authentication (AuthN):</strong> Verifying <em>who</em> a user is (e.g., login with password, OAuth, magic links, biometrics). Implement secure password hashing (like bcrypt) and consider Multi-Factor Authentication (MFA).</li>
      <li><strong>Authorization (AuthZ):</strong> Determining <em>what</em> an authenticated user is allowed to do (e.g., admin vs. regular user permissions, accessing specific resources). Enforce checks on the <strong>server-side</strong> for every sensitive request.</li>
      <li><strong>Why:</strong> Ensures only legitimate users can access specific data or perform sensitive actions, preventing unauthorized access and privilege escalation.</li>
      <li><strong>Action:</strong> Use robust authentication libraries/services (avoid rolling your own crypto!). Implement secure session management (e.g., HttpOnly, Secure, SameSite=Lax/Strict cookies). Apply the <strong>Principle of Least Privilege</strong> (users/systems should only have the minimum permissions necessary). Consider Role-Based Access Control (RBAC) or Attribute-Based Access Control (ABAC) models.</li>
    </ul>

    <h3 id="pillar-headers">5. Configure Server & Browser Defenses: Security Headers</h3>
    <ul>
      <li><strong>What:</strong> HTTP response headers sent from your server that instruct the browser on how to behave more securely.</li>
      <li><strong>Why:</strong> Mitigate various attacks like clickjacking, XSS, data injection, MIME-type sniffing, and enforce HTTPS.</li>
      {/* === CORRECTED THIS LIST ITEM === */}
      <li>
        <p><strong>Action:</strong> Implement essential headers (often configurable in frameworks like Next.js or via edge functions/reverse proxies):</p>

        {/* Keep blank line before nested list */}
        <ul>
          <li><code>Content-Security-Policy</code> (CSP): Defines allowed sources for scripts, styles, images, fonts, etc. Reduces XSS risk significantly. Start strict and loosen as needed.</li>
          <li><code>Strict-Transport-Security</code> (HSTS): Forces browsers to use HTTPS for subsequent requests, preventing downgrade attacks.</li>
          <li><code>X-Content-Type-Options: nosniff</code>: Prevents browsers from interpreting files as a different MIME type than declared.</li>
          <li><code>X-Frame-Options: DENY</code> or <code>SAMEORIGIN</code>: Prevents clickjacking by controlling if the site can be embedded in an iframe.</li>
          <li><code>Referrer-Policy: strict-origin-when-cross-origin</code> or <code>no-referrer</code>: Controls how much referrer information is sent with requests.</li>
          <li><code>Permissions-Policy</code>: Controls access to browser features (camera, microphone, geolocation, etc.).</li>
        </ul>
        {/* Keep blank line after nested list */}

      </li>
      {/* --- Modification End --- */}
    </ul>

    <h3 id="pillar-dependencies">6. Keep Dependencies Updated</h3>
    <ul>
      <li><strong>What:</strong> Regularly update your frameworks, libraries, OS, and server software.</li>
      <li><strong>Why:</strong> Attackers actively scan for and exploit known vulnerabilities (CVEs) in outdated software. Updates often contain critical security patches.</li>
      <li><strong>Action:</strong> Use package manager tools (`pnpm audit`, `npm audit`, `yarn audit`) and services like GitHub Dependabot or Snyk to identify vulnerable dependencies. Update promptly, testing thoroughly after updates. Maintain a Software Bill of Materials (SBOM) for better visibility.</li>
    </ul>

    <hr />

    {/* Section: Common Threats */}
    <h2 id="common-threats">Common Threats to Be Aware Of</h2>
    <p>While the pillars provide defense, understanding common attack vectors helps focus efforts:</p>
    <ul>
      <li><strong>Cross-Site Scripting (XSS):</strong> Injecting malicious scripts into web pages viewed by other users. Can be Stored (in database), Reflected (in URL), or DOM-based. (Defense: Output Encoding, CSP).</li>
      <li><strong>SQL Injection (SQLi):</strong> Injecting malicious SQL code via input fields to manipulate database queries, potentially stealing or corrupting data. (Defense: Input Validation, Parameterized Queries/ORMs).</li>
      <li><strong>Cross-Site Request Forgery (CSRF):</strong> Tricking a logged-in user's browser into sending an unintended, malicious request to your application using their existing session. (Defense: Anti-CSRF Tokens, SameSite Cookies).</li>
      <li><strong>Broken Access Control:</strong> Flaws allowing users to access data or perform actions they shouldn't be authorized for (e.g., viewing another user's profile via URL manipulation - IDOR). (Defense: Robust server-side authorization checks on every request).</li>
      <li><strong>Security Misconfiguration:</strong> Default credentials, overly verbose error messages revealing internal details, unnecessary features enabled, missing security headers. (Defense: Secure configuration practices, hardening guides, regular audits).</li>
    </ul>

    <hr />

    {/* Section: Developer Role */}
    <h2 id="developer-role">Your Role as a Developer</h2>
    <p>Security isn't solely the responsibility of a dedicated security team – it's an integral part of web engineering. Adopt a security mindset ("Shift-Left Security"):</p>
    <ul>
      <li><strong>Think Adversarially:</strong> How could this feature be misused or broken? Consider potential threats during design and implementation (basic threat modeling).</li>
      <li><strong>Validate Everything:</strong> Especially data crossing trust boundaries (client -> server, external API -> server).</li>
      <li><strong>Encode Appropriately:</strong> When displaying data back to any client.</li>
      <li><strong>Use Secure Defaults:</strong> Leverage the security features built into your framework and libraries.</li>
      <li><strong>Stay Updated:</strong> Keep libraries, tools, and your own knowledge current. Follow security news and vulnerability disclosures.</li>
      <li><strong>Learn Continuously:</strong> Resources like the <a href="https://owasp.org/www-project-top-ten/" target="_blank" rel="noopener noreferrer">OWASP Top 10</a>, framework-specific security guides, and security blogs are invaluable.</li>
    </ul>

    <hr />

    {/* Section: Conclusion */}
    <h2 id="journey-continues">The Journey Continues</h2>
    <p>This post merely scratches the surface of web security. It's a deep, complex, and ever-evolving field. However, understanding and consistently applying these fundamental principles provides a solid foundation for building significantly safer and more trustworthy applications.</p>
    <p>In future posts, we might dive deeper into specific vulnerabilities like XSS or CSRF, explore secure coding practices within Next.js, implement advanced security headers like CSP, or look at API security best practices. Stay tuned, and keep building securely!</p>

</ArticleLayout>



================================================================================
FILE: app/playbook/page.tsx
================================================================================

// app/playbook/page.tsx

import type { Metadata } from "next";
import Link from "next/link";
import { getAllPostsMeta, PostMeta } from "@/lib/posts";
import { Route } from "next"; // Keep for typed links
import { cn } from "@/lib/utils";

export const metadata: Metadata = {
  title: "Engineering Playbook",
  description: "Insights on web development, security, and technology",
};

export default async function PlaybookIndexPage() {
  // Fetch metadata for all posts from the hardcoded 'app/playbook' directory
  // NOTE: Removed the ("playbook") argument as the function doesn't accept it
  const posts: PostMeta[] = getAllPostsMeta();

  return (
    // Container with consistent padding/width
    <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8 md:py-12">
      {/* Page Title */}
      <h1 className="h1 mb-4 text-center md:text-left">Engineering Playbook</h1>
      {/* Subtitle */}
      <p className="text-lg text-slate-400 mb-10 md:mb-12 text-center md:text-left">
        Insights and learnings on web development, security, and technology.
      </p>

      {/* Post List */}
      {posts.length === 0 ? (
        <p className="text-center text-slate-400">
          No playbook entries published yet. Check back soon!
        </p>
      ) : (
        // List container
        <ul className="list-none p-0 m-0 space-y-10">
          {posts.map((post) => (
            // List item with separator
            <li
              key={post.slug}
              className="pb-10 border-b border-gray-alpha-200 last:pb-0 last:border-none"
            >
              <article>
                {/* Post Title */}
                <Link
                  href={`/playbook/${post.slug}` as Route}
                  className="block mb-2"
                >
                  <h2 className="h3 text-primary hover:text-secondary transition-colors duration-150 ease-in-out">
                    {post.title}
                  </h2>
                </Link>

                {/* Post Metadata (Date/Author) */}
                <p className="text-sm text-slate-500 mb-3">
                  <time dateTime={post.date}>
                    {new Date(post.date).toLocaleDateString("en-US", {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })}
                  </time>
                  {post.author && (
                    <span className="text-slate-600"> by {post.author}</span>
                  )}
                </p>

                {/* --- Tags Section --- */}
                {post.tags && post.tags.length > 0 && (
                  <div className="flex flex-wrap gap-2 mb-4">
                    {post.tags.map((tag) => (
                      // Render each tag as a styled span (or Link later)
                      <span
                        key={tag}
                        className={cn(
                          "inline-block text-xs font-medium rounded-full",
                          "px-2.5 py-0.5", // Padding
                          "bg-slate-700/50 text-primary", // Background and text color
                          // Optional hover effect:
                          "hover:bg-slate-600/70"
                        )}
                      >
                        {tag}
                      </span>
                      /* --- If linking later ---
                      <Link
                        key={tag}
                        href={`/playbook/tags/${encodeURIComponent(tag.toLowerCase().replace(/\s+/g, '-'))}` as Route} // Example slug generation
                        className={cn(
                          "inline-block text-xs font-medium rounded-full",
                          "px-2.5 py-0.5",
                          "bg-slate-700/50 text-primary",
                          "hover:bg-slate-600/70 hover:text-secondary" // Example hover
                        )}
                      >
                        {tag}
                      </Link>
                      */
                    ))}
                  </div>
                )}
                {/* --- End Tags Section --- */}

                {/* Post Description */}
                <p className="text-slate-400 leading-relaxed mb-4">
                  {post.description}
                </p>

                {/* Read More Link */}
                <Link
                  href={`/playbook/${post.slug}` as Route}
                  className="inline-flex items-center font-medium text-primary hover:text-secondary transition-colors duration-150 ease-in-out group"
                >
                  <span>Read more</span>
                  <span className="tracking-normal text-primary group-hover:translate-x-0.5 transition-transform duration-150 ease-in-out ml-1">
                    ->
                  </span>
                </Link>
              </article>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}


================================================================================
FILE: app/playbook/web-security/page.mdx
================================================================================

---
title: "Web Security Fundamentals"
description: "Core security concepts for modern web"
author: "Samir Coder"
date: "2025-03-30"
tags: [security, web-development, fundamentals]
---

import ArticleLayout from "@/components/layouts/ArticleLayout";

{/* Table of Contents Component */}
export const toc = (
<nav>
  {/* Removed h2 - the layout adds "On this page" */}
  <ul className="list-none !pl-0 space-y-1">
    <li>
      <a
        href="#why-it-matters"
        className="text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
      >
        Why Does Web Security Matter?
      </a>
    </li>
    <li>
      <a
        href="#core-pillars"
        className="text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
      >
        Core Pillars of Web Security
      </a>
      <ul className="list-none !pl-4 mt-1 space-y-1">
        <li>
          <a
            href="#pillar-https"
            className="text-sm text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
          >
            1. HTTPS Everywhere
          </a>
        </li>
        <li>
          <a
            href="#pillar-input"
            className="text-sm text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
          >
            2. Never Trust User Input
          </a>
        </li>
        <li>
          <a
            href="#pillar-output"
            className="text-sm text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
          >
            3. Encode Output Correctly
          </a>
        </li>
        <li>
          <a
            href="#pillar-access"
            className="text-sm text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
          >
            4. Control Access (AuthN/AuthZ)
          </a>
        </li>
        <li>
          <a
            href="#pillar-headers"
            className="text-sm text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
          >
            5. Security Headers
          </a>
        </li>
        <li>
          <a
            href="#pillar-dependencies"
            className="text-sm text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
          >
            6. Keep Dependencies Updated
          </a>
        </li>
      </ul>
    </li>
    <li>
      <a
        href="#common-threats"
        className="text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
      >
        Common Threats to Be Aware Of
      </a>
    </li>
    <li>
      <a
        href="#developer-role"
        className="text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
      >
        Your Role as a Developer
      </a>
    </li>
    <li>
      <a
        href="#journey-continues"
        className="text-slate-400 hover:text-primary transition duration-150 ease-in-out no-underline"
      >
        The Journey Continues
      </a>
    </li>
  </ul>
</nav>
);

<ArticleLayout tableOfContents={toc}>

<h1>Web Security Fundamentals: Protecting Your Digital Fortress</h1>

{/* Introduction */}

Welcome to the first technical post on my new site! As web engineers, we build
the digital world brick by brick. But just like physical structures, our
digital creations need strong foundations and defenses. Today, we're diving
into a topic crucial for every developer: <strong>Web Security</strong>.

This isn't about becoming a penetration tester overnight. It's about
understanding the fundamental principles and common threats so we can build
more resilient, trustworthy applications from the ground up. Let's secure our
digital fortresses.

    {/* Use custom HR component */}
    <hr />

    {/* Section: Why It Matters */}
    <h2 id="why-it-matters">Why Does Web Security Matter So Much?</h2>
    <p>In an era where data breaches make headlines almost weekly, and regulations like GDPR and CCPA impose hefty fines, the stakes have never been higher. Insecure web applications aren't just technical flaws; they are significant business risks leading to:</p>
    <ul>
      <li><strong>Compromised User Data:</strong> Sensitive personal information (passwords, credit cards, emails) stolen and misused, leading to identity theft and fraud.</li>
      <li><strong>Financial Loss:</strong> Direct theft, regulatory fines, incident response costs, and potential lawsuits.</li>
      <li><strong>Reputation Damage:</strong> Users lose trust in platforms that can't protect them, leading to customer churn and difficulty acquiring new users.</li>
      <li><strong>Service Disruption:</strong> Attacks like DDoS can take your website or application offline, impacting users and business operations.</li>
      <li><strong>Intellectual Property Theft:</strong> Source code, proprietary algorithms, or sensitive business data can be stolen.</li>
    </ul>
    <p>Security isn't just a feature or an afterthought; it's a fundamental requirement for building and maintaining trust in the digital age.</p>

    {/* Section: Core Pillars */}
    <h2 id="core-pillars">Core Pillars of Web Security</h2>
    <p>Web security is vast, but many defensive principles revolve around these core ideas:</p>

    <h3 id="pillar-https">1. Protect Data in Transit: HTTPS Everywhere</h3>
    <ul>
      <li><strong>What:</strong> Using HTTPS (HyperText Transfer Protocol Secure) encrypts the data exchanged between a user's browser and your server using TLS/SSL protocols.</li>
      <li><strong>Why:</strong> Prevents eavesdroppers ("man-in-the-middle" attacks) from reading or modifying sensitive data like login credentials, session cookies, or personal information sent over potentially insecure networks (like public Wi-Fi).</li>
      <li><strong>Action:</strong> Always configure your servers to enforce HTTPS. Use services like Let's Encrypt for free certificates. Most modern hosting platforms (Vercel, Netlify, etc.) handle this automatically. Ensure HTTP traffic is permanently redirected (301) to HTTPS. Look for the padlock!</li>
    </ul>

    <h3 id="pillar-input">2. Never Trust User Input: Validation & Sanitization</h3>
    <ul>
      <li><strong>What:</strong> Treat <em>any</em> data originating from the client-side (forms, URL parameters, API requests, headers, cookies) as potentially malicious until proven otherwise. Validate its format, type, length, and content against strict rules on the <strong>server-side</strong>. Sanitize data by removing or encoding potentially dangerous characters based on the context where it will be used.</li>
      <li><strong>Why:</strong> This is the primary defense against <strong>Injection Attacks</strong> (like SQL Injection, NoSQL Injection, Command Injection, and Cross-Site Scripting).</li>
      <li><strong>Action:</strong> Implement robust server-side validation using libraries like Zod (as seen in this project's actions!) or built-in framework validators. Use allow-lists (defining what *is* permitted) rather than block-lists (trying to guess what's bad). Use parameterized queries or ORMs (like Drizzle!) for database interactions to prevent SQLi.</li>
    </ul>

      {/* <<<=== ADD A BLANK LINE HERE ===>>> */}

    <pre><code className="language-javascript">
    {`// Simplified Zod Example (Server-Side)
    import { z } from 'zod';

    const CommentSchema = z.object({
      email: z.string().email("Invalid email format"),
      comment: z.string().min(1, "Comment cannot be empty").max(500, "Comment too long"),
      // Example: Validate against known safe characters if needed
      // safeComment: z.string().regex(/^[\\w\\s.,!?'"-]*$/),
    });

    function handleCommentSubmit(formData) {
      const result = CommentSchema.safeParse({
        email: formData.get("email"),
        comment: formData.get("comment"),
      });

      if (!result.success) {
        // Handle validation errors (e.g., return errors to user)
        console.error("Validation failed:", result.error.flatten());
        throw new Error("Invalid input");
      }

      // Data is validated, proceed with sanitized data
      const validatedData = result.data;
      // Further sanitization might be needed depending on usage
      // e.g., using a library to strip unwanted HTML if displaying comment
      saveCommentToDatabase(validatedData.email, validatedData.comment);
    }`}
    </code></pre>

    <h3 id="pillar-output">3. Encode Output Correctly: Defeating XSS</h3>
    <ul>
      <li><strong>What:</strong> When displaying user-provided data back in the browser (or any client), ensure it's treated as plain text, not as executable code (HTML, JavaScript, CSS). This involves encoding special characters (like <code>{'<'}</code> becoming <code>{'<'}</code>, <code>{'>'}</code> becoming <code>{'>'}</code>) appropriate for the context (HTML body, HTML attributes, JS variables, etc.).</li>
      <li><strong>Why:</strong> Prevents <strong>Cross-Site Scripting (XSS)</strong>, where attackers inject malicious scripts that execute in <em>other</em> users' browsers, potentially stealing session cookies, performing actions on their behalf, or defacing the site.</li>
      <li><strong>Action:</strong> Use modern frameworks/libraries (like React, Vue, Angular) that automatically encode data rendered within standard templating syntax (e.g., `{data}` in JSX). Be extremely cautious when using mechanisms that bypass this encoding (like React's `dangerouslySetInnerHTML`). Use context-aware encoding libraries if manually constructing output.</li>
    </ul>

    <h3 id="pillar-access">4. Control Access: Authentication & Authorization (AuthN/AuthZ)</h3>
    <ul>
      <li><strong>Authentication (AuthN):</strong> Verifying <em>who</em> a user is (e.g., login with password, OAuth, magic links, biometrics). Implement secure password hashing (like bcrypt) and consider Multi-Factor Authentication (MFA).</li>
      <li><strong>Authorization (AuthZ):</strong> Determining <em>what</em> an authenticated user is allowed to do (e.g., admin vs. regular user permissions, accessing specific resources). Enforce checks on the <strong>server-side</strong> for every sensitive request.</li>
      <li><strong>Why:</strong> Ensures only legitimate users can access specific data or perform sensitive actions, preventing unauthorized access and privilege escalation.</li>
      <li><strong>Action:</strong> Use robust authentication libraries/services (avoid rolling your own crypto!). Implement secure session management (e.g., HttpOnly, Secure, SameSite=Lax/Strict cookies). Apply the <strong>Principle of Least Privilege</strong> (users/systems should only have the minimum permissions necessary). Consider Role-Based Access Control (RBAC) or Attribute-Based Access Control (ABAC) models.</li>
    </ul>

    <h3 id="pillar-headers">5. Configure Server & Browser Defenses: Security Headers</h3>
    <ul>
      <li><strong>What:</strong> HTTP response headers sent from your server that instruct the browser on how to behave more securely.</li>
      <li><strong>Why:</strong> Mitigate various attacks like clickjacking, XSS, data injection, MIME-type sniffing, and enforce HTTPS.</li>
      {/* === CORRECTED THIS LIST ITEM === */}
      <li>
        <p><strong>Action:</strong> Implement essential headers (often configurable in frameworks like Next.js or via edge functions/reverse proxies):</p>

        {/* Keep blank line before nested list */}
        <ul>
          <li><code>Content-Security-Policy</code> (CSP): Defines allowed sources for scripts, styles, images, fonts, etc. Reduces XSS risk significantly. Start strict and loosen as needed.</li>
          <li><code>Strict-Transport-Security</code> (HSTS): Forces browsers to use HTTPS for subsequent requests, preventing downgrade attacks.</li>
          <li><code>X-Content-Type-Options: nosniff</code>: Prevents browsers from interpreting files as a different MIME type than declared.</li>
          <li><code>X-Frame-Options: DENY</code> or <code>SAMEORIGIN</code>: Prevents clickjacking by controlling if the site can be embedded in an iframe.</li>
          <li><code>Referrer-Policy: strict-origin-when-cross-origin</code> or <code>no-referrer</code>: Controls how much referrer information is sent with requests.</li>
          <li><code>Permissions-Policy</code>: Controls access to browser features (camera, microphone, geolocation, etc.).</li>
        </ul>
        {/* Keep blank line after nested list */}

      </li>
      {/* --- Modification End --- */}
    </ul>

    <h3 id="pillar-dependencies">6. Keep Dependencies Updated</h3>
    <ul>
      <li><strong>What:</strong> Regularly update your frameworks, libraries, OS, and server software.</li>
      <li><strong>Why:</strong> Attackers actively scan for and exploit known vulnerabilities (CVEs) in outdated software. Updates often contain critical security patches.</li>
      <li><strong>Action:</strong> Use package manager tools (`pnpm audit`, `npm audit`, `yarn audit`) and services like GitHub Dependabot or Snyk to identify vulnerable dependencies. Update promptly, testing thoroughly after updates. Maintain a Software Bill of Materials (SBOM) for better visibility.</li>
    </ul>

    <hr />

    {/* Section: Common Threats */}
    <h2 id="common-threats">Common Threats to Be Aware Of</h2>
    <p>While the pillars provide defense, understanding common attack vectors helps focus efforts:</p>
    <ul>
      <li><strong>Cross-Site Scripting (XSS):</strong> Injecting malicious scripts into web pages viewed by other users. Can be Stored (in database), Reflected (in URL), or DOM-based. (Defense: Output Encoding, CSP).</li>
      <li><strong>SQL Injection (SQLi):</strong> Injecting malicious SQL code via input fields to manipulate database queries, potentially stealing or corrupting data. (Defense: Input Validation, Parameterized Queries/ORMs).</li>
      <li><strong>Cross-Site Request Forgery (CSRF):</strong> Tricking a logged-in user's browser into sending an unintended, malicious request to your application using their existing session. (Defense: Anti-CSRF Tokens, SameSite Cookies).</li>
      <li><strong>Broken Access Control:</strong> Flaws allowing users to access data or perform actions they shouldn't be authorized for (e.g., viewing another user's profile via URL manipulation - IDOR). (Defense: Robust server-side authorization checks on every request).</li>
      <li><strong>Security Misconfiguration:</strong> Default credentials, overly verbose error messages revealing internal details, unnecessary features enabled, missing security headers. (Defense: Secure configuration practices, hardening guides, regular audits).</li>
    </ul>

    <hr />

    {/* Section: Developer Role */}
    <h2 id="developer-role">Your Role as a Developer</h2>
    <p>Security isn't solely the responsibility of a dedicated security team – it's an integral part of web engineering. Adopt a security mindset ("Shift-Left Security"):</p>
    <ul>
      <li><strong>Think Adversarially:</strong> How could this feature be misused or broken? Consider potential threats during design and implementation (basic threat modeling).</li>
      <li><strong>Validate Everything:</strong> Especially data crossing trust boundaries (client -> server, external API -> server).</li>
      <li><strong>Encode Appropriately:</strong> When displaying data back to any client.</li>
      <li><strong>Use Secure Defaults:</strong> Leverage the security features built into your framework and libraries.</li>
      <li><strong>Stay Updated:</strong> Keep libraries, tools, and your own knowledge current. Follow security news and vulnerability disclosures.</li>
      <li><strong>Learn Continuously:</strong> Resources like the <a href="https://owasp.org/www-project-top-ten/" target="_blank" rel="noopener noreferrer">OWASP Top 10</a>, framework-specific security guides, and security blogs are invaluable.</li>
    </ul>

    <hr />

    {/* Section: Conclusion */}
    <h2 id="journey-continues">The Journey Continues</h2>
    <p>This post merely scratches the surface of web security. It's a deep, complex, and ever-evolving field. However, understanding and consistently applying these fundamental principles provides a solid foundation for building significantly safer and more trustworthy applications.</p>
    <p>In future posts, we might dive deeper into specific vulnerabilities like XSS or CSRF, explore secure coding practices within Next.js, implement advanced security headers like CSP, or look at API security best practices. Stay tuned, and keep building securely!</p>

</ArticleLayout>


================================================================================
FILE: app/styles/animations.css
================================================================================

/* app/styles/animations.css */

/* ==========================================================================
   Keyframe Definitions
   ========================================================================== */

@keyframes neonPulse {
  0%,
  100% {
    opacity: 1;
  }
  50% {
    opacity: 0.7;
  }
}

@keyframes pulseLoop {
  0% {
    opacity: var(--opacity-none, 0);
    transform: scale(0.25) translateZ(0);
  }
  30% {
    opacity: 0.4;
  }
  70% {
    opacity: var(--opacity-none, 0);
  }
  80% {
    transform: scale(1) translateZ(0);
  }
}

@keyframes endless {
  0% {
    transform: translateY(0);
  }
  100% {
    transform: translateY(-245px);
  } /* Adjust value as needed */
}

@keyframes shine {
  0% {
    top: 0;
    transform: translateY(-100%) scaleY(10);
    opacity: var(--opacity-none, 0);
  }
  2% {
    opacity: var(--opacity-low, 0.5);
  }
  40% {
    top: 100%;
    transform: translateY(0) scaleY(200);
    opacity: var(--opacity-none, 0);
  }
  100% {
    top: 100%;
    transform: translateY(0) scaleY(1);
    opacity: var(--opacity-none, 0);
  }
}

@keyframes float {
  0% {
    transform: translateY(3%);
  }
  50% {
    transform: translateY(-3%);
  }
  100% {
    transform: translateY(3%);
  }
}

@keyframes neon-blink {
  /* Defined only once */
  0%,
  100% {
    opacity: 1;
  }
  50% {
    opacity: 0.4;
  }
}

/* ==========================================================================
   Animation Utility Classes (No @layer needed)
   ========================================================================== */

.animate-neonPulse {
  animation: neonPulse 2s ease-in-out infinite;
}

.animation-endless {
  animation: endless var(--animation-duration-slow, 12s)
    var(--animation-timing-linear, linear)
    var(--animation-iteration-infinite, infinite);
}

.animation-shine {
  animation: shine var(--animation-duration-medium, 8s)
    var(--animation-timing-linear, linear) 500ms
    var(--animation-iteration-infinite, infinite);
}

.animation-float {
  animation: float 2s ease-in-out var(--animation-iteration-infinite, infinite);
}

.pulse {
  opacity: var(--opacity-none, 0);
  transform-origin: center;
  animation: pulseLoop var(--animation-duration-slow, 12s)
    var(--animation-timing-linear, linear)
    var(--animation-iteration-infinite, infinite);
}
.pulse-1 {
  animation-delay: calc(var(--animation-duration-fast, 4s) * -1);
}
.pulse-2 {
  animation-delay: calc(var(--animation-duration-medium, 8s) * -1);
}

.blinkingCaret {
  position: relative;
}

.blinkingCaret::before,
.blinkingCaret::after {
  content: "";
  position: absolute;
  top: 0;
  bottom: 0;
  left: 100%;
  margin-left: 0.1em;
  animation: neon-blink 1.1s ease-in-out infinite;
}

.blinkingCaret::before {
  width: 2px;
  background-color: rgb(var(--accent-rgb)); /* Use theme variable */
  z-index: 2;
}

.blinkingCaret::after {
  width: 2px;
  background-color: transparent;
  box-shadow: 0 0 5px rgb(var(--accent-rgb)), 0 0 10px rgb(var(--accent-rgb)),
    0 0 15px rgb(var(--accent-rgb)), 0 0 20px rgba(var(--primary-rgb), 0.7);
  z-index: 1;
}

/* ==========================================================================
   Custom AOS Animations
   ========================================================================== */
@media screen {
  html:not(.no-js) body [data-aos="fade-up"] {
    -webkit-transform: translate3d(0, 14px, 0);
    transform: translate3d(0, 14px, 0);
  }
  html:not(.no-js) body [data-aos="fade-down"] {
    -webkit-transform: translate3d(0, -14px, 0);
    transform: translate3d(0, -14px, 0);
  }
  html:not(.no-js) body [data-aos="fade-right"] {
    -webkit-transform: translate3d(-14px, 0, 0);
    transform: translate3d(-14px, 0, 0);
  }
  html:not(.no-js) body [data-aos="fade-left"] {
    -webkit-transform: translate3d(14px, 0, 0);
    transform: translate3d(14px, 0, 0);
  }
  html:not(.no-js) body [data-aos="fade-up-right"] {
    -webkit-transform: translate3d(-14px, 14px, 0);
    transform: translate3d(-14px, 14px, 0);
  }

  html:not(.no-js) body [data-aos="fade-up-left"] {
    -webkit-transform: translate3d(14px, 14px, 0);
    transform: translate3d(14px, 14px, 0);
  }

  html:not(.no-js) body [data-aos="fade-down-right"] {
    -webkit-transform: translate3d(-14px, -14px, 0);
    transform: translate3d(-14px, -14px, 0);
  }

  html:not(.no-js) body [data-aos="fade-down-left"] {
    -webkit-transform: translate3d(14px, -14px, 0);
    transform: translate3d(14px, -14px, 0);
  }

  html:not(.no-js) body [data-aos="zoom-in-up"] {
    -webkit-transform: translate3d(0, 14px, 0) scale(0.6);
    transform: translate3d(0, 14px, 0) scale(0.6);
  }

  html:not(.no-js) body [data-aos="zoom-in-down"] {
    -webkit-transform: translate3d(0, -14px, 0) scale(0.6);
    transform: translate3d(0, -14px, 0) scale(0.6);
  }

  html:not(.no-js) body [data-aos="zoom-in-right"] {
    -webkit-transform: translate3d(-14px, 0, 0) scale(0.6);
    transform: translate3d(-14px, 0, 0) scale(0.6);
  }

  html:not(.no-js) body [data-aos="zoom-in-left"] {
    -webkit-transform: translate3d(14px, 0, 0) scale(0.6);
    transform: translate3d(14px, 0, 0) scale(0.6);
  }

  html:not(.no-js) body [data-aos="zoom-out-up"] {
    -webkit-transform: translate3d(0, 14px, 0) scale(1.2);
    transform: translate3d(0, 14px, 0) scale(1.2);
  }

  html:not(.no-js) body [data-aos="zoom-out-down"] {
    -webkit-transform: translate3d(0, -14px, 0) scale(1.2);
    transform: translate3d(0, -14px, 0) scale(1.2);
  }

  html:not(.no-js) body [data-aos="zoom-out-right"] {
    -webkit-transform: translate3d(-14px, 0, 0) scale(1.2);
    transform: translate3d(-14px, 0, 0) scale(1.2);
  }

  html:not(.no-js) body [data-aos="zoom-out-left"] {
    -webkit-transform: translate3d(14px, 0, 0) scale(1.2);
    transform: translate3d(14px, 0, 0) scale(1.2);
  }
}


================================================================================
FILE: app/styles/current-code-status.txt
================================================================================

Directory Tree:
.
├── animations.css
├── globals.css
├── mdx.css
├── theme.css
└── utility-patterns.css

================================================================================
FILE: globals.css
================================================================================

/* app/styles/globals.css (Updated for Tailwind v3) */

/* === Tailwind v3 Directives (Import base, components, and utilities) === */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* === Custom Style Imports (AFTER Tailwind directives for v3 JIT) === */
@import "./theme.css"; /* Defines CSS variables, custom component styles */
@import "./utility-patterns.css"; /* Defines custom utility classes like .btn */
@import "./animations.css"; /* Defines @keyframes and animation utilities */
@import "./mdx.css"; /* Defines styles for .prose / .mdx-prose */

/* === Base HTML/Body Styles === */
/* Apply base styles using variables defined in theme.css */
html,
body {
  max-width: 100vw;
  overflow-x: hidden; /* Prevent horizontal scroll */
}

body {
  /* Use CSS variables defined in theme.css */
  background-color: rgb(var(--background)); /* Ensure rgb() wrapper if needed */
  color: rgb(var(--foreground)); /* Ensure rgb() wrapper if needed */

  /* Apply font variables if defined in theme.css or layout.tsx */
  /* Example: font-family: var(--font-geist-sans); */

  /* Apply base typography variables from theme.css */
  font-size: var(--fontSize-base);
  line-height: var(--lineHeight-normal);

  /* Apply layout variables from theme.css */
  padding-top: var(--nav-height); /* Adjust if header height changes */

  /* Standard browser normalization */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Basic reset (also handled by @tailwind base) */
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

/* === Custom @layer definitions (Keep if you have them) === */
@layer utilities {
  .scrollbar-thin {
    scrollbar-width: thin;
  }
  .scrollbar-thin::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }
  .no-scrollbar {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
  /* Add other custom utilities if needed */
  .rtl {
    direction: rtl;
  }
}

================================================================================
FILE: mdx.css
================================================================================

/* app/styles/mdx.css (Simplified for v3 & Typography Plugin) */

/* Overrides or Additions to Typography Plugin --- */

/*  Link Styling Enhancements --- */
/* Base color/decoration comes from --tw-prose-links */
.mdx-prose a {
  text-underline-offset: 2px;
  transition: color 150ms ease-in-out, text-decoration-color 150ms ease-in-out;
  /* Optionally override decoration color alpha */
  text-decoration-color: rgba(var(--primary-rgb), 0.5);
}
.mdx-prose a:hover {
  /* Hover color comes from plugin/theme vars, just adjust decoration */
  text-decoration-color: rgba(var(--secondary-rgb), 0.7);
}

/* External Link Indicator */
.mdx-prose a[target="_blank"]::after {
  content: "↗";
  display: inline-block;
  margin-left: 0.25rem;
  font-size: 0.75em;
  opacity: 0.7;
  transition: opacity 0.2s ease-out;
}
.mdx-prose a[target="_blank"]:hover::after {
  opacity: 1;
}

/* List Styling --- */
/* Marker color comes from --tw-prose-bullets */
/* .mdx-prose ul li::marker { color: rgb(var(--primary-rgb)); } */

/*  Inline Code Styling --- */
/* Let plugin handle color via its defaults, just add bg/padding */
.mdx-prose :not(pre) > code {
  background-color: var(--gray-alpha-100);
  padding: 0.2em 0.4em;
  border-radius: 4px;
  font-size: var(--fontSize-sm);
  font-family: var(--font-geist-mono), monospace;
}

/* Rehype Pretty Code Styling --- */
.mdx-prose figure[data-rehype-pretty-code-figure] {
  margin-block: 1.5em;
}

.mdx-prose figure[data-rehype-pretty-code-figure] > pre {
  border: 1px solid rgb(var(--border-subtle-rgb)); /* Use border variable */
  border-radius: 6px;
  padding: var(--spacing-md);
  overflow-x: auto;
  font-size: 0.9em; /* Slightly smaller than base */
  line-height: 1.6;
  /* Background comes from --tw-prose-pre-bg */
}

.mdx-prose figure[data-rehype-pretty-code-figure] > pre > code {
  display: grid;
  font-family: var(--font-geist-mono), monospace; /* Ensure monospace font */
  background-color: transparent !important; /* Override theme bg */
  font-size: inherit;
  /* Text color comes from --tw-prose-pre-code (theme) or highlighting spans */
}

/* Code Highlights */
.mdx-prose .line--highlighted {
  background-color: rgba(var(--primary-rgb), 0.1); /* Use primary with alpha */
  box-shadow: inset 3px 0 0 0 rgb(var(--primary-rgb));
}
.mdx-prose .word--highlighted {
  background-color: rgba(
    var(--secondary-rgb),
    0.2
  ); /* Use secondary with alpha */
  padding: 0.1em 0.2em;
  border-radius: 3px;
}

/* Code Block Titles */
.mdx-prose [data-rehype-pretty-code-title] {
  font-size: 0.85em;
  font-family: var(--font-geist-mono), monospace;
  color: rgba(var(--foreground-rgb), 0.7);
  background-color: var(--gray-alpha-200); /* Slightly darker alpha gray */
  padding: var(--spacing-sm) var(--spacing-md);
  border: 1px solid rgb(var(--border-subtle-rgb));
  border-bottom: none;
  border-top-left-radius: 6px;
  border-top-right-radius: 6px;
  margin-bottom: 0;
}


================================================================================
FILE: theme.css
================================================================================

/* app/styles/theme.css (Corrected for v3 - Removed @layer wrappers) */

/* ========== Core CSS Variable Definitions ========== */
:root {
  /* --- Core Spacing & Typography Tokens --- */
  --spacing-base: 1rem;
  --spacing-xs: calc(var(--spacing-base) * 0.5);
  --spacing-sm: calc(var(--spacing-base) * 0.75);
  --spacing-md: var(--spacing-base);
  --spacing-lg: calc(var(--spacing-base) * 1.5);
  --spacing-xl: calc(var(--spacing-base) * 2);
  --spacing-2xl: calc(var(--spacing-base) * 3);

  --fontSize-base: clamp(1rem, 1.05cqw + 0.8rem, 1.25rem);
  --fontSize-sm: clamp(0.89rem, 0.95cqw + 0.7rem, 1.13rem);
  --fontSize-xs: clamp(0.8rem, 0.91cqw + 0.6rem, 0.98rem);

  --fontSize-h1: clamp(2.5rem, 5vw, 3.5rem);
  --fontSize-h2: clamp(2rem, 4vw, 3rem);
  --fontSize-h3: clamp(1.75rem, 3vw, 2.5rem);
  --fontSize-h4: clamp(1.5rem, 2.5vw, 2rem);

  --lineHeight-tight: 1.25;
  --lineHeight-normal: 1.75;
  --lineHeight-relaxed: 1.85;

  /* --- Layout Tokens --- */
  --nav-height: 3.75rem;
  --max-width: 70rem;
  --slide-height: 100vh;

  /*  Color Tokens (Light Theme - RGB values) --- */
  --background-rgb: 255 255 255;
  --foreground-rgb: 23 23 23;
  --primary-rgb: 168 85 247; /* Corresponds to purple-500 */
  --secondary-rgb: 99 102 241; /* Corresponds to indigo-500 */
  --accent-rgb: 219 39 119; /* Corresponds to pink-600 (example) */
  --border-subtle-rgb: 226 232 240; /* slate-200 */
  --border-medium-rgb: 203 213 225; /* slate-300 */
  --gray-alpha-100: rgba(var(--foreground-rgb), 0.06);
  --gray-alpha-200: rgba(var(--foreground-rgb), 0.1);
}

/* Dark Theme Overrides --- */
.dark {
  --background-rgb: 15 23 42; /* slate-900 */
  --foreground-rgb: 241 245 249; /* slate-100 (Brighter) */
  --primary-rgb: 192 132 252;
  --secondary-rgb: 129 140 248;
  --accent-rgb: 216 180 254;
  --border-subtle-rgb: 51 65 85;
  --border-medium-rgb: 71 85 105;
  --button-primary-hover-rgb: 216 180 254;
  --button-secondary-hover-rgb: 99 102 241;
  --dark-base-rgb: 15 23 42;
  --dark-elevated-rgb: 30 41 59;
  --gray-alpha-100: rgba(var(--foreground-rgb), 0.08);
  --gray-alpha-200: rgba(var(--foreground-rgb), 0.12);
}

/* Global HTML Styles --- */
html {
  color-scheme: light dark;
  scroll-behavior: smooth;
  font-size: 100%;
}

/* Styles for Swiper carousel */
.stellar-carousel .swiper-slide {
  opacity: 0.8;
  transition-property: opacity;
  transition-timing-function: theme(
    "transitionTimingFunction.DEFAULT",
    cubic-bezier(0.4, 0, 0.2, 1)
  );
  transition-duration: theme("transitionDuration.150", 150ms);
  &.swiper-slide-active {
    opacity: 1;
  }
}

/* Styles for scroll controls */
.scroll-controls {
  position: sticky;
  bottom: theme("spacing.8", "2rem");
  z-index: 50;
  display: flex;
  justify-content: flex-end;
  margin-right: calc(var(--scrollbar-width, 0px) + 1rem);
}

/* ==========================================================================
   Utility Overrides & Prose Styles (No @layer needed)
   ========================================================================== */

/* Layout Utilities --- */
.content-grid {
  display: grid;
  grid-template-columns: 40fr 5fr 5fr 40fr;
  grid-template-rows: minmax(var(--slide-height), auto);
}

.sticky-col {
  position: sticky;
  top: 0; /* Adjust if needed, e.g., top-[var(--nav-height)] */
  height: var(--slide-height);
  scroll-snap-align: start;
}

/* Scroll Utilities --- */
[data-scroll-section] {
  scroll-snap-type: y mandatory;
  scroll-behavior: smooth;
  overscroll-behavior: contain;
}

================================================================================
FILE: utility-patterns.css
================================================================================

/* app/styles/utility-patterns.css */

/* === Typography Components (Using CSS Variables from theme.css) === */
.heading-1 {
  font-size: var(--fontSize-h1);
  font-weight: 800; /* extrabold */
  line-height: var(--lineHeight-tight);
}
.heading-2 {
  font-size: var(--fontSize-h2);
  font-weight: 800; /* extrabold */
  line-height: var(--lineHeight-tight);
}
.heading-3 {
  font-size: var(--fontSize-h3);
  font-weight: 700; /* bold */
  line-height: var(--lineHeight-tight);
}
.heading-4 {
  font-size: var(--fontSize-h4);
  font-weight: 700; /* bold */
  line-height: var(--lineHeight-tight);
}

/* === Button Components (Using CSS Variables from theme.css) === */
/* These act as base styles that can be extended with Tailwind classes */
.btn {
  @apply inline-flex items-center justify-center rounded-full px-[var(--spacing-md)] py-[0.375rem] text-[length:var(--fontSize-sm)] leading-[var(--lineHeight-normal)] font-medium transition-all duration-150 whitespace-nowrap border border-transparent;
  /* Apply base styles using @apply for brevity */
}

.btn-sm {
  @apply inline-flex items-center justify-center rounded-full px-[var(--spacing-sm)] py-[var(--spacing-xs)] text-[length:var(--fontSize-xs)] leading-[var(--lineHeight-normal)] font-medium transition-all duration-150 whitespace-nowrap border border-transparent;
  /* Use --fontSize-xs defined in theme.css */
}

/* === Form Components === */
/* NOTE: @tailwindcss/forms plugin provides base styles.
   These custom classes might override or supplement them.
   Review if they are all necessary after enabling the plugin.
   Using Tailwind classes directly in components might be simpler.
*/
.form-input,
.form-textarea,
.form-multiselect,
.form-select {
  /* Example using Tailwind classes via @apply - assumes forms plugin is active */
  @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm dark:bg-slate-800 dark:border-slate-600 dark:text-slate-200 dark:placeholder-slate-500 dark:focus:border-indigo-400 dark:focus:ring-indigo-400;
  /* Adjust colors (e.g., border-gray-300, focus:border-indigo-500) to match your theme */
  font-size: var(--fontSize-sm); /* Override font size if needed */
}

/* Placeholder color is often handled by the base input styles */
/* .form-input::placeholder,
.form-textarea::placeholder {
 // Example if needed
   color: theme('colors.slate.500');
} */

.form-select {
  @apply pr-10; /* Keep padding for arrow */
}

.form-checkbox,
.form-radio {
  /* Example using Tailwind classes via @apply - assumes forms plugin is active */
  @apply rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:border-slate-600 dark:bg-slate-800 dark:checked:bg-indigo-500 dark:focus:ring-indigo-400;
  /* Adjust colors to match your theme */
}

/* === Scrollbar Utilities (Defined directly - Layer Removed) === */
.scrollbar-thin {
  scrollbar-width: thin;
}
.scrollbar-thin::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}
.no-scrollbar {
  scrollbar-width: none;
  -ms-overflow-style: none;
}
.no-scrollbar::-webkit-scrollbar {
  display: none;
}
.no-search-decoration::-webkit-search-decoration,
.no-search-decoration::-webkit-search-cancel-button,
.no-search-decoration::-webkit-search-results-button,
.no-search-decoration::-webkit-search-results-decoration {
  -webkit-appearance: none;
}

================================================================================
FILE: utility-patterns.css
================================================================================


================================================================================
FILE: app/styles/globals.css
================================================================================

/* app/styles/globals.css (Updated for Tailwind v3) */

/* === Tailwind v3 Directives (Import base, components, and utilities) === */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* === Custom Style Imports (AFTER Tailwind directives for v3 JIT) === */
@import "./theme.css"; /* Defines CSS variables, custom component styles */
@import "./utility-patterns.css"; /* Defines custom utility classes like .btn */
@import "./animations.css"; /* Defines @keyframes and animation utilities */
@import "./mdx.css"; /* Defines styles for .prose / .mdx-prose */

/* === Base HTML/Body Styles === */
/* Apply base styles using variables defined in theme.css */
html,
body {
  max-width: 100vw;
  overflow-x: hidden; /* Prevent horizontal scroll */
}

body {
  /* Use CSS variables defined in theme.css */
  background-color: rgb(var(--background)); /* Ensure rgb() wrapper if needed */
  color: rgb(var(--foreground)); /* Ensure rgb() wrapper if needed */

  /* Apply font variables if defined in theme.css or layout.tsx */
  /* Example: font-family: var(--font-geist-sans); */

  /* Apply base typography variables from theme.css */
  font-size: var(--fontSize-base);
  line-height: var(--lineHeight-normal);

  /* Apply layout variables from theme.css */
  padding-top: var(--nav-height); /* Adjust if header height changes */

  /* Standard browser normalization */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Basic reset (also handled by @tailwind base) */
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

/* === Custom @layer definitions (Keep if you have them) === */
/* Example:  scrollbar utilities defined here */
@layer utilities {
  .scrollbar-thin {
    scrollbar-width: thin;
  }
  .scrollbar-thin::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }
  .no-scrollbar {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
  /* Add other custom utilities if needed */
  .rtl {
    direction: rtl;
  }
}


================================================================================
FILE: app/styles/mdx.css
================================================================================

/* app/styles/mdx.css (Simplified for v3 & Typography Plugin) */

/* Overrides or Additions to Typography Plugin --- */

/*  Link Styling Enhancements --- */
/* Base color/decoration comes from --tw-prose-links */
.mdx-prose a {
  text-underline-offset: 2px;
  transition: color 150ms ease-in-out, text-decoration-color 150ms ease-in-out;
  /* Optionally override decoration color alpha */
  text-decoration-color: rgba(var(--primary-rgb), 0.5);
}
.mdx-prose a:hover {
  /* Hover color comes from plugin/theme vars, just adjust decoration */
  text-decoration-color: rgba(var(--secondary-rgb), 0.7);
}

/* External Link Indicator */
.mdx-prose a[target="_blank"]::after {
  content: "↗";
  display: inline-block;
  margin-left: 0.25rem;
  font-size: 0.75em;
  opacity: 0.7;
  transition: opacity 0.2s ease-out;
}
.mdx-prose a[target="_blank"]:hover::after {
  opacity: 1;
}

/* List Styling --- */
/* Marker color comes from --tw-prose-bullets */
/* .mdx-prose ul li::marker { color: rgb(var(--primary-rgb)); } */

/*  Inline Code Styling --- */
/* Let plugin handle color via its defaults, just add bg/padding */
.mdx-prose :not(pre) > code {
  background-color: var(--gray-alpha-100);
  padding: 0.2em 0.4em;
  border-radius: 4px;
  font-size: var(--fontSize-sm);
  font-family: var(--font-geist-mono), monospace;
}

/* Rehype Pretty Code Styling --- */
.mdx-prose figure[data-rehype-pretty-code-figure] {
  margin-block: 1.5em;
}

.mdx-prose figure[data-rehype-pretty-code-figure] > pre {
  border: 1px solid rgb(var(--border-subtle-rgb)); /* Use border variable */
  border-radius: 6px;
  padding: var(--spacing-md);
  overflow-x: auto;
  font-size: 0.9em; /* Slightly smaller than base */
  line-height: 1.6;
  /* Background comes from --tw-prose-pre-bg */
}

.mdx-prose figure[data-rehype-pretty-code-figure] > pre > code {
  display: grid;
  font-family: var(--font-geist-mono), monospace; /* Ensure monospace font */
  background-color: transparent !important; /* Override theme bg */
  font-size: inherit;
  /* Text color comes from --tw-prose-pre-code (theme) or highlighting spans */
}

/* Code Highlights */
.mdx-prose .line--highlighted {
  background-color: rgba(var(--primary-rgb), 0.1); /* Use primary with alpha */
  box-shadow: inset 3px 0 0 0 rgb(var(--primary-rgb));
}
.mdx-prose .word--highlighted {
  background-color: rgba(
    var(--secondary-rgb),
    0.2
  ); /* Use secondary with alpha */
  padding: 0.1em 0.2em;
  border-radius: 3px;
}

/* Code Block Titles */
.mdx-prose [data-rehype-pretty-code-title] {
  font-size: 0.85em;
  font-family: var(--font-geist-mono), monospace;
  color: rgba(var(--foreground-rgb), 0.7);
  background-color: var(--gray-alpha-200); /* Slightly darker alpha gray */
  padding: var(--spacing-sm) var(--spacing-md);
  border: 1px solid rgb(var(--border-subtle-rgb));
  border-bottom: none;
  border-top-left-radius: 6px;
  border-top-right-radius: 6px;
  margin-bottom: 0;
}


================================================================================
FILE: app/styles/theme.css
================================================================================

/* app/styles/theme.css (Corrected for v3 - Removed @layer wrappers) */

/* ========== Core CSS Variable Definitions ========== */
:root {
  /* --- Core Spacing & Typography Tokens --- */
  --spacing-base: 1rem;
  --spacing-xs: calc(var(--spacing-base) * 0.5);
  --spacing-sm: calc(var(--spacing-base) * 0.75);
  --spacing-md: var(--spacing-base);
  --spacing-lg: calc(var(--spacing-base) * 1.5);
  --spacing-xl: calc(var(--spacing-base) * 2);
  --spacing-2xl: calc(var(--spacing-base) * 3);

  --fontSize-base: clamp(1rem, 1.05cqw + 0.8rem, 1.25rem);
  --fontSize-sm: clamp(0.89rem, 0.95cqw + 0.7rem, 1.13rem);
  --fontSize-xs: clamp(0.8rem, 0.91cqw + 0.6rem, 0.98rem);

  --fontSize-h1: clamp(2.5rem, 5vw, 3.5rem);
  --fontSize-h2: clamp(2rem, 4vw, 3rem);
  --fontSize-h3: clamp(1.75rem, 3vw, 2.5rem);
  --fontSize-h4: clamp(1.5rem, 2.5vw, 2rem);

  --lineHeight-tight: 1.25;
  --lineHeight-normal: 1.75;
  --lineHeight-relaxed: 1.85;

  /* --- Layout Tokens --- */
  --nav-height: 3.75rem;
  --max-width: 70rem;
  --slide-height: 100vh;

  /*  Color Tokens (Light Theme - RGB values) --- */
  --background-rgb: 255 255 255;
  --foreground-rgb: 23 23 23;
  --primary-rgb: 168 85 247; /* Corresponds to purple-500 */
  --secondary-rgb: 99 102 241; /* Corresponds to indigo-500 */
  --accent-rgb: 219 39 119; /* Corresponds to pink-600 (example) */
  --border-subtle-rgb: 226 232 240; /* slate-200 */
  --border-medium-rgb: 203 213 225; /* slate-300 */
  --gray-alpha-100: rgba(var(--foreground-rgb), 0.06);
  --gray-alpha-200: rgba(var(--foreground-rgb), 0.1);
}

/* Dark Theme Overrides --- */
.dark {
  --background-rgb: 15 23 42; /* slate-900 */
  --foreground-rgb: 241 245 249; /* slate-100 (Brighter) */
  --primary-rgb: 192 132 252;
  --secondary-rgb: 129 140 248;
  --accent-rgb: 216 180 254;
  --border-subtle-rgb: 51 65 85;
  --border-medium-rgb: 71 85 105;
  --button-primary-hover-rgb: 216 180 254;
  --button-secondary-hover-rgb: 99 102 241;
  --dark-base-rgb: 15 23 42;
  --dark-elevated-rgb: 30 41 59;
  --gray-alpha-100: rgba(var(--foreground-rgb), 0.08);
  --gray-alpha-200: rgba(var(--foreground-rgb), 0.12);
}

/* Global HTML Styles --- */
html {
  color-scheme: light dark;
  scroll-behavior: smooth;
  font-size: 100%;
}
/* Body styles applied in globals.css */

/* Styles for Swiper carousel */
.stellar-carousel .swiper-slide {
  opacity: 0.8;
  transition-property: opacity;
  transition-timing-function: theme(
    "transitionTimingFunction.DEFAULT",
    cubic-bezier(0.4, 0, 0.2, 1)
  );
  transition-duration: theme("transitionDuration.150", 150ms);
  &.swiper-slide-active {
    opacity: 1;
  }
}

/* Styles for scroll controls */
.scroll-controls {
  position: sticky;
  bottom: theme("spacing.8", "2rem");
  z-index: 50;
  display: flex;
  justify-content: flex-end;
  margin-right: calc(var(--scrollbar-width, 0px) + 1rem);
}

/* ==========================================================================
   Utility Overrides & Prose Styles (No @layer needed)
   ========================================================================== */

/* Layout Utilities --- */
.content-grid {
  display: grid;
  grid-template-columns: 40fr 5fr 5fr 40fr;
  grid-template-rows: minmax(var(--slide-height), auto);
}

.sticky-col {
  position: sticky;
  top: 0; /* Adjust if needed, e.g., top-[var(--nav-height)] */
  height: var(--slide-height);
  scroll-snap-align: start;
}

/* Scroll Utilities --- */
[data-scroll-section] {
  scroll-snap-type: y mandatory;
  scroll-behavior: smooth;
  overscroll-behavior: contain;
}


================================================================================
FILE: app/styles/utility-patterns.css
================================================================================

/* app/styles/utility-patterns.css */

/* === Typography Components (Using CSS Variables from theme.css) === */
.heading-1 {
  font-size: var(--fontSize-h1);
  font-weight: 800; /* extrabold */
  line-height: var(--lineHeight-tight);
}
.heading-2 {
  font-size: var(--fontSize-h2);
  font-weight: 800; /* extrabold */
  line-height: var(--lineHeight-tight);
}
.heading-3 {
  font-size: var(--fontSize-h3);
  font-weight: 700; /* bold */
  line-height: var(--lineHeight-tight);
}
.heading-4 {
  font-size: var(--fontSize-h4);
  font-weight: 700; /* bold */
  line-height: var(--lineHeight-tight);
}

/* === Button Components (Using CSS Variables from theme.css) === */
/* These act as base styles that can be extended with Tailwind classes */
.btn {
  @apply inline-flex items-center justify-center rounded-full px-[var(--spacing-md)] py-[0.375rem] text-[length:var(--fontSize-sm)] leading-[var(--lineHeight-normal)] font-medium transition-all duration-150 whitespace-nowrap border border-transparent;
  /* Apply base styles using @apply for brevity */
}

.btn-sm {
  @apply inline-flex items-center justify-center rounded-full px-[var(--spacing-sm)] py-[var(--spacing-xs)] text-[length:var(--fontSize-xs)] leading-[var(--lineHeight-normal)] font-medium transition-all duration-150 whitespace-nowrap border border-transparent;
  /* Use --fontSize-xs defined in theme.css */
}

/* === Form Components === */
/* NOTE: @tailwindcss/forms plugin provides base styles.
   These custom classes might override or supplement them.
   Review if they are all necessary after enabling the plugin.
   Using Tailwind classes directly in components might be simpler.
*/
.form-input,
.form-textarea,
.form-multiselect,
.form-select {
  /* Example using Tailwind classes via @apply - assumes forms plugin is active */
  @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm dark:bg-slate-800 dark:border-slate-600 dark:text-slate-200 dark:placeholder-slate-500 dark:focus:border-indigo-400 dark:focus:ring-indigo-400;
  /* Adjust colors (e.g., border-gray-300, focus:border-indigo-500) to match your theme */
  font-size: var(--fontSize-sm); /* Override font size if needed */
}

/* Placeholder color is often handled by the base input styles */
/* .form-input::placeholder,
.form-textarea::placeholder {
 // Example if needed
   color: theme('colors.slate.500');
} */

.form-select {
  @apply pr-10; /* Keep padding for arrow */
}

.form-checkbox,
.form-radio {
  /* Example using Tailwind classes via @apply - assumes forms plugin is active */
  @apply rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:border-slate-600 dark:bg-slate-800 dark:checked:bg-indigo-500 dark:focus:ring-indigo-400;
  /* Adjust colors to match your theme */
}

/* === Scrollbar Utilities (Defined directly - Layer Removed) === */
/* REMOVED @layer utilities wrapper */
.scrollbar-thin {
  scrollbar-width: thin;
}
.scrollbar-thin::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}
.no-scrollbar {
  scrollbar-width: none;
  -ms-overflow-style: none;
}
.no-scrollbar::-webkit-scrollbar {
  display: none;
}
.no-search-decoration::-webkit-search-decoration,
.no-search-decoration::-webkit-search-cancel-button,
.no-search-decoration::-webkit-search-results-button,
.no-search-decoration::-webkit-search-results-decoration {
  -webkit-appearance: none;
}



================================================================================
FILE: app/test/page.tsx
================================================================================

// app/test/page.tsx
export default function TestPage() {
  return (
    <div className="p-10">
      <h1>Test Page</h1>
      <div className="mt-4 border-4 border-red-500 p-4">
        Red Border Test Div
      </div>
      <div className="mt-4 border-4 border-[rgb(var(--primary))] p-4">
        Primary Variable Border Test Div
      </div>
      <div className="mt-4 text-red-500">Red Text Test</div>
      <div className="mt-4 text-primary">Primary Variable Text Test</div>
    </div>
  );
}


================================================================================
FILE: components/DashboardButton.tsx
================================================================================

// import { getCurrentUser } from "@/lib/dal"
import Button from "./ui/Button"
import Link from "next/link"

// const DashboardButtonSignedIn = async () => {
//   const user = await getCurrentUser()
//   return (
//     <>
//       {user ? (
//         <Link href="/dashboard">
//           <Button>Go to Dashboard</Button>
//         </Link>
//       ) : (
//         <div className="flex items-center space-x-4">
//           <Link href="/signin">
//             <Button variant="outline">Sign in</Button>
//           </Link>
//           <Link href="/signup">
//             <Button>Sign up</Button>
//           </Link>
//         </div>
//       )}
//     </>
//   )
// }

const DashboardButton = () => {
  return (
    <div className="flex items-center space-x-4">
      <Link href="/signin">
        <Button variant="outline">Sign in</Button>
      </Link>
      <Link href="/signup">
        <Button>Sign up</Button>
      </Link>
    </div>
  )
}

export default DashboardButton


================================================================================
FILE: components/PostItem.tsx
================================================================================

// components/PostItem.tsx (for Project 1)

import Image, { StaticImageData } from 'next/image';
import Link from 'next/link';
import { PostMeta } from '@/lib/posts'; // Import your PostMeta interface
import { Route } from 'next';

// Assuming a PostDate component exists or you format date directly
// import PostDate from '@/components/PostDate'; // Example path

// Extend PostMeta if image or other specific fields are needed for the item
interface PostItemProps extends PostMeta {
  image?: string | StaticImageData; // Optional image prop
  baseUrl: string; // Base URL for the link (e.g., '/playbook', '/changelog')
}

export default function PostItem({
  slug,
  title,
  date,
  description,
  author, // Optional author from PostMeta
  tags, // Optional tags from PostMeta
  image, // Optional image prop
  baseUrl, // Base URL for links
}: PostItemProps) {

  const postUrl = `${baseUrl}/${slug}` as Route;

  return (
    // Mimic the article structure and group styling from Project 2
    <article className="pt-12 first-of-type:pt-0 group">
      <div className="md:flex md:gap-6 lg:gap-8"> {/* Use gap for spacing */}

        {/* Date Section (Left Column) */}
        <div className="w-full md:w-48 md:shrink-0 mb-4 md:mb-0">
          {/* Mimic the styled time element */}
          <time className="text-sm inline-flex items-center md:block md:leading-8 mb-3">
            {/* Decorative line/dot element */}
            <span className="absolute h-full top-0 left-[2px] w-0.5 bg-slate-800 [mask-image:_linear-gradient(0deg,transparent,theme(colors.white)_150px,theme(colors.white))] -z-10" aria-hidden="true"></span>
            <span className="relative inline-flex items-center"> {/* Wrapper for dot+date */}
              <span className="absolute left-[-2.125rem] md:left-[-2.375rem] transform -translate-x-1/2 w-1.5 h-1.5 rounded-full bg-primary ring-4 ring-primary/30" aria-hidden="true"></span>
              {/* Format the date */}
              <span className="ml-[-1.625rem] md:ml-0 md:pl-5 text-slate-400">
                {new Date(date).toLocaleDateString("en-US", {
                  year: 'numeric', month: 'long', day: 'numeric',
                })}
                {/* Optional: Add PostDate component if you have one */}
                {/* <PostDate dateString={date} /> */}
              </span>
            </span>
          </time>
          {/* Optional: Author under date */}
          {author && (
             <div className="text-xs text-slate-500 md:pl-5">by {author}</div>
          )}
        </div>

        {/* Content Section (Right Column) */}
        <div className="grow pb-12 group-last-of-type:pb-0 border-b border-slate-800 group-last-of-type:border-none">
          {/* Optional Image */}
          {image && (
             <figure className="bg-gradient-to-b from-slate-300/20 to-transparent rounded-xl md:rounded-2xl p-px mb-6">
               <Link href={postUrl}>
                 <Image
                   className="w-full rounded-[inherit] aspect-video object-cover" // Maintain aspect ratio
                   src={image}
                   width={574} // Adjust default width/height as needed
                   height={326}
                   alt={title}
                 />
               </Link>
             </figure>
          )}

          {/* Header with Title */}
          <header>
            <Link href={postUrl}>
              <h2 className="h3 font-bold bg-clip-text text-transparent bg-gradient-to-r from-slate-200/60 via-slate-200 to-slate-200/60 pb-2 hover:text-slate-200 transition-colors">
                {title}
              </h2>
            </Link>
          </header>

          {/* Tags */}
           {tags && tags.length > 0 && (
             <div className="flex flex-wrap gap-2 my-3">
               {tags.map((tag) => (
                 <span
                   key={tag}
                   className="inline-block text-xs font-medium rounded-full px-2.5 py-0.5 bg-slate-700/50 text-primary"
                 >
                   {tag}
                 </span>
               ))}
             </div>
           )}

          {/* Description (Excerpt) */}
          <p className="text-slate-400 leading-relaxed mb-4">
            {description}
          </p>

          {/* Read More Link */}
          <Link
            href={postUrl}
            className="inline-flex items-center font-medium text-primary hover:text-secondary transition-colors duration-150 ease-in-out group/link" // Use different group name if needed
          >
            <span>Read more</span>
            <span className="tracking-normal text-primary group-hover/link:translate-x-0.5 transition-transform duration-150 ease-in-out ml-1">
              ->
            </span>
          </Link>
        </div>
      </div>
    </article>
  );
}


================================================================================
FILE: components/RotatingNebula.tsx
================================================================================

// components/RotatingNebula.tsx
"use client";

import React, { useRef } from "react";
import { Canvas, useFrame, useLoader } from "@react-three/fiber";
import { TextureLoader } from "three";
import * as THREE from "three"; // Keep this if using other THREE.* constants like BackSide
import { cn } from "@/lib/utils";

interface RotatingNebulaProps {
  textureUrl?: string;
  rotationSpeed?: number;
  className?: string;
}

// NebulaMesh component remains the same
function NebulaMesh({
  textureUrl,
  rotationSpeed = 0.001,
}: RotatingNebulaProps) {
  const meshRef = useRef<THREE.Mesh>(null!);
  // useLoader now uses the correctly imported TextureLoader
  const texture = useLoader(
    TextureLoader,
    textureUrl || "/textures/nebula-blue-purple.jpg"
  );
  useFrame((state, delta) => {
    if (meshRef.current) {
      meshRef.current.rotation.y += rotationSpeed;
      meshRef.current.rotation.x += rotationSpeed * 0.5;
    }
  });

  return (
    <mesh ref={meshRef} scale={1.5}>
      <sphereGeometry args={[5, 64, 32]} />
      <meshBasicMaterial
        map={texture}
        side={THREE.BackSide} // Using THREE namespace here
        toneMapped={false}
      />
    </mesh>
  );
}

export default function RotatingNebula({
  textureUrl,
  rotationSpeed,
  className,
}: RotatingNebulaProps) {
  return (
    <Canvas
      camera={{ position: [0, 0, 10], fov: 50 }}
      className={cn("w-full h-full", className)}
    >
      <NebulaMesh textureUrl={textureUrl} rotationSpeed={rotationSpeed} />
    </Canvas>
  );
}


================================================================================
FILE: components/ScrollSlide.tsx
================================================================================

// components/ScrollSlide.tsx
'use client';
import { useEffect, useRef } from 'react';

export default function ScrollSlide() {
  const containerRef = useRef<HTMLDivElement>(null);
  const leftColRef = useRef<HTMLDivElement>(null);
  const rightColRef = useRef<HTMLDivElement>(null);

  // Basic height synchronization
  useEffect(() => {
    const setHeights = () => {
      if (containerRef.current) {
        const height = containerRef.current.offsetHeight;
        containerRef.current.style.setProperty('--slide-height', `${height}px`);
      }
    };

    setHeights();
    window.addEventListener('resize', setHeights);
    return () => window.removeEventListener('resize', setHeights);
  }, []);

  return (
    <div
      ref={containerRef}
      className="h-screen overflow-y-auto relative"
      style={{ scrollBehavior: 'smooth' }}
    >
      {/* Main Grid Container */}
      <div className="grid grid-cols-[40fr_5fr_5fr_40fr] min-h-[var(--slide-height)]">
        {/* Left Sticky Column */}
        <div
          ref={leftColRef}
          className="sticky top-0 h-[var(--slide-height)] flex flex-col justify-between p-8"
        >
          <div className="space-y-4">
            <h2 className="text-4xl font-bold">Section Title</h2>
            <p className="text-lg">Section content that remains sticky...</p>
          </div>
          <div className="flex gap-4">
            <button className="px-4 py-2 bg-black text-white rounded-full">
              Previous
            </button>
            <button className="px-4 py-2 bg-black text-white rounded-full">
              Next
            </button>
          </div>
        </div>

        {/* Right Sticky Column */}
        <div
          ref={rightColRef}
          className="sticky top-0 h-[var(--slide-height)] col-start-4 flex items-center justify-center"
        >
          <div className="w-full max-w-md h-64 bg-gray-100 rounded-xl" />
        </div>

        {/* Scroll Content */}
        <div className="col-span-full row-start-1 min-h-[200vh]">
          <div className="grid grid-cols-[40fr_5fr_5fr_40fr]">
            {/* Content that scrolls between columns */}
            {Array.from({ length: 10 }).map((_, i) => (
              <div key={i} className="h-screen p-8 border-t">
                <p className="text-lg">Scrollable content section {i + 1}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}


================================================================================
FILE: components/ThemeToggle.tsx
================================================================================

'use client'

import { useTheme } from 'next-themes'

export default function ThemeToggle() {
  const { theme, setTheme } = useTheme()

  return (
    <button
      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
      className="p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800"
    >
      {theme === 'dark' ? '🌙' : '☀️'}
    </button>
  )
}


================================================================================
FILE: components/Timestamp.tsx
================================================================================

'use client'

import { useState, useLayoutEffect } from 'react'

export function Timestamp() {
  const [time, setTime] = useState<number | null>(null)
  useLayoutEffect(() => {
    // You can determine when and how often to update
    // the time here. In this example we update it only once
    setTime(new Date().getFullYear())
  }, [])
  if (time) {
    return time
  }
  return null
}


================================================================================
FILE: components/animate.tsx
================================================================================

"use client"
import AOS from "aos"
import { useEffect } from "react"

const Animate = () => {
  useEffect(() => {
    AOS.init({
      once: true,
      disable: "phone",
      duration: 1000,
      easing: "ease-out-cubic",
    })
  })

  return null
}

export default Animate


================================================================================
FILE: components/feature/feature.module.css
================================================================================

.section {
    position: relative;
}

.featureBox {
    max-width: var(--maxWidth);
    margin-left: auto;
    margin-right: auto;
    padding-left: 1.5rem;
    padding-right: 1.5rem;
}

.contentWrapper {
    padding-top: 4rem;
    padding-bottom: 3rem;
    border-bottom: 1px solid rgb(30, 41, 59);
}

@media (min-width: 768px) {
    .contentWrapper {
        padding-top: 8rem;
        padding-bottom: 5rem;
    }
}

.header {
    max-width: 48rem;
    margin-left: auto;
    margin-right: auto;
    text-align: center;
    padding-bottom: 3rem;
}

@media (min-width: 768px) {
    .header {
        padding-bottom: 5rem;
    }
}

.title {
    background-clip: text;
    color: transparent;
    background-image: linear-gradient(to right, rgba(226, 232, 240, 0.6), rgb(226, 232, 240), rgba(226, 232, 240, 0.6));
    padding-bottom: 1rem;
    font-weight: 600; /* Missing from Tailwind's font-semibold */
}

.description {
    font-size: 1.125rem;
    color: rgb(148, 163, 184);
}

.imageContainer {
    max-width: 48rem;
    margin-left: auto;
    margin-right: auto;
}

.imageWrapper {
    position: relative;
    height: 100%;
    background-color: rgb(15, 23, 42);
    border-radius: inherit;
    z-index: 20;
    overflow: hidden;
}

.radialGradient {
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translate(-50%, 50%);
    pointer-events: none;
    z-index: -10;
    width: 50%;
    aspect-ratio: 1;
}

.gradientCircle {
    position: absolute;
    inset: 0;
    transform: translateZ(0);
    background-color: rgb(168, 85, 247);
    border-radius: 9999px;
    filter: blur(120px);

}

.h2 {
    font-size: 2.25rem; /* text-4xl */
    line-height: 2.5rem;

    @media (min-width: 768px) {
        font-size: 3rem; /* text-5xl */
        line-height: 1;
    }
}


================================================================================
FILE: components/feature/feature.tsx
================================================================================

import Image from "next/image";
import Highlighter, { HighlighterItem } from "../highlight/highlighter";
import Img04 from "@/public/assets/img-4.png";
import styles from "./feature.module.css";

export default function Features() {
  return (
    <section className={styles.section}>
      <div className={styles.featureBox}>
        <div className={styles.contentWrapper}>
          {/* Section header */}
          <div className={styles.header}>
            <h2 className={styles.h2}>More than a login box</h2>
            <p className={styles.description}>
              There are many variations available, but the majority have
              suffered alteration in some form, by injected humour, or
              randomized words which don&apos;t look even slightly believable.
            </p>
          </div>

          <div className={styles.imageContainer}>
            <div data-aos="fade-down">
              <Highlighter className="group">
                <HighlighterItem>
                  <div className={styles.imageWrapper}>
                    {/* Radial gradient */}
                    <div className={styles.radialGradient} aria-hidden="true">
                      <div className={styles.gradientCircle} />
                    </div>
                    <Image
                      src={Img04}
                      width={768}
                      height={400}
                      alt="Feature 04"
                    />
                  </div>
                </HighlighterItem>
              </Highlighter>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}


================================================================================
FILE: components/fibonacci-spiral/FibonacciSpiral.tsx
================================================================================

// components/FibonacciSpiral/FibonacciSpiral.tsx
"use client"; // This component needs browser APIs (canvas) and hooks

import React, { useState, useRef, useEffect, useCallback } from "react";
import { cn } from "@/lib/utils"; // Assuming your cn utility is here

// Constants
const DEFAULT_TERMS = 12;
const MAX_TERMS = 25; // Practical limit for visibility without excessive scaling
const ANIMATION_DELAY_MS = 150; // Delay between drawing segments


/**
 * Generates an array containing the first n Fibonacci numbers.
 */
const generateFibonacci = (n: number): number[] => {
  if (n <= 0) return [];
  if (n === 1) return [0];
  const sequence = [0, 1];
  for (let i = 2; i < n; i++) {
    // Prevent excessively large numbers that might cause issues
    const nextFib = sequence[i - 1] + sequence[i - 2];
    if (!Number.isSafeInteger(nextFib)) {
      console.warn(
        `Fibonacci number exceeds safe integer limit at term ${i}. Stopping sequence.`
      );
      break;
    }
    sequence.push(nextFib);
  }
  return sequence;
};


const FibonacciSpiral: React.FC = () => {
  const [numTerms, setNumTerms] = useState<number>(DEFAULT_TERMS);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const ctxRef = useRef<CanvasRenderingContext2D | null>(null);
  const animationTimeoutIdRef = useRef<NodeJS.Timeout | null>(null);
  const scaleRef = useRef<number>(10); // Initial scale factor

  /** Adjusts canvas scale based on the number of terms for better visibility */
  const adjustScale = useCallback((terms: number) => {
    if (terms > 18) scaleRef.current = 1.5;
    else if (terms > 15) scaleRef.current = 3;
    else if (terms > 12) scaleRef.current = 6;
    else if (terms > 9) scaleRef.current = 8;
    else scaleRef.current = 10;
  }, []);

  /** Draws the spiral segment by segment with animation */
  const drawSpiralAnimated = useCallback((fibNumbers: number[]) => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    if (!ctxRef.current) ctxRef.current = canvas.getContext("2d");
    const ctx = ctxRef.current;
    if (!ctx) return;

    const scale = scaleRef.current;
    const { width, height } = canvas;

    //  Stop any previous animation ---
    if (animationTimeoutIdRef.current) {
      clearTimeout(animationTimeoutIdRef.current);
      animationTimeoutIdRef.current = null;
    }

    //  Clear Canvas and Setup ---
    ctx.clearRect(0, 0, width, height);
    let x = width / 2;
    let y = height / 2;
    let direction = 0; // 0: R, 1: D, 2: L, 3: U
    ctx.lineWidth = 1.5; // Slightly thinner line
    // Use theme-aware colors if possible, otherwise fallback
    ctx.strokeStyle = document.documentElement.classList.contains("dark")
      ? "#a855f7"
      : "#6b21a8"; // Example: purple-500/purple-800

    let currentIndex = 1; // Start drawing from the second number (fib[1] = 1)

    function drawSegment() {
      if (currentIndex >= fibNumbers.length || !ctx) {
        animationTimeoutIdRef.current = null;
        return; // Animation complete
      }

      const radius = fibNumbers[currentIndex] * scale;

      // Skip segments with zero or negligible radius (handles fib[0]=0, fib[1]=1)
      if (radius <= 0.1) {
        currentIndex++;
        // Change direction even for skipped segments to maintain spiral logic
        direction = (direction + 1) % 4;
        animationTimeoutIdRef.current = setTimeout(drawSegment, 5); // Tiny delay
        return;
      }

      ctx.beginPath();
      // Calculate arc parameters based on direction
      switch (direction) {
        case 0:
          ctx.arc(x, y + radius, radius, -Math.PI / 2, 0);
          x += radius;
          break; // Right -> Arc center below, move right
        case 1:
          ctx.arc(x - radius, y, radius, 0, Math.PI / 2);
          y += radius;
          break; // Down -> Arc center left, move down
        case 2:
          ctx.arc(x, y - radius, radius, Math.PI / 2, Math.PI);
          x -= radius;
          break; // Left -> Arc center above, move left
        case 3:
          ctx.arc(x + radius, y, radius, Math.PI, Math.PI * 1.5);
          y -= radius;
          break; // Up -> Arc center right, move up
      }
      ctx.stroke();

      currentIndex++;
      direction = (direction + 1) % 4;

      // Schedule next segment
      animationTimeoutIdRef.current = setTimeout(
        drawSegment,
        ANIMATION_DELAY_MS
      );
    }

    // Start the animation
    drawSegment();
  }, []); // No external state dependencies needed here

  //  Effect for Initial Draw and Cleanup ---
  useEffect(() => {
    adjustScale(numTerms);
    const initialFibSequence = generateFibonacci(numTerms);
    drawSpiralAnimated(initialFibSequence);

    // Cleanup function to stop animation on unmount
    return () => {
      if (animationTimeoutIdRef.current) {
        clearTimeout(animationTimeoutIdRef.current);
      }
    };
    // Rerun only if the drawing function reference changes (it shouldn't)
    // or if numTerms changes (to redraw on initial load if default changes - unlikely needed)
  }, [drawSpiralAnimated, adjustScale, numTerms]);

  //  Event Handlers ---
  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    let value = parseInt(event.target.value, 10);
    if (isNaN(value)) value = 1; // Handle non-numeric input
    value = Math.max(1, Math.min(value, MAX_TERMS)); // Clamp between 1 and MAX_TERMS
    setNumTerms(value);
  };

  const handleDrawClick = () => {
    // Recalculate scale and sequence based on current numTerms
    adjustScale(numTerms);
    const sequence = generateFibonacci(numTerms);
    drawSpiralAnimated(sequence);
  };

  // --- Render JSX with Tailwind Classes ---
  return (
    <div className="flex flex-col items-center p-4 md:p-6 font-sans bg-gray-50 dark:bg-slate-900 text-gray-900 dark:text-slate-200 min-h-[80vh]">
      <h1 className="mb-6 text-2xl md:text-3xl font-bold text-center">
        Fibonacci Spiral Animation
      </h1>

      {/* Controls Section */}
      <div className="mb-6 flex flex-col sm:flex-row flex-wrap items-center justify-center gap-3 md:gap-4">
        <label htmlFor="termsInput" className="text-sm font-medium">
          Number of Terms (1-{MAX_TERMS}):
        </label>
        <input
          type="number"
          id="termsInput"
          value={numTerms}
          onChange={handleInputChange}
          min="1"
          max={MAX_TERMS}
          // Using standard form input styling from utility-patterns/forms plugin
          className="form-input w-20 text-center px-2 py-1 text-base" // Adjusted padding/width
        />
        <button
          onClick={handleDrawClick}
          // Using standard button styling from utility-patterns/Button component
          className="btn bg-primary-600 hover:bg-primary-700 text-white px-4 py-1.5 text-base" // Adjusted padding/size
        >
          Draw Spiral
        </button>
      </div>

      {/* Canvas Element */}
      <canvas
        ref={canvasRef}
        width="600" // Intrinsic canvas size (drawing buffer)
        height="600"
        // Tailwind classes for layout and appearance
        className="border border-gray-300 dark:border-slate-600 bg-white dark:bg-slate-800 max-w-full h-auto block mx-auto shadow-lg rounded-md aspect-square"
        aria-label="Fibonacci Spiral Canvas" // Accessibility
      >
        {/* Fallback text for browsers that don't support canvas */}
        Your browser does not support the HTML canvas element.
      </canvas>
    </div>
  );
};

export default FibonacciSpiral;


================================================================================
FILE: components/galactic/galactic.module.css
================================================================================

/* app/Galactic/Galactic.module.css */

.effectLayer {
  /* Base styles if needed, mostly handled by Tailwind */
  will-change: transform, opacity; /* Performance hint */
}

.contentWrapper {
  will-change: transform; /* Performance hint */
  transform-origin: center;
}

/* Animation 1: Slow, large drift (like effect 'b') */
@keyframes drift1 {
  0% {
    transform: translate(0px, 0px) rotate(0deg);
    opacity: 0.6;
  }
  25% {
    transform: translate(20px, 15px) rotate(1deg);
    opacity: 0.75;
  }
  50% {
    transform: translate(-10px, 5px) rotate(-0.5deg);
    opacity: 0.65;
  }
  75% {
    transform: translate(5px, -15px) rotate(0.5deg);
    opacity: 0.7;
  }
  100% {
    transform: translate(0px, 0px) rotate(0deg);
    opacity: 0.6;
  }
}
.animateDrift1 {
  animation: drift1 45s linear infinite; /* Longer duration */
}

/* Animation 2: Different drift/pattern movement (like effect 'c') */
@keyframes drift2 {
  0% {
    /* Example: Animate background position for repeating patterns */
    background-position: 0% 0%;
    transform: rotate(0deg);
    opacity: 0.25;
  }
  50% {
    opacity: 0.4;
    transform: rotate(0.5deg);
  }
  100% {
    background-position: 100% 100%; /* Adjust based on pattern size */
    transform: rotate(0deg);
    opacity: 0.25;
  }
}
.animateDrift2 {
  /* Using background-position animation */
  animation: drift2 35s linear infinite alternate; /* Alternate direction */
}

/* Animation 3: Subtle floating effect for content (like effect 'a') */
@keyframes float {
  0% {
    transform: translateZ(0) rotateX(0deg) rotateY(0deg) scale(1);
  }
  50% {
    transform: translateZ(5px) rotateX(0.5deg) rotateY(-0.5deg) scale(1.01);
  }
  100% {
    transform: translateZ(0) rotateX(0deg) rotateY(0deg) scale(1);
  }
}
.animateFloat {
  animation: float 25s ease-in-out infinite;
}


================================================================================
FILE: components/galactic/layout.tsx
================================================================================

// app/galactic/layout.tsx
import React from "react";
import styles from "./galactic.module.css";

interface GalacticViewLayoutProps {
  children: React.ReactNode;
}

const GalacticViewLayout: React.FC<GalacticViewLayoutProps> = ({
  children,
}) => {
  return (
    // Outermost container: relative positioning context, overflow hidden, full height
    <div className="relative min-h-screen w-full overflow-hidden bg-black">
      {/* Effect Layer 1 (Inspired by galaxy-map__effect1) */}
      {/* Slightly larger than viewport, slower drift animation */}
      <div
        className={`
          ${styles.effectLayer} ${styles.animateDrift1}
          absolute -inset-10 z-10
          bg-[radial-gradient(ellipse_at_center,_rgba(30,60,150,0.3)_0%,_rgba(10,20,80,0.5)_70%,_rgba(5,10,40,0.8)_100%)]
          opacity-70
          pointer-events-none
        `}
      />

      {/* Effect Layer 2 (Inspired by galaxy-map__effect2) */}
      {/* Fits viewport, different/faster animation, maybe different visual */}
      <div
        className={`
          ${styles.effectLayer} ${styles.animateDrift2}
          absolute inset-0 z-2
          bg-[url('/assets/spiral-galaxy-4k.png')]
          bg-repeat opacity-30
          mix-blend-mode-screen
          pointer-events-none
        `}
      />

      {/* Optional: Subtle Vignette Effect */}
      <div className="absolute inset-0 z-25 pointer-events-none bg-[radial-gradient(ellipse_at_center,_rgba(0,0,0,0)_60%,_rgba(0,0,0,0.7)_100%)]" />

      {/* Content Wrapper (Inspired by .content and .galaxy-map container) */}
      {/* Sits above effects, handles content layout, subtle float animation */}
      <div
        className={`
          ${styles.contentWrapper} ${styles.animateFloat} relative z-30 min-h-screen w-full
          flex flex-col items-center justify-center text-slate-200  p-4 sm:p-8 perspective-[200px]
        `}
      >
        {children} {/* Where the actual page content will be rendered */}
      </div>
    </div>
  );
};

export default GalacticViewLayout;


================================================================================
FILE: components/galactic/page.tsx
================================================================================

// app/galactic/page.tsx
import Link from "next/link";

export default function GalacticPage() {
  return (
    <div className="text-center backdrop-blur-sm bg-black/30 p-8 rounded-lg shadow-xl">
      <h1 className="text-4xl sm:text-6xl font-bold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-purple-500 animate-pulse">
        Welcome to the Galactic View
      </h1>
      <p className="text-lg sm:text-xl mb-6 max-w-2xl mx-auto">
        This page demonstrates the layered, animated background effect, creating
        an atmospheric space theme. Replace this content with your interactive
        map or other elements.
      </p>
      <div className="space-x-4">
        <Link
          href="/"
          className="bg-gradient-to-r from-blue-500 to-teal-500 hover:from-blue-600 hover:to-teal-600 text-white font-semibold py-2 px-6 rounded-md shadow-md transition duration-300 ease-in-out transform hover:scale-105"
        >
          Go Home
        </Link>
        <button
          type="button"
          className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-semibold py-2 px-6 rounded-md shadow-md transition duration-300 ease-in-out transform hover:scale-105"
        >
          Explore (Placeholder)
        </button>
      </div>
    </div>
  );
}


================================================================================
FILE: components/hero/Hero.tsx
================================================================================

// components/hero/Hero.tsx

import Image from "next/image";
import Particles from "../particles/Particles";
import Illustration from "@/public/glow-bottom.svg";
import TypingEffect from "../typing/TypingEffect";

const Intro = [
  "Hi, I’m a software engineer passionate about solving complex problems and creating technology that improves lives. Welcome to my website, where I share my projects and insights on building impactful software.",
  "my digital playground—a space where I stash notes, articles, and code snippets to revisit later. I’m a software engineer who thinks out loud here, mostly about dev challenges, with some rants, self-care musings, and mental health sprinkled in. Dive in and explore!",
  "Hey, I’m a coder hooked on crafting speedy, open-for-all web magic—welcome to my wild dev playground!",
  "Hey, I’m a dev who thrives on crafting code to fix user headaches and build speedy, open-for-all web magic!",
];

// Dynamic parts
const dynamicHobbies = [
  "gaming.",
  "reading.",
  "coding.",
  "hiking.",
  "cooking.",
]; // Example list

export default function Hero() {
  return (
    <section className="relative min-h-screen">
      {/* Relative positioning */}
      <Particles className="absolute inset-0 -z-10" quantity={40} />
      {/* Glow Illustration (Positioned relative to section) */}
      <div
        className="absolute bottom-0 left-1/2 transform -translate-x-1/2 pointer-events-none -z-10"
        aria-hidden="true"
      >
        <Image
          src={Illustration} // glow image
          className="max-w-none"
          width={2146} // height might not be needed if width controls aspect ratio
          alt="Hero Background Glow"
        />
      </div>

      {/* Centered Content Container */}
      <div className="max-w-6xl mx-auto px-4 sm:px-6">
        <div className="pt-32 pb-16 md:pt-40 md:pb-20">
          <div className="max-w-3xl mx-auto text-center">
            {/* Personalized Content using TypingEffect */}
            <div data-aos="fade-down" data-aos-delay="200">
              <TypingEffect
                staticPrefix="I like "
                items={dynamicHobbies}
                paragraphClassName="text-2xl md:text-3xl text-slate-300 mb-8"
                typingSpeed={120}
                deletingSpeed={60}
                pauseDuration={1800}
              />
            </div>

            {/* Optional Buttons Section */}
          </div>
        </div>
      </div>
    </section>
  );
}


================================================================================
FILE: components/highlight/highlight.module.css
================================================================================

.highlighterItem {
    position: relative;
    height: 100%;
    background-color: rgb(30, 41, 59); /* bg-slate-800 */
    border-radius: 1.5rem; /* rounded-3xl */
    padding: 1px;
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
    overflow: hidden;
}

.highlighterItem::before {
    content: '';
    position: absolute;
    width: 24rem; /* w-96 */
    height: 24rem; /* h-96 */
    left: -12rem; /*\ -left-48 */
    top: -12rem; /*\ -top-48 */
    background-color: rgb(168, 85, 247); /* bg-purple-500 */
    border-radius: 9999px;
    opacity: 0;
    pointer-events: none;
    transition: opacity 500ms;
    transform: translate(var(--mouse-x), var(--mouse-y));
    z-index: 30;
    filter: blur(100px);
}

.highlighterItem:hover::before {
    opacity: 0.2;
}

.highlighterItem::after {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: inherit;
    opacity: 0;
    transition: opacity 500ms;
    background: radial-gradient(
        250px circle at var(--mouse-x) var(--mouse-y),
        rgb(148, 163, 184),
        transparent
    );
    z-index: 10;
}

/* Group hover effects */
:global(.group:hover) .highlighterItem::before {
    opacity: 0.2;
}

:global(.group:hover) .highlighterItem::after {
    opacity: 1;
}

:global(.group:hover) .highlighterItem {
    background-color: rgb(51, 65, 85); /* hover:bg-slate-700 */
    transition: background-color 150ms ease-in-out;
}

/* HighlighterItem02 specific styles */
.highlighterItem02 {
    /* Copy all highlighterItem base styles */
    position: relative;
    height: 100%;
    background-color: rgb(30, 41, 59);
    border-radius: 1.5rem;
    padding: 1px;
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
    overflow: hidden;

    /* Add highlighterItem02 specific styles */
    margin: -1px;
}

.highlighterItem02::before {
    width: 16rem; /* w-64 */
    height: 16rem; /* h-64 */
    left: -8rem; /*\ -left-32 */
    top: -8rem; /*\ -top-32 */
    background-color: rgb(99, 102, 241); /* bg-indigo-500 */
    filter: blur(64px);
    z-index: 30;
}

.highlighterItem02:hover::before {
    opacity: 0.3;
}

.highlighterItem02::after {
    background: radial-gradient(
        250px circle at var(--mouse-x) var(--mouse-y),
        rgb(148, 163, 184), /* Use exact slate-400 color */
        transparent
    );
}

.highlighterItem02:global(.group:hover)::before {
    opacity: 0.3;
}


================================================================================
FILE: components/highlight/highlighter.tsx
================================================================================

/* eslint-disable @typescript-eslint/no-unused-expressions */
"use client";

import React, { useRef, useState, useEffect } from "react";
import MousePosition from "../hooks/mouse-position";
import styles from "./highlight.module.css";

type HighlighterProps = {
  children: React.ReactNode;
  className?: string;
  refresh?: boolean;
};

export default function Highlighter({
  children,
  className = "",
  refresh = false,
}: HighlighterProps) {
  const containerRef = useRef<HTMLDivElement>(null);
  const mousePosition = MousePosition();
  const mouse = useRef<{ x: number; y: number }>({ x: 0, y: 0 });
  const containerSize = useRef<{ w: number; h: number }>({ w: 0, h: 0 });
  const [boxes, setBoxes] = useState<Array<HTMLElement>>([]);

  useEffect(() => {
    containerRef.current &&
      setBoxes(
        Array.from(containerRef.current.children).map((el) => el as HTMLElement)
      );
  }, []);

  useEffect(() => {
    initContainer();
    window.addEventListener("resize", initContainer);

    return () => {
      window.removeEventListener("resize", initContainer);
    };
  }, [setBoxes]);

  useEffect(() => {
    onMouseMove();
  }, [mousePosition]);

  useEffect(() => {
    initContainer();
  }, [refresh]);

  const initContainer = () => {
    if (containerRef.current) {
      containerSize.current.w = containerRef.current.offsetWidth;
      containerSize.current.h = containerRef.current.offsetHeight;
    }
  };

  const onMouseMove = () => {
    if (containerRef.current) {
      const rect = containerRef.current.getBoundingClientRect();
      const { w, h } = containerSize.current;
      const x = mousePosition.x - rect.left;
      const y = mousePosition.y - rect.top;
      const inside = x < w && x > 0 && y < h && y > 0;
      if (inside) {
        mouse.current.x = x;
        mouse.current.y = y;
        boxes.forEach((box) => {
          const boxX =
            -(box.getBoundingClientRect().left - rect.left) + mouse.current.x;
          const boxY =
            -(box.getBoundingClientRect().top - rect.top) + mouse.current.y;
          box.style.setProperty("--mouse-x", `${boxX}px`);
          box.style.setProperty("--mouse-y", `${boxY}px`);
        });
      }
    }
  };

  return (
    <div className={className} ref={containerRef}>
      {children}
    </div>
  );
}

type HighlighterItemProps = {
  children: React.ReactNode;
  className?: string;
};

export function HighlighterItem({
  children,
  className = "",
}: HighlighterItemProps) {
  return (
    <div
      className={`${styles.highlighterItem} ${className}`}
      style={{ '--mouse-x': '0px', '--mouse-y': '0px' } as React.CSSProperties}
    >
      {children}
    </div>
  );
}

export function HighlighterItem02({
  children,
  className = "",
}: HighlighterItemProps) {
  return (
    <div
      className={`${styles.highlighterItem02} ${className}`}
      style={{ '--mouse-x': '0px', '--mouse-y': '0px' } as React.CSSProperties}
    >
      {children}
    </div>
  );
}


================================================================================
FILE: components/hooks/mouse-position.ts
================================================================================

import { useState, useEffect } from 'react';

interface MousePosition {
  x: number;
  y: number;
}

export default function useMousePosition(): MousePosition {
  const [mousePosition, setMousePosition] = useState<MousePosition>({ x: 0, y: 0 });

  useEffect(() => {
    const handleMouseMove = (event: MouseEvent) => {
      setMousePosition({ x: event.clientX, y: event.clientY });
    }

    window.addEventListener('mousemove', handleMouseMove);

    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
    }
  }, []);

  return mousePosition;
}


================================================================================
FILE: components/layouts/ArticleLayout.tsx
================================================================================

// components/layouts/ArticleLayout.tsx
import React from "react";
import { cn } from "@/lib/utils";

interface ArticleLayoutProps {
  children: React.ReactNode;
  tableOfContents?: React.ReactNode;
  className?: string;
}

export default function ArticleLayout({
  children,
  tableOfContents,
  className,
}: ArticleLayoutProps) {
  return (
    <div
      className={cn(
        "w-full max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-8 py-8 md:py-12",
        className
      )}
    >
      <div className="lg:flex lg:flex-row lg:gap-8 xl:gap-12">
        <main className="flex-1 w-full lg:max-w-4xl xl:max-w-5xl mdx-prose dark:mdx-prose max-w-none">
          {/* Render the MDX content (which includes its own <h1>) */}
          {children}
        </main>

        <aside className="w-full lg:w-64 xl:w-72 lg:shrink-0 mt-12 lg:mt-0">
          <div className="lg:sticky lg:top-20 space-y-6">
            {tableOfContents && (
              <div className="p-5 rounded-2xl border border-border bg-muted/30 shadow-sm">
                <h3 className="text-lg font-semibold mb-3">On this page</h3>
                {tableOfContents}
              </div>
            )}
          </div>
        </aside>
      </div>
    </div>
  );
}


================================================================================
FILE: components/layouts/BlogLayout.tsx
================================================================================

// components/layouts/BlogLayout.tsx
import type { PostMeta } from "@/lib/blog"; // Import the metadata type
import { cn } from "@/lib/utils";

interface BlogLayoutProps {
  meta: PostMeta; // Pass the frontmatter metadata
  children: React.ReactNode; // The compiled MDX content
}

export default function BlogLayout({ meta, children }: BlogLayoutProps) {
  return (
    // Main container for the article
    <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-12 md:py-16">
      <article>
        {/* Article Header */}
        <header className="mb-8">
          {/* Title */}
          <h1 className="h1 text-[rgb(var(--foreground))] mb-3">
            {meta.title}
          </h1>

          {/* Metadata (Date, Author) */}
          <div className="text-sm text-slate-500 dark:text-slate-400 mb-4">
            <span>Published on </span>
            <time dateTime={meta.date}>
              {new Date(meta.date).toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric",
              })}
            </time>
            {meta.author && (
              <span className="text-slate-600 dark:text-slate-500">
                {" "}
                by {meta.author}
              </span>
            )}
          </div>

          {/* Tags */}
          {meta.tags && meta.tags.length > 0 && (
            <div className="flex flex-wrap gap-2">
              {meta.tags.map((tag) => (
                <span
                  key={tag}
                  className={cn(
                    "inline-block text-xs font-medium rounded-full",
                    "px-2.5 py-0.5",
                    "bg-[rgba(var(--primary),0.1)] text-[rgb(var(--primary))]"
                  )}
                >
                  {tag}
                </span>
              ))}
            </div>
          )}
        </header>

        {/* Separator */}
        <hr className="my-8 border-t border-[rgb(var(--border-subtle-rgb))] dark:border-[rgb(var(--border-subtle-rgb))]" />

        {/* MDX Content Area */}
        {/* Apply the .mdx-prose class here for styling */}
        <div className="mdx-prose">
          {" "}
          {/* THIS IS KEY for styling */}
          {children}
        </div>

        {/* Optional: Footer navigation, comments section, etc. */}
      </article>
    </div>
  );
}


================================================================================
FILE: components/particles/Particles.tsx
================================================================================

// components/particles/Particles.tsx
"use client";

import React, { useRef, useEffect } from "react";
import useMousePosition from "../hooks/mouse-position"; // Adjust path if needed
import { cn } from "@/lib/utils"; // Adjust path if needed

interface ParticlesProps {
  className?: string;
  quantity?: number;
  staticity?: number;
  ease?: number;
  refresh?: boolean;
}

// Interface for particle properties
interface Particle {
  x: number;
  y: number;
  translateX: number;
  translateY: number;
  size: number;
  alpha: number;
  targetAlpha: number;
  dx: number;
  dy: number;
  magnetism: number;
}

export default function Particles({
  className = "",
  quantity = 30,
  staticity = 50,
  ease = 50,
  refresh = false,
}: ParticlesProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const context = useRef<CanvasRenderingContext2D | null>(null);
  const circles = useRef<Particle[]>([]);
  const mousePosition = useMousePosition();
  const mouse = useRef<{ x: number; y: number }>({ x: 0, y: 0 });
  const canvasSize = useRef<{ w: number; h: number }>({ w: 0, h: 0 });
  const dpr = typeof window !== "undefined" ? window.devicePixelRatio : 1;

  // --- Resize Canvas Logic ---
  const resizeCanvas = () => {
    if (canvasRef.current && context.current) {
      // Get dimensions from the canvas element's own layout size
      canvasSize.current.w = canvasRef.current.offsetWidth;
      canvasSize.current.h = canvasRef.current.offsetHeight;

      // Set drawing surface size based on device pixel ratio
      canvasRef.current.width = canvasSize.current.w * dpr;
      canvasRef.current.height = canvasSize.current.h * dpr;

      // Scale the drawing context (important!)
      context.current.scale(dpr, dpr);

      // Re-initialize particles after resize
      circles.current.length = 0;
      drawParticles(); // Re-draw particles for the new size
    }
  };

  // --- Effects ---
  useEffect(() => {
    // Declare animationFrameId here, accessible within the effect scope
    let animationFrameId: number;

    // Define animate function within the effect
    const animate = () => {
      clearContext();
      circles.current.forEach((circle: Particle, i: number) => {
        // Calculate distance from edges for fading effect
        const edge = [
          circle.x + circle.translateX - circle.size, // Left
          canvasSize.current.w - circle.x - circle.translateX - circle.size, // Right
          circle.y + circle.translateY - circle.size, // Top
          canvasSize.current.h - circle.y - circle.translateY - circle.size, // Bottom
        ];
        const closestEdge = edge.reduce((a, b) => Math.min(a, b));
        const remapClosestEdge = parseFloat(
          remapValue(closestEdge, 0, 20, 0, 1).toFixed(2)
        );

        // Update alpha based on edge distance and target alpha
        let newAlpha = circle.alpha;
        if (remapClosestEdge > 1) {
          newAlpha += 0.02; // Fade in
          if (newAlpha > circle.targetAlpha) newAlpha = circle.targetAlpha;
        } else {
          newAlpha = circle.targetAlpha * remapClosestEdge; // Fade out
        }
        circle.alpha = newAlpha;

        // Apply inherent velocity
        circle.x += circle.dx;
        circle.y += circle.dy;

        // Apply mouse-influenced translation
        circle.translateX +=
          (mouse.current.x / (staticity / circle.magnetism) -
            circle.translateX) /
          ease;
        circle.translateY +=
          (mouse.current.y / (staticity / circle.magnetism) -
            circle.translateY) /
          ease;

        // Reset particle if it goes too far off-screen
        if (
          circle.x + circle.translateX < -circle.size ||
          circle.x + circle.translateX > canvasSize.current.w + circle.size ||
          circle.y + circle.translateY < -circle.size ||
          circle.y + circle.translateY > canvasSize.current.h + circle.size
        ) {
          circles.current.splice(i, 1); // Remove old particle
          const newCircle = circleParams(); // Create a new one
          drawCircle(newCircle); // Add the new one (will be drawn in next frame)
        } else {
          // Draw the updated particle
          drawCircle({ ...circle }, true); // Pass update flag
        }
      });
      // *** Assign the ID returned by requestAnimationFrame ***
      animationFrameId = window.requestAnimationFrame(animate);
    };

    // Initial setup and start animation
    if (canvasRef.current) {
      context.current = canvasRef.current.getContext("2d");
      if (context.current) {
        // Check if context was successfully obtained
        resizeCanvas(); // Resize based on initial layout
        animate(); // Start the animation loop
        window.addEventListener("resize", resizeCanvas); // Add resize listener
      } else {
        console.error("Failed to get 2D context for particles canvas.");
      }
    }

    // Cleanup function
    return () => {
      window.removeEventListener("resize", resizeCanvas);
      // Now animationFrameId will hold a valid ID (or be undefined if animate never ran)
      if (animationFrameId) {
        window.cancelAnimationFrame(animationFrameId);
      }
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // Run only once on mount

  useEffect(() => {
    // Re-initialize if props change that affect particle generation/behavior
    if (canvasRef.current && context.current) {
      resizeCanvas(); // This will clear and redraw particles
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [refresh, quantity, staticity, ease]); // Add dependencies that should trigger re-init

  useEffect(() => {
    onMouseMove();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [mousePosition.x, mousePosition.y]); // Update mouse ref on position change

  // --- Mouse Move ---
  const onMouseMove = () => {
    if (canvasRef.current) {
      const rect = canvasRef.current.getBoundingClientRect();
      // Use canvasSize ref which is updated on resize
      const { w, h } = canvasSize.current;
      if (w > 0 && h > 0) {
        // Ensure canvas has dimensions
        const x = mousePosition.x - rect.left - w / 2;
        const y = mousePosition.y - rect.top - h / 2;
        mouse.current.x = x;
        mouse.current.y = y;
      }
    }
  };

  // --- Particle Creation and Drawing ---
  type Circle = Particle; // Alias

  const circleParams = (): Circle => {
    // Ensure canvasSize has been initialized
    const w = canvasSize.current.w || 300; // Fallback width
    const h = canvasSize.current.h || 150; // Fallback height
    const x = Math.floor(Math.random() * w);
    const y = Math.floor(Math.random() * h);
    const translateX = 0;
    const translateY = 0;
    const size = Math.floor(Math.random() * 2) + 1; // Particle size (radius)
    const alpha = 0; // Start transparent
    const targetAlpha = parseFloat((Math.random() * 0.6 + 0.1).toFixed(1)); // Target opacity
    const dx = (Math.random() - 0.5) * 0.2; // Horizontal velocity
    const dy = (Math.random() - 0.5) * 0.2; // Vertical velocity
    const magnetism = 0.1 + Math.random() * 4; // How strongly it reacts to mouse
    return {
      x,
      y,
      translateX,
      translateY,
      size,
      alpha,
      targetAlpha,
      dx,
      dy,
      magnetism,
    };
  };

  const drawCircle = (circle: Circle, update = false) => {
    if (context.current) {
      const { x, y, translateX, translateY, size, alpha } = circle;
      context.current.save(); // Save context state
      context.current.translate(translateX, translateY); // Apply translation offset
      context.current.beginPath();
      context.current.arc(x, y, size, 0, 2 * Math.PI);
      context.current.fillStyle = `rgba(255, 255, 255, ${alpha})`; // White particles
      context.current.fill();
      context.current.restore(); // Restore context state (removes translation)

      // Only push if it's a new circle during initialization
      if (!update) {
        circles.current.push(circle);
      }
    }
  };

  const clearContext = () => {
    if (context.current) {
      // Use canvas dimensions from ref, adjusted for dpr scaling if needed
      // Clearing based on logical width/height before context scaling
      context.current.clearRect(
        0,
        0,
        canvasSize.current.w,
        canvasSize.current.h
      );
    }
  };

  const drawParticles = () => {
    // Clear context before drawing initial particles
    clearContext();
    const particleCount = quantity;
    for (let i = 0; i < particleCount; i++) {
      const circle = circleParams();
      drawCircle(circle); // Add new particle
    }
  };

  // Helper function for remapping values (used for edge fading)
  const remapValue = (
    value: number,
    start1: number,
    end1: number,
    start2: number,
    end2: number
  ): number => {
    const remapped =
      ((value - start1) * (end2 - start2)) / (end1 - start1) + start2;
    return remapped > 0 ? remapped : 0;
  };

  // --- Render ---
  return (
    // Apply positioning/sizing classes DIRECTLY to the canvas element
    <canvas
      ref={canvasRef}
      // Ensure canvas fills container using cn utility
      className={cn("w-full h-full", className)}
      aria-hidden="true"
    />
  );
}


================================================================================
FILE: components/projects/project.module.css
================================================================================

.projectsBox {
  tab-size: 4;
  font-feature-settings: normal;
  font-variation-settings: normal;

  line-height: inherit;
  --font-inter: "__Inter_d65c78", "__Inter_Fallback_d65c78";
  --tw-bg-opacity: 1;
  font-family: var(--font-inter), sans-serif;
  letter-spacing: -0.01em;
  --tw-text-opacity: 1;
  color: rgb(241 245 249 / var(--tw-text-opacity));
  -webkit-font-smoothing: antialiased;
  box-sizing: border-box;
  border-width: 0;
  border-style: solid;
  border-color: #e5e7eb;
  margin-left: auto;
  margin-right: auto;
  max-width: 72rem;
  padding-left: 1.5rem;
  padding-right: 1.5rem;
}

.projectsInnerBox {
  padding-top: 3rem;
  @media (min-width: 768px) {
    .md\:pt-20 {
      padding-top: 5rem;
    }
  }
}

.projectsHeaderBox {
  font-feature-settings: normal;
  font-variation-settings: normal;
  --swiper-theme-color: #007aff;
  line-height: inherit;
  --tw-bg-opacity: 1;
  font-family: var(--font-inter), sans-serif;
  letter-spacing: -0.01em;
  --tw-text-opacity: 1;
  color: rgb(241 245 249 / var(--tw-text-opacity));
  -webkit-font-smoothing: antialiased;
  box-sizing: border-box;
  border-width: 0;
  border-style: solid;
  border-color: #e5e7eb;
  margin-left: auto;
  margin-right: auto;
  max-width: 48rem;
  text-align: center;
  padding-bottom: 5rem;
}

.titleGradient {
  tab-size: 4;
  font-feature-settings: normal;
  font-variation-settings: normal;
  --swiper-theme-color: #007aff;
  line-height: inherit;
  --font-inter: "__Inter_d65c78", "__Inter_Fallback_d65c78";
  --tw-bg-opacity: 1;
  font-family: var(--font-inter), sans-serif;
  letter-spacing: -0.01em;
  --tw-text-opacity: 1;
  -webkit-font-smoothing: antialiased;
  text-align: center;
  box-sizing: border-box;
  border-width: 0;
  border-style: solid;
  border-color: #e5e7eb;

  display: inline-flex;
  background-image: linear-gradient(to right, var(--tw-gradient-stops));

  background-clip: text;
  padding-bottom: 0.75rem;
  font-weight: 500;
  color: transparent;
}

.header {
  --tw-bg-opacity: 1;
  --tw-text-opacity: 1;
  -webkit-font-smoothing: antialiased;
  text-align: center;
  box-sizing: border-box;
  border-width: 0;
  border-style: solid;
  border-color: #e5e7eb;
  margin: 0;
  font-weight: 800;
  font-size: 2.75rem;
  line-height: 1.1;
  letter-spacing: -0.017em;
  background-image: linear-gradient(to right, var(--tw-gradient-stops));
  --tw-gradient-from: rgb(226 232 240 / 0.6) var(--tw-gradient-from-position);
  --tw-gradient-stops: var(--tw-gradient-from),
    #e2e8f0 var(--tw-gradient-via-position), var(--tw-gradient-to);
  --tw-gradient-to: rgb(226 232 240 / 0.6) var(--tw-gradient-to-position);
  background-clip: text;
  padding-bottom: 1rem;
  color: transparent;
}

.carouselWrapper {
  /* Wrapper class */
  position: relative; /* Establish relative positioning for pseudo-elements */

  /* Before pseudo-element */
  &::before {
    position: absolute;
    inset: 0;
    transform: translateX(-100%);
    z-index: 20;
    background-image: linear-gradient(
      to left,
      transparent,
      #334155
    ); /* slate-900 */
    background-position: 20%; /* `before:to-20%` equivalent */
    content: "";
  }

  /* After pseudo-element */
  &::after {
    position: absolute;
    inset: 0;
    transform: translateX(100%);
    z-index: 20;
    background-image: linear-gradient(
      to right,
      transparent,
      #334155
    ); /* slate-900 */
    background-position: 20%; /* `after:to-20%` equivalent */
    content: "";
  }
}

.swiperWrapper {
  touch-action: pan-y;
  cursor: grab;
  transform: translate3d(-568px, 0px, 0px);
  transition-duration: 0ms;
  position: relative;
  width: 100%;
  height: 100%;
  z-index: 1;
  display: flex;
  transition-property: transform;
  box-sizing: content-box;
}

.slide {
  height: auto;
}

.slideContent {
  position: relative;
  height: 100%;
  background-color: rgb(15, 23, 42); /* bg-slate-900 */
  border-radius: inherit;
  z-index: 20;
  overflow: hidden;
}

.particlesWrapper {
  position: absolute;
  inset: 0;
  z-index: -10;
  opacity: 0;
  transition: opacity 500ms ease-in-out;
}

.activeSlide .particlesWrapper,
.slide:hover .particlesWrapper {
  opacity: 1;
}

.radialGradient {
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translate(-50%, 50%);
  pointer-events: none;
  z-index: -10;
  width: 33.333333%;
  aspect-ratio: 1;
}

.gradientCircle {
  position: absolute;
  inset: 0;
  transform: translateZ(0);
  border-radius: 9999px;
  background-color: rgb(30, 41, 59); /* bg-slate-800 */
  transition: background-color 500ms ease-in-out;
  filter: blur(60px);
}

.activeSlide .gradientCircle {
  background-color: rgb(168, 85, 247); /* bg-purple-500 */
}

.slideInner {
  display: flex;
  flex-direction: column;
  padding: 1.5rem;
  height: 100%;
}

.projectImage {
  margin-bottom: 0.75rem;
}

.projectContent {
  flex-grow: 1;
}

.projectTitle {
  font-weight: 700;
  font-size: 1.125rem;
  margin-bottom: 0.25rem;
}

.projectDescription {
  color: rgb(148, 163, 184); /* text-slate-400 */
  margin-bottom: 0.75rem;
}

.learnMoreLink {
  display: inline-flex;
  align-items: center;
  font-size: 0.875rem;
  font-weight: 500;
  color: rgb(203, 213, 225); /* text-slate-300 */
  transition: color 150ms ease-in-out;
}

.learnMoreLink:hover {
  color: rgb(255, 255, 255);
}

.learnMoreArrow {
  margin-left: 0.25rem;
  color: rgb(168, 85, 247); /* text-purple-500 */
  transition: transform 150ms ease-in-out;
}

.learnMoreLink:hover .learnMoreArrow {
  transform: translateX(2px);
}

.navigationButtons {
  display: flex;
  margin-top: 2rem;
  justify-content: flex-end;
}

.carouselButton {
  position: relative;
  z-index: 20;
  width: 3rem;
  height: 3rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.carouselIcon {
  width: 1rem;
  height: 1rem;
  fill: rgb(100, 116, 139); /* fill-slate-500 */
  transition: fill 150ms ease-in-out;
}

.carouselButton:hover .carouselIcon {
  fill: rgb(168, 85, 247); /* fill-purple-500 */
}


================================================================================
FILE: components/projects/projects.tsx
================================================================================

"use client";

import { useEffect, useState, useRef } from "react"; // Add useRef
import Image from "next/image";
import Particles from "../particles/Particles";
import Highlighter, { HighlighterItem } from "../highlight/highlighter";

import CarouselImg01 from "@/public/assets/img-1.png";
import CarouselImg05 from "@/public/assets/img-5.png";
import CarouselImg03 from "@/public/assets/img-3.png";
import CarouselImg04 from "@/public/assets/img-4.png";
import styles from "./project.module.css";

import Swiper from "swiper";
import { Navigation } from "swiper/modules";
// Import Swiper
import "swiper/css";
import "swiper/css/navigation";
Swiper.use([Navigation]);

export default function ProjectsCarousel() {
  const [swiperInitialized, setSwiperInitialized] = useState<boolean>(false);
  const swiperRef = useRef<HTMLDivElement>(null); // Add ref for Swiper container

  useEffect(() => {
    if (!swiperRef.current) return; // Guard clause

    const carousel = new Swiper(swiperRef.current, {
      breakpoints: {
        320: {
          slidesPerView: 1,
        },
        640: {
          slidesPerView: 2,
        },
        1024: {
          slidesPerView: 3,
        },
      },
      grabCursor: true,
      loop: false,
      centeredSlides: false,
      initialSlide: 0,
      spaceBetween: 24,
      navigation: {
        nextEl: ".carousel-next",
        prevEl: ".carousel-prev",
      },
    });

    setSwiperInitialized(true);

    return () => {
      carousel.destroy(true, true); // Cleanup
    };
  }, []);

  return (
    <section>
      <div className={styles.projectsBox}>
        <div className={styles.projectsInnerBox}>
          {/* Section header */}
          <div className={styles.projectsHeaderBox}>
            <div>
              <div className={styles.titleGradient}>Some of my projects</div>
            </div>
            <h2 className={styles.header}>My Projects</h2>
            <p className="text-lg text-slate-400">
              Some of my projects that are live and working in some corner of
              the Internet.
            </p>
          </div>

          {/* Carousel built with Swiper.js [https://swiperjs.com/] */}
          {/* * Custom styles in src/css/additional-styles/theme.scss */}
          <div className={styles.carouselWrapper}>
            {/* Change this div to use ref */}
            <div ref={swiperRef} className={`swiper ${styles.swiperContainer}`}>
              <Highlighter
                className={`swiper-wrapper ${styles.swiperWrapper}`}
                refresh={swiperInitialized}
              >
                {/* Carousel items */}
                <HighlighterItem className={`swiper-slide ${styles.slide}`}>
                  <div className={styles.slideContent}>
                    <Particles
                      className={styles.particlesWrapper}
                      quantity={3}
                      refresh={swiperInitialized}
                    />
                    <div className={styles.radialGradient} aria-hidden="true">
                      <div className={styles.gradientCircle} />
                    </div>
                    <div className={styles.slideInner}>
                      <Image
                        className={styles.projectImage}
                        src={CarouselImg01}
                        width={56}
                        height={56}
                        alt="Icon 01"
                      />
                      <div className={styles.projectContent}>
                        <div className={styles.projectTitle}>
                          Anonymous User
                        </div>
                        <div className={styles.projectDescription}>
                          Incorporate rich user profiling, and facilitate more
                          transactions.
                        </div>
                      </div>
                      <div className="text-right">
                        <a href="#0" className={styles.learnMoreLink}>
                          Learn More
                          <span className={styles.learnMoreArrow}>-&gt;</span>
                        </a>
                      </div>
                    </div>
                  </div>
                </HighlighterItem>
                <HighlighterItem className={`swiper-slide ${styles.slide}`}>
                  <div className={styles.slideContent}>
                    <Particles
                      className={styles.particlesWrapper}
                      quantity={3}
                      refresh={swiperInitialized}
                    />
                    <div className={styles.radialGradient} aria-hidden="true">
                      <div className={styles.gradientCircle} />
                    </div>
                    <div className={styles.slideInner}>
                      <Image
                        className={styles.projectImage}
                        src={CarouselImg05}
                        width={56}
                        height={56}
                        alt="Icon 05"
                      />
                      <div className={styles.projectContent}>
                        <div className={styles.projectTitle}>Bot Detection</div>
                        <div className={styles.projectDescription}>
                          Incorporate rich user profiling, and facilitate more
                          transactions.
                        </div>
                      </div>
                      <div className="text-right">
                        <a href="#0" className={styles.learnMoreLink}>
                          Learn More
                          <span className={styles.learnMoreArrow}>-&gt;</span>
                        </a>
                      </div>
                    </div>
                  </div>
                </HighlighterItem>
                <HighlighterItem className={`swiper-slide ${styles.slide}`}>
                  <div className={styles.slideContent}>
                    <Particles
                      className={styles.particlesWrapper}
                      quantity={3}
                      refresh={swiperInitialized}
                    />
                    <div className={styles.radialGradient} aria-hidden="true">
                      <div className={styles.gradientCircle} />
                    </div>
                    <div className={styles.slideInner}>
                      <Image
                        className={styles.projectImage}
                        src={CarouselImg03}
                        width={56}
                        height={56}
                        alt="Icon 01"
                      />
                      <div className={styles.projectContent}>
                        <div className={styles.projectTitle}>
                          Social integrations
                        </div>
                        <div className={styles.projectDescription}>
                          Incorporate rich user profiling, and facilitate more
                          transactions.
                        </div>
                      </div>
                      <div className="text-right">
                        <a href="#0" className={styles.learnMoreLink}>
                          Learn More
                          <span className={styles.learnMoreArrow}>-&gt;</span>
                        </a>
                      </div>
                    </div>
                  </div>
                </HighlighterItem>
                <HighlighterItem className={`swiper-slide ${styles.slide}`}>
                  <div className={styles.slideContent}>
                    <Particles
                      className={styles.particlesWrapper}
                      quantity={3}
                      refresh={swiperInitialized}
                    />
                    <div className={styles.radialGradient} aria-hidden="true">
                      <div className={styles.gradientCircle} />
                    </div>
                    <div className={styles.slideInner}>
                      <Image
                        className={styles.projectImage}
                        src={CarouselImg04}
                        width={56}
                        height={56}
                        alt="Icon 01"
                      />
                      <div className={styles.projectContent}>
                        <div className={styles.projectTitle}>
                          Progressive Profiling
                        </div>
                        <div className={styles.projectDescription}>
                          Incorporate rich user profiling, and facilitate more
                          transactions.
                        </div>
                      </div>
                      <div className="text-right">
                        <a href="#0" className={styles.learnMoreLink}>
                          Learn More
                          <span className={styles.learnMoreArrow}>-&gt;</span>
                        </a>
                      </div>
                    </div>
                  </div>
                </HighlighterItem>
              </Highlighter>
            </div>
          </div>

          {/* Update navigation buttons */}
          <div className={styles.navigationButtons}>
            <button className={`carousel-prev ${styles.carouselButton}`}>
              <span className="sr-only">Previous</span>
              <svg
                className={styles.carouselIcon}
                viewBox="0 0 16 16"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path d="M6.7 14.7l1.4-1.4L3.8 9H16V7H3.8l4.3-4.3-1.4-1.4L0 8z" />
              </svg>
            </button>
            <button className={`carousel-next ${styles.carouselButton}`}>
              <span className="sr-only">Next</span>
              <svg
                className={styles.carouselIcon}
                viewBox="0 0 16 16"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path d="M9.3 14.7l-1.4-1.4L12.2 9H0V7h12.2L7.9 2.7l1.4-1.4L16 8z" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    </section>
  );
}


================================================================================
FILE: components/slider/SlideColumn.tsx
================================================================================


// @/component/slider/SlideColumn.tsx
import React from 'react';

interface SlideColumnProps {
  children: React.ReactNode;
  // Add other potential props like alignment if needed
}

// This column will stick to the top while scrolling within its parent container
const SlideColumn: React.FC<SlideColumnProps> = ({ children }) => {
  return (
    <div className="sticky top-16 md:top-24 h-fit p-4 md:p-6">
      {/*
        'sticky': Makes the element stick.
        'top-16 md:top-24': Defines the offset from the top where it sticks. Adjust as needed (e.g., header height).
        'h-fit': Height adjusts to content, crucial for sticky behavior within a scrolling context.
        'p-4 md:p-6': Padding for content inside the column.
       */}
      <div className="bg-pastel-card shadow-md rounded-lg p-6">
         {children}
      </div>
    </div>
  );
};

export default SlideColumn;


/*
* Usage :
const App: React.FC = () => {
  return (
    <main className="w-full overflow-x-hidden">

* We are not implementing slide-to-slide transitions here, but rendering all sections vertically to demonstrate the sticky scrolling effect WITHIN each section and AS YOU SCROLL from one section to the next.

       {slides.map((slide) => (
        <SlideSection key={slide.id} slide={slide} />
      ))}

       > Optional: Add a simple footer
       <footer className="text-center p-4 bg-pastel-bg text-pastel-text-subtle text-sm">
         End of content.
       </footer>
    </main>
  );
};

export default App;

*/


================================================================================
FILE: components/slider/SlideSection.tsx
================================================================================

// @/component/slider/SlideSection.tsx

import Image from "next/image";
import React from "react";
import SlideColumn from "./SlideColumn";
import { SlideContent } from "./slideData"; // Import the interface

interface SlideSectionProps {
  slide: SlideContent;
}

const SlideSection: React.FC<SlideSectionProps> = ({ slide }) => {
  return (
    // Each section takes full viewport height and has its own background
    // min-h-screen ensures it takes at least the screen height, allowing scrolling
    <section
      id={slide.id}
      className={`min-h-screen w-full flex items-center justify-center p-4 md:p-8 ${slide.bgColor}`}
    >
      {/* The grid container within the section */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 w-full max-w-6xl">
        {/* Left Column (Sticky) */}
        <SlideColumn>
          <h2 className="text-2xl md:text-3xl font-bold mb-4 text-pastel-text-main">
            {slide.title}
          </h2>
          <p className="text-base md:text-lg text-pastel-text-subtle leading-relaxed">
            {slide.text}
          </p>
          {/* Add more content here if needed to test scrolling */}
          <div className="mt-6 h-48 bg-gray-200 rounded flex items-center justify-center text-sm text-gray-500">
            (Placeholder for more left content)
          </div>
        </SlideColumn>

        {/* Right Column (Sticky) */}
        <SlideColumn>
          {slide.imageUrl ? (
            <Image
              width={1440}
              height={1900}
              src={slide.imageUrl}
              alt={`${slide.title} visual representation`}
              className="w-full h-auto object-contain rounded-lg shadow-sm max-h-[60vh]" // Limit image height
            />
          ) : (
            <div className="flex items-center justify-center h-64 bg-gray-100 rounded-lg">
              <p className="text-pastel-text-subtle">
                No image for this section
              </p>
            </div>
          )}
          {/* Add more content here if needed */}
          <div className="mt-6 h-32 bg-gray-200 rounded flex items-center justify-center text-sm text-gray-500">
            (Placeholder for more right content)
          </div>
        </SlideColumn>
      </div>
    </section>
  );
};

export default SlideSection;


================================================================================
FILE: components/slider/slideData.ts
================================================================================

// @/component/slider/slideData.ts
export interface SlideContent {
    id: string;
    title: string;
    text: string;
    imageUrl?: string; // Optional image for the right column
    bgColor: string; // Background color for the slide section
  }

  export const slides: SlideContent[] = [
    {
      id: 'intro',
      title: 'Welcome to Our Story',
      text: 'This is the beginning. Scroll down to see how things progress. Notice how the columns behave as you scroll through this section.',
      imageUrl: '/assets/blast-off.png',
      bgColor: 'bg-pastel-primary' // Light Blue
    },
    {
      id: 'middle',
      title: 'The Developing Chapter',
      text: 'Here, things start to change. The content on the left might be longer than the image placeholder on the right, demonstrating the sticky effect more clearly. Keep scrolling!',
      imageUrl: '/assets/astro-2.png',
      bgColor: 'bg-pastel-secondary' // Pink
    },
    {
      id: 'end',
      title: 'Looking Ahead',
      text: 'This marks a new phase. We explore future possibilities. Sticky positioning allows key information or visuals to remain present as related details scroll by.',
      imageUrl: '/assets/astro-3.png',
      bgColor: 'bg-pastel-accent' // Mint Green
    },
    {
      id: 'extra',
      title: 'More Details',
      imageUrl: '/assets/astro-5.png',
      text: 'Adding some extra content here to ensure scrolling is significant enough to see the sticky effect properly on multiple sections. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
      // No image for this one to show variation
      bgColor: 'bg-indigo-100' // Different Pastel
    },
  ];


================================================================================
FILE: components/typing/TypingEffect.tsx
================================================================================

// /components/typing/TypingEffect.tsx
"use client";

import React, { useState, useEffect, useRef } from "react";
import styles from "./typing.module.css";
import { calculateNextTypingStep } from "@/lib/typing-logic";
import { cn } from "@/lib/utils";

interface TypingEffectProps {
  staticPrefix?: string /** Static text to display before typing animation. */;
  items: string[];
  typingSpeed?: number;
  deletingSpeed?: number;
  pauseDuration?: number;
  paragraphClassName?: string;
}

const defaultItems = ["gaming.", "reading.", "coding."];

const TypingEffect: React.FC<TypingEffectProps> = ({
  staticPrefix = "",
  items = defaultItems,
  typingSpeed = 100,
  deletingSpeed = 50,
  pauseDuration = 1500,
  paragraphClassName = "text-2xl md:text-3xl font-semibold my-8",
}) => {
  const [currentItemIndex, setCurrentItemIndex] = useState(0);
  const [displayedText, setDisplayedText] = useState("");
  const [isDeleting, setIsDeleting] = useState(false);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    // Ensure items array is valid before starting
    if (!items || items.length === 0) return;

    // The helper function works correctly as it operates on the items array
    // which now contains only the dynamic parts.
    const step = calculateNextTypingStep(
      { items, currentItemIndex, displayedText, isDeleting },
      { typingSpeed, deletingSpeed, pauseDuration }
    );

    timeoutRef.current = setTimeout(() => {
      // Update the state for the dynamic part
      setDisplayedText(step.nextText);
      setIsDeleting(step.nextIsDeleting);

      // If we just finished deleting the dynamic part (it became empty)
      if (isDeleting && step.nextText === "") {
        // Move to the next item in the list
        setCurrentItemIndex((prevIndex) => (prevIndex + 1) % items.length);
        // isDeleting will be set to false in the next effect run via step.nextIsDeleting
      }
    }, step.delay);

    // Cleanup function
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, [
    items,
    currentItemIndex,
    displayedText,
    isDeleting,
    typingSpeed,
    deletingSpeed,
    pauseDuration,
  ]);

  return (
    <p className={cn(paragraphClassName)}>
      {/* Static prefix */}
      {staticPrefix && <span>{staticPrefix}</span>}

      {/* Dynamic part within styled span */}
      <span
        className={cn(
          // Core Tailwind utilities for gradient text
          "bg-gradient-to-r",
          // Colors based on tailwind.config.ts mapping
          "from-primary-500",
          "to-secondary-500",
          "dark:from-primary-400",
          "dark:to-secondary-400",
          "bg-clip-text",
          "text-transparent", // ESSENTIAL: Makes text transparent for gradient bg

          // Layout/Appearance utilities (from old CSS module)
          "inline-block",
          "font-bold", // font-weight: 700
          "relative", // For caret positioning
          "align-bottom", // Or align-baseline if preferred
          "whitespace-nowrap",

          // Add min-height using arbitrary value to prevent collapse
          "min-h-[1.2em]",

          // Custom class for the blinking caret (styles in global CSS)
          "blinkingCaret"
        )}
      >
        {/* Render a non-breaking space if dynamic text is empty for layout/caret */}
        {displayedText || "\u00A0"}
      </span>
    </p>
  );
};

export default TypingEffect;


================================================================================
FILE: components/typing/typing.module.css
================================================================================

/* @/components/typing/typing.module.css */

.gradientText {
  display: inline-block;
  font-weight: 700; /* Or theme('fontWeight.bold') if preferred */
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-image: linear-gradient(
    to right,
    /* Wrap variables in rgb() */ rgb(var(--primary)) 0%,
    rgb(var(--secondary)) 100%
  );
  position: relative;
  vertical-align: bottom;
  white-space: nowrap;
}

.dynamicTextContainer {
  min-height: 1.2em; /* Adjust as needed based on font size */
}

/* === Updated Blinking Neon Caret === */
/* (Using the previously refined version that references --accent) */
.blinkingCaret {
  position: relative;
}

.blinkingCaret::before,
.blinkingCaret::after {
  content: "";
  position: absolute;
  top: 0;
  bottom: 0;
  left: 100%;
  margin-left: 0.1em;
  animation: neon-blink 1.1s ease-in-out infinite;
}

.blinkingCaret::before {
  width: 2px;
  background-color: rgb(var(--accent));
  z-index: 2;
}

.blinkingCaret::after {
  width: 2px;
  background-color: transparent;
  box-shadow: 0 0 5px rgb(var(--accent)), 0 0 10px rgb(var(--accent)),
    0 0 15px rgb(var(--accent)), 0 0 20px rgb(var(--primary) / 0.7); /* Example secondary glow */
  z-index: 1;
}

/* === Keyframes for Neon Blink === */
@keyframes neon-blink {
  0%,
  100% {
    opacity: 1;
  }
  50% {
    opacity: 0.4;
  }
}


================================================================================
FILE: components/ui/Button.tsx
================================================================================

import React from 'react'
// import { cn } from '@/lib/utils'

import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

// Utility function for combining Tailwind classes
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger'
  size?: 'sm' | 'md' | 'lg'
  isLoading?: boolean
}

export default function Button({
  className,
  children,
  variant = 'primary',
  size = 'md',
  isLoading = false,
  disabled,
  ...props
}: ButtonProps) {
  const baseStyles =
    'font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none'

  const variants = {
    primary:
      'bg-purple-600 text-white hover:bg-purple-700 active:bg-purple-800',
    secondary:
      'bg-gray-200 text-gray-900 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-100 dark:hover:bg-gray-600',
    outline:
      'border border-gray-300 bg-transparent hover:bg-gray-100 dark:border-dark-border-medium dark:hover:bg-gray-800 dark:hover:text-gray-100 dark:text-gray-100',
    ghost:
      'bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800 dark:hover:text-gray-100 dark:text-gray-100',
    danger: 'bg-red-600 text-white hover:bg-red-700',
  }

  const sizes = {
    sm: 'h-8 px-3 text-xs rounded-md',
    md: 'h-10 px-4 py-2 text-sm rounded-md',
    lg: 'h-12 px-6 py-3 text-base rounded-lg',
  }

  return (
    <button
      className={cn(
        baseStyles,
        variants[variant],
        sizes[size],
        isLoading && 'opacity-70 cursor-not-allowed',
        className
      )}
      disabled={disabled || isLoading}
      {...props}
    >
      {isLoading ? (
        <div className="flex items-center justify-center">
          <svg
            className="animate-spin -ml-1 mr-2 h-4 w-4 text-current"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              className="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              strokeWidth="4"
            ></circle>
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
          <span>Loading...</span>
        </div>
      ) : (
        children
      )}
    </button>
  )
}


================================================================================
FILE: components/ui/footer.tsx
================================================================================

import { Timestamp } from "@/components/Timestamp"

export default function Footer() {
  return (
    <footer className="border-t border-gray-200 dark:border-dark-border-subtle bg-white dark:bg-dark-base">
      <div className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 gap-8 md:grid-cols-4">
          {/* ...existing footer content... */}
          <div className="mt-8 border-t pt-8 text-center">
            <p className="text-sm text-gray-600">
              &copy; <Timestamp /> Mode. All rights reserved.
            </p>
          </div>
        </div>
      </div>
    </footer>
  )
}


================================================================================
FILE: components/ui/header.tsx
================================================================================

import Link from "next/link";
import { Suspense } from "react";
import Button from "@/components/ui/Button";
import DashboardButton from "@/components/DashboardButton";
import Logo from "./logo";
import styles from "./ui.module.css";

const LINKS = [
  { href: "/about", label: "About" },
  { href: "/notes", label: "Notes" },
  { href: "/playbook", label: "Playbook" },
];

export default function Header() {
  return (
    <header className={styles.header}>
      <div className="max-w-6xl mx-auto px-4 sm:px-6">
        <div className={styles.header__inner}>
          {/* Site branding */}
          <div className="flex-1">
            <Logo />
          </div>

          {/* Desktop navigation */}
          <nav className="md:flex md:grow">
            {/* Desktop menu links */}
            <ul className={styles.nav}>
              {LINKS.map((link) => (
                <li key={link.label} className="navItem">
                  <Link className={styles.navItem} href={link.href}>
                    {link.label}
                  </Link>
                </li>
              ))}
            </ul>
          </nav>

          {/* Sign in links */}
          <div className="hidden flex items-center gap-4">
            <Suspense
              fallback={
                <div className="flex items-center space-x-4">
                  <Link href="/signin">
                    <Button variant="outline">Sign in</Button>
                  </Link>
                  <Link href="/signup">
                    <Button>Sign up</Button>
                  </Link>
                </div>
              }
            >
              <DashboardButton />
            </Suspense>
          </div>
        </div>
      </div>
    </header>
  );
}


================================================================================
FILE: components/ui/logo.tsx
================================================================================

import Link from "next/link"
import Image from "next/image"
import LogoImg from "@/public/logo.svg"

export default function Logo() {
  return (
    <Link className="inline-flex" href="/" aria-label="ai.com">
      <Image
        className="max-w-none"
        src={LogoImg}
        width={38}
        height={38}
        priority
        alt="logo"
      />
    </Link>
  )
}


================================================================================
FILE: components/ui/mobile-menu.tsx
================================================================================

"use client";

import { useState, useRef, useEffect } from "react";
import Link from "next/link";
import styles from "./ui.module.css";

const LINKS = [
  { href: "/", label: "Home" },
  { href: "/about", label: "About" },
  { href: "/notes", label: "Notes" },
  { href: "/playbook", label: "Playbook" },
  { href: "/today-i-learned", label: "TIL" },
];

export default function MobileMenu() {
  const [mobileNavOpen, setMobileNavOpen] = useState<boolean>(false);

  const trigger = useRef<HTMLButtonElement>(null);
  const mobileNav = useRef<HTMLDivElement>(null);

  // close the mobile menu on click outside
  useEffect(() => {
    const clickHandler = ({ target }: { target: EventTarget | null }): void => {
      if (!mobileNav.current || !trigger.current) return;
      if (
        !mobileNavOpen ||
        mobileNav.current.contains(target as Node) ||
        trigger.current.contains(target as Node)
      )
        return;
      setMobileNavOpen(false);
    };
    document.addEventListener("click", clickHandler);
    return () => document.removeEventListener("click", clickHandler);
  });

  // close the mobile menu if the esc key is pressed
  useEffect(() => {
    const keyHandler = ({ keyCode }: { keyCode: number }): void => {
      if (!mobileNavOpen || keyCode !== 27) return;
      setMobileNavOpen(false);
    };
    document.addEventListener("keydown", keyHandler);
    return () => document.removeEventListener("keydown", keyHandler);
  });

  return (
    <div className="md:display-none flex items-center ml-4">
      {/* Hamburger button */}
      <button
        ref={trigger}
        className={`${styles.hamburger}${mobileNavOpen && "active"}`}
        type="button"
        aria-controls="mobile-nav"
        aria-expanded={mobileNavOpen}
        onClick={() => setMobileNavOpen(!mobileNavOpen)}
      >
        <span className="sr-only">Menu</span>
        <svg
          className="w-5 h-5 fill-current text-slate-300 hover:text-white transition duration-150 ease-in-out"
          viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg"
        >
          <rect y="2" width="20" height="2" rx="1" />
          <rect y="9" width="20" height="2" rx="1" />
          <rect y="16" width="20" height="2" rx="1" />
        </svg>
      </button>

      {/*Mobile navigation */}
      <nav
        id="mobile-nav"
        ref={mobileNav}
        className="absolute top-full z-20 left-0 w-full px-4 sm:px-6 overflow-hidden transition-all duration-300 ease-in-out"
        style={
          mobileNavOpen
            ? { maxHeight: mobileNav.current?.scrollHeight, opacity: 1 }
            : { maxHeight: 0, opacity: 0.8 }
        }
      >
        <ul className="border border-transparent [background:linear-gradient(theme(colors.slate.900),_theme(colors.slate.900))_padding-box,_conic-gradient(theme(colors.slate.400),_theme(colors.slate.700)_25%,_theme(colors.slate.700)_75%,_theme(colors.slate.400)_100%)_border-box] rounded-lg px-4 py-1.5">
          {LINKS.map((link: { href: string; label: string }) => (
            <li key={link.label}>
              <Link
                className="flex font-medium text-sm text-slate-300 hover:text-white py-1.5"
                href={link.href}
              >
                {link.label}
              </Link>
            </li>
          ))}
        </ul>
      </nav>
    </div>
  );
}


================================================================================
FILE: components/ui/ui.module.css
================================================================================

/* Main header container */
.header {
  box-sizing: content-box;
  background: var(--background);
  border-block-start: 10px solid var(--primary-color);
  border-block-end: 1px solid var(--gray-lighter);
  box-shadow: 0 2px 10px var(--gray-light);
  position: sticky;
  inset-block-start: 0;
  height: var(--spacer);
  padding-inline: var(--spacer-small);

  font-family: var(--font-body);
  font-size: var(--font-size-medium);
  color: var(--text-color);
  font-weight: 400;
  -webkit-font-smoothing: antialiased;
}

/* Inner header container */
.header__inner {
  display: flex;
  justify-content: space-between;
  margin: auto;

  font-family: var(--font-body);
  font-size: var(--font-size-medium);
  font-weight: 400;
  color: var(--text-color);
  -webkit-font-smoothing: antialiased;
}

.nav {
  box-sizing: border-box;
  display: flex;
  flex-wrap: wrap;
  list-style: none;
  margin: 0;
  padding-inline-start: 0;
  gap: 20px;

  font-family: var(--font-body);
  font-size: var(--font-size-small);
  color: var(--text-color);
}

/* List item */
.navItem {
  display: grid;
  place-items: center;
  margin: 0;

  font-family: var(--font-body);
  font-size: var(--font-size-small);
  color: var(--text-color);

  -webkit-font-smoothing: antialiased;
}

/* Hamburger button */
.hamburger svg > *:nth-child(1),
.hamburger svg > *:nth-child(2),
.hamburger svg > *:nth-child(3) {
  transform-origin: center;
  transform: rotate(0deg);
}

.hamburger svg > *:nth-child(1) {
  transition: y 0.1s 0.25s ease-in,
    transform 0.22s cubic-bezier(0.55, 0.055, 0.675, 0.19), opacity 0.1s ease-in;
}

.hamburger svg > *:nth-child(2) {
  transition: transform 0.22s cubic-bezier(0.55, 0.055, 0.675, 0.19);
}

.hamburger svg > *:nth-child(3) {
  transition: y 0.1s 0.25s ease-in,
    transform 0.22s cubic-bezier(0.55, 0.055, 0.675, 0.19),
    width 0.1s 0.25s ease-in;
}

.hamburger.active svg > *:nth-child(1) {
  opacity: 0;
  y: 9;
  transform: rotate(225deg);
  transition: y 0.1s ease-out,
    transform 0.22s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1),
    opacity 0.1s 0.12s ease-out;
}

.hamburger.active svg > *:nth-child(2) {
  transform: rotate(225deg);
  transition: transform 0.22s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1);
}

.hamburger.active svg > *:nth-child(3) {
  y: 9;
  transform: rotate(135deg);
  transition: y 0.1s ease-out,
    transform 0.22s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1),
    width 0.1s ease-out;
}


================================================================================
FILE: db/index.ts
================================================================================

import { drizzle as drizzleNeon } from 'drizzle-orm/neon-http'
import { drizzle as drizzlePostgres } from 'drizzle-orm/node-postgres'
import { neon } from '@neondatabase/serverless'

import * as schema from './schema'

export const db = process.env.VERCEL
  ? drizzleNeon({
      client: neon(process.env.DATABASE_URL!),
      schema,
      casing: 'snake_case',
    })
  : drizzlePostgres(process.env.DATABASE_URL!, { schema, casing: 'snake_case' })


================================================================================
FILE: db/schema.ts
================================================================================

import { InferSelectModel, relations } from 'drizzle-orm'
import { pgTable, serial, text, timestamp, pgEnum } from 'drizzle-orm/pg-core'

// Enums for issue status and priority
export const statusEnum = pgEnum('status', [
  'backlog',
  'todo',
  'in_progress',
  'done',
])
export const priorityEnum = pgEnum('priority', ['low', 'medium', 'high'])

// Issues table
export const issues = pgTable('issues', {
  id: serial('id').primaryKey(),
  title: text('title').notNull(),
  description: text('description'),
  status: statusEnum('status').default('backlog').notNull(),
  priority: priorityEnum('priority').default('medium').notNull(),
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at').defaultNow().notNull(),
  userId: text('user_id').notNull(),
})

// Users table
export const users = pgTable('users', {
  id: text('id').primaryKey(),
  email: text('email').notNull().unique(),
  password: text('password').notNull(),
  createdAt: timestamp('created_at').defaultNow().notNull(),
})

// Relations between tables
export const issuesRelations = relations(issues, ({ one }) => ({
  user: one(users, {
    fields: [issues.userId],
    references: [users.id],
  }),
}))

export const usersRelations = relations(users, ({ many }) => ({
  issues: many(issues),
}))

// Types
export type Issue = InferSelectModel<typeof issues>
export type User = InferSelectModel<typeof users>

// Status and priority labels for display
export const ISSUE_STATUS = {
  backlog: { label: 'Backlog', value: 'backlog' },
  todo: { label: 'Todo', value: 'todo' },
  in_progress: { label: 'In Progress', value: 'in_progress' },
  done: { label: 'Done', value: 'done' },
}

export const ISSUE_PRIORITY = {
  low: { label: 'Low', value: 'low' },
  medium: { label: 'Medium', value: 'medium' },
  high: { label: 'High', value: 'high' },
}


================================================================================
FILE: eslint.config.mjs
================================================================================

import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;


================================================================================
FILE: mdx-components.tsx
================================================================================

// mdx-components.tsx
import type { MDXComponents } from "mdx/types";
import type { ComponentPropsWithoutRef } from "react";
import { cn } from "@/lib/utils";

// Define reusable gradient classes using Tailwind v3 utility classes
// Make sure primary/secondary are mapped in tailwind.config.ts
const gradientPrimaryText =
  "bg-gradient-to-r from-primary-500 to-secondary-500 dark:from-primary-400 dark:to-secondary-400 bg-clip-text text-transparent";
const gradientSecondaryText =
  "bg-gradient-to-r from-accent-500 to-primary-500 dark:from-accent-400 dark:to-primary-400 bg-clip-text text-transparent"; // Assumes accent is mapped

export function useMDXComponents(components: MDXComponents): MDXComponents {
  return {
    ...components,

    // Override h2 to apply primary gradient and base styles
    h2: ({ children, className, ...props }: ComponentPropsWithoutRef<"h2">) => (
      <h2
        // Apply Tailwind classes directly. Plugin handles base typography.
        className={cn(
          "mt-[2em] mb-[1em]", // Keep custom margins if desired
          gradientPrimaryText, // Apply the primary gradient
          className
        )}
        {...props}
      >
        {children}
      </h2>
    ),
    h3: ({ children, className, ...props }: ComponentPropsWithoutRef<"h3">) => (
      <h3
        className={cn(
          "mt-[1.8em] mb-[0.8em]", // Keep custom margins if desired
          gradientSecondaryText, // Apply the secondary gradient
          className
        )}
        {...props}
      >
        {children}
      </h3>
    ),

    // Override 'a' link element - rely on mdx.css for styling now
    a: ({ children, href, ...props }: ComponentPropsWithoutRef<"a">) => {
      const isExternal =
        href && (href.startsWith("http") || href.startsWith("//"));
      if (isExternal) {
        return (
          <a
            href={href}
            target="_blank"
            rel="noopener noreferrer"
            // Class applied for mdx.css to target, plugin handles base link style
            className="prose-a prose-a-external"
            {...props}
          >
            {children}
          </a>
        );
      }
      return (
        // Class applied for mdx.css to target
        <a href={href} className="prose-a prose-a-internal" {...props}>
          {children}
        </a>
      );
    },

    // Override hr to apply neon effect using Tailwind
    hr: ({ className, ...props }: ComponentPropsWithoutRef<"hr">) => (
      <hr
        className={cn(
          "my-12 h-0.5 border-none rounded", // Base structure & margin
          // Use Tailwind color utilities based on config mapping
          "bg-primary-500 dark:bg-primary-400",
          // Use CSS variables for the complex shadow
          "shadow-[0_0_10px_rgb(var(--primary-rgb)),0_0_20px_rgb(var(--primary-rgb)),0_0_30px_rgb(var(--accent-rgb))]",
          "animate-neonPulse", // Assumes animation exists
          className
        )}
        {...props}
      />
    ),
  };
}


================================================================================
FILE: next.config.ts
================================================================================

// next.config.ts
import type { NextConfig } from "next";
import { PHASE_DEVELOPMENT_SERVER } from 'next/constants';
import createMDX from '@next/mdx';

// Import MDX Plugins ---
import remarkGfm from 'remark-gfm';
import rehypePrettyCode from 'rehype-pretty-code';
import type { Element } from 'hast';
import type { Options as PrettyCodeOptions } from 'rehype-pretty-code'; //

//  Configure rehype-pretty-code
const prettyCodeOptions: PrettyCodeOptions = {
  theme: {
    // Match dark theme base (slate-900)
    dark: 'github-dark', // Example: Use GitHub Dark theme
    // Add light theme if desired
    light: 'github-light', // Example: Use GitHub Light theme
  },

  onVisitLine(node: Element) {
    if (node.children.length === 0) {
      node.children = [{ type: 'text', value: ' ' }];
    }
  },
  onVisitHighlightedLine(node: Element) {
    node.properties = node.properties || {};
    const currentClasses = node.properties.className;

    if (Array.isArray(currentClasses)) {
      // Already an array, push the new class
      currentClasses.push('line--highlighted');
    } else if (typeof currentClasses === 'string') {
      // It's a string, create a new array containing the existing class and the new one
      node.properties.className = [currentClasses, 'line--highlighted'];
    } else {
      // It's null, undefined, or something else - create a new array with just our class
      node.properties.className = ['line--highlighted'];
    }
  },

  onVisitHighlightedChars(node: Element) {
    node.properties = node.properties || {};
    node.properties.className = ['word--highlighted'];
  },

};


//  Main Next.js Config Function ---
const nextConfig = (phase: string): NextConfig => {
  // Call createMdx INSIDE the function ---
  const withMDX = createMDX({
    extension: /\.mdx?$/,
    options: {
      remarkPlugins: [remarkGfm],
      rehypePlugins: [[rehypePrettyCode, prettyCodeOptions]],
    },
  });

  if (phase === PHASE_DEVELOPMENT_SERVER) {
    console.log('happy building session ;)');
  }

  // Define base config options
  const nextConfigOptions: NextConfig = {
    pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'md', 'mdx'],
    reactStrictMode: true,
    poweredByHeader: false,
    experimental: {
      dynamicIO: true,
      typedRoutes: true,
      // mdxRs: false, // Explicitly ensure Rust compiler is off if relying on @mdx-js/loader
    },
    typescript: {
      ignoreBuildErrors: true,
    },
    eslint: {
      ignoreDuringBuilds: true,
    },
    // Add other configs like CSP headers, images, redirects here later
  };

  return withMDX(nextConfigOptions);
};

export default nextConfig


================================================================================
FILE: package.json
================================================================================

{
  "name": "samir.codes",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "vitest"
  },
  "dependencies": {
    "@mdx-js/loader": "^3.1.0",
    "@mdx-js/react": "^3.1.0",
    "@react-three/drei": "^10.0.6",
    "@react-three/fiber": "^9.1.2",
    "@tailwindcss/aspect-ratio": "^0.4.2",
    "@tailwindcss/container-queries": "^0.1.1",
    "@types/mdx": "^2.0.13",
    "@types/uuid": "^10.0.0",
    "aos": "^2.3.4",
    "bcrypt": "^5.1.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "dotenv": "^16.4.7",
    "drizzle-orm": "^0.39.3",
    "gray-matter": "^4.0.3",
    "jose": "^6.0.6",
    "lucide-react": "^0.475.0",
    "nanoid": "^5.1.2",
    "next": "15.3.0-canary.29",
    "next-themes": "^0.4.6",
    "pg": "^8.13.3",
    "postgres": "^3.4.5",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hot-toast": "^2.5.2",
    "react-icons": "^5.5.0",
    "rehype-pretty-code": "^0.14.1",
    "remark-gfm": "^4.0.1",
    "swiper": "^11.2.6",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "three": "^0.175.0",
    "uuid": "^11.1.0",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@next/mdx": "^15.2.4",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/typography": "^0.5.16",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.2.0",
    "@types/aos": "^3.0.7",
    "@types/bcrypt": "^5.0.2",
    "@types/hast": "^3.0.4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/three": "^0.175.0",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.21",
    "drizzle-kit": "^0.30.4",
    "eslint": "^9",
    "eslint-config-next": "15.3.0-canary.29",
    "jsdom": "^26.0.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.1",
    "tsx": "^4.19.3",
    "typescript": "^5",
    "vite-tsconfig-paths": "^5.1.4",
    "vitest": "^3.1.1"
  },
  "packageManager": "pnpm@8.15.3+sha512.dd85cd6eca6417c6f73db32ba1eb4767ffb4cba4f5bf0727846722c92b6b9e56a2cc218b11385bbc2b21f18a16a67da77aceae9b61a0f56a1643b25e1fb6a605"
}


================================================================================
FILE: postcss.config.mjs
================================================================================

/* eslint-disable import/no-anonymous-default-export */

// postcss.config.mjs
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

export default config;


================================================================================
FILE: tailwind.config.ts
================================================================================

// tailwind.config.ts (samir.codes - Downgraded to v3 style)
import type { Config } from 'tailwindcss'
import colors from 'tailwindcss/colors' // Import default colors for mapping
// Import necessary v3 plugins
import typography from '@tailwindcss/typography'
import forms from '@tailwindcss/forms'
import aspectRatio from '@tailwindcss/aspect-ratio'
import containerQueries from '@tailwindcss/container-queries'
// NOTE: tailwindcss-animate is removed for now

const config: Config = {
    content: [
        './components/**/*.{js,ts,jsx,tsx,mdx,css}',
        './app/**/*.{js,ts,jsx,tsx,mdx,css}',
    ],
    darkMode: 'class', // Keep using class-based dark mode
    theme: {
        extend: {
            // Color Palette Definition (Mapped to Tailwind v3 defaults) ---
            colors: {
                // Map semantic names to Tailwind scales based on your theme.css values
                primary: colors.purple,    // primary: 168 85 247; -> purple-500 is #a855f7
                secondary: colors.indigo,  // secondary: 99 102 241; -> indigo-500 is #6366f1
                accent: colors.pink, // Changed accent mapping for variety
                gray: colors.slate, // Use slate consistently

                // Basic placeholders - actual colors from CSS vars on body
                background: colors.white,
                foreground: colors.slate[900],

                // Explicitly include needed default colors
                red: colors.red,
                // Add blue, green etc. if used border-blue-500 etc.
            },

            fontFamily: {
                sans: ['var(--font-geist-sans)', 'ui-sans-serif', 'system-ui'],
                mono: ['var(--font-geist-mono)', 'ui-monospace', 'monospace'],
            },
            position: {
                sticky: 'sticky',
                fixed: 'fixed',
                absolute: 'absolute',
                relative: 'relative',
                static: 'static',
            },
            boxShadow: {
                'clay-dark': `
                  inset 4px 4px 8px rgba(0,0,0,0.3),
                  inset -4px -4px 8px rgba(51, 65, 85, 0.5),
                  5px 5px 10px rgba(0,0,0,0.4),
                  -5px -5px 10px rgba(51, 65, 85, 0.3)`,
            },
            fontSize: {
                'xs': 'clamp(0.8rem, 0.91cqw + 0.6rem, 0.98rem)',
                'sm': 'clamp(0.89rem, 0.95cqw + 0.7rem, 1.13rem)',
                'base': 'clamp(1rem, 1.05cqw + 0.8rem, 1.25rem)',
                // Add lg, xl, etc. if needed
            },
            scrollSnapType: {
                y: 'y mandatory',
            },
            gridTemplateColumns: {
                'scroll-slide': '40fr 5fr 5fr 40fr',
            },
        },
    },
    plugins: [
        aspectRatio,
        containerQueries,
        forms,
        typography({
            className: 'mdx-prose',
        })
    ],
}
export default config


================================================================================
FILE: tsconfig.json
================================================================================

// tsconfig.json

{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "app/posts/[slug]/fibonacci-spiral.mdx"],
  "exclude": ["node_modules"]
}

